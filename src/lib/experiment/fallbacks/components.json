{
    "ApertureComponent": {
        "__class__": "psychopy.experiment.components.aperture:ApertureComponent",
        "__name__": "ApertureComponent",
        "categories": [
            "Stimuli"
        ],
        "targets": [
            "PsychoPy"
        ],
        "plugin": null,
        "iconSVG": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 32 32\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:space=\"preserve\" xmlns:serif=\"http://www.serif.com/\" style=\"fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2;\">\n    <g id=\"ApertureComponent\" transform=\"matrix(0.451519,0,0,0.451519,0,0)\">\n        <rect x=\"0\" y=\"0\" width=\"70.872\" height=\"70.866\" style=\"fill:none;\"/>\n        <g id=\"Aperture-Component\" serif:id=\"Aperture Component\" transform=\"matrix(1.17824,0,0,1.17824,-5.83773,-6.17777)\">\n            <clipPath id=\"_clip1\">\n                <path d=\"M31.361,10.328C19.563,10.328 10,19.892 10,31.69L10,38.155C10,49.952 19.563,59.515 31.361,59.515L38.417,59.515C50.214,59.515 59.778,49.952 59.778,38.155L59.778,31.69C59.778,19.892 50.214,10.328 38.417,10.328L31.361,10.328Z\" clip-rule=\"nonzero\"/>\n            </clipPath>\n            <g clip-path=\"url(#_clip1)\">\n                <g opacity=\"0.8\">\n                    <path d=\"M31.361,10.328C19.563,10.328 10,19.892 10,31.69L10,38.155C10,49.952 19.563,59.515 31.361,59.515L38.417,59.515C50.214,59.515 59.778,49.952 59.778,38.155L59.778,31.69C59.778,19.892 50.214,10.328 38.417,10.328L31.361,10.328Z\" style=\"fill:none;fill-rule:nonzero;\"/>\n                    <clipPath id=\"_clip2\">\n                        <path d=\"M31.361,10.328C19.563,10.328 10,19.892 10,31.69L10,38.155C10,49.952 19.563,59.515 31.361,59.515L38.417,59.515C50.214,59.515 59.778,49.952 59.778,38.155L59.778,31.69C59.778,19.892 50.214,10.328 38.417,10.328L31.361,10.328Z\" clip-rule=\"nonzero\"/>\n                    </clipPath>\n                    <g clip-path=\"url(#_clip2)\">\n                        <g id=\"Image-Component\" serif:id=\"Image Component\" transform=\"matrix(1,0,0,1,13.727,11.555)\">\n                            <path id=\"Frame\" d=\"M14.46,10.135C10.354,10.135 7.025,13.464 7.025,17.571L7.025,53.295C7.025,57.402 10.354,60.731 14.46,60.731L56.411,60.731C60.518,60.731 63.847,57.402 63.847,53.295L63.847,17.571C63.847,13.464 60.518,10.135 56.411,10.135L14.46,10.135Z\" style=\"fill:none;fill-rule:nonzero;\"/>\n                            <clipPath id=\"_clip3\">\n                                <path id=\"Frame1\" serif:id=\"Frame\" d=\"M14.46,10.135C10.354,10.135 7.025,13.464 7.025,17.571L7.025,53.295C7.025,57.402 10.354,60.731 14.46,60.731L56.411,60.731C60.518,60.731 63.847,57.402 63.847,53.295L63.847,17.571C63.847,13.464 60.518,10.135 56.411,10.135L14.46,10.135Z\" clip-rule=\"nonzero\"/>\n                            </clipPath>\n                            <g clip-path=\"url(#_clip3)\">\n                                <g id=\"Sky\" transform=\"matrix(-1,0,0,1,66.724,0.6631)\">\n                                    <rect x=\"-6.532\" y=\"1.239\" width=\"79.788\" height=\"67.725\" style=\"fill:rgb(2,169,234);\"/>\n                                </g>\n                                <g id=\"Sun\" transform=\"matrix(1.05203e-32,0.902339,0.902339,-1.05203e-32,25.8961,11.7453)\">\n                                    <path d=\"M10.24,-10.24C4.585,-10.24 0.001,-5.656 0.001,-0.001C0.001,5.655 4.585,10.24 10.24,10.24C15.894,10.24 20.478,5.655 20.478,-0.001C20.478,-5.656 15.894,-10.24 10.24,-10.24\" style=\"fill:var(--mantle);fill-rule:nonzero;\"/>\n                                </g>\n                                <g id=\"Mountains\" transform=\"matrix(0.856022,0,0,0.856022,-407.995,1.75405)\">\n                                    <path d=\"M484,41.774L496.338,27.38C497.941,25.509 500.887,25.688 502.253,27.737L510.432,40.01L527.58,20.004C528.661,18.742 530.648,18.862 531.57,20.245L544,38.899L544,65L484,65L484,41.774Z\" style=\"fill:var(--outline);\"/>\n                                </g>\n                            </g>\n                        </g>\n                    </g>\n                </g>\n            </g>\n            <g transform=\"matrix(1,0,0,1,35.0303,63.5159)\">\n                <path d=\"M0,-56.393C-15.547,-56.393 -28.196,-43.744 -28.196,-28.197C-28.196,-12.649 -15.547,0 0,0C15.547,0 28.195,-12.649 28.195,-28.197C28.195,-43.744 15.547,-56.393 0,-56.393M0,-52.393C13.341,-52.393 24.195,-41.539 24.195,-28.197C24.195,-14.855 13.341,-4 0,-4C-13.342,-4 -24.196,-14.855 -24.196,-28.197C-24.196,-41.539 -13.342,-52.393 0,-52.393\" style=\"fill:var(--outline);fill-rule:nonzero;\"/>\n            </g>\n        </g>\n    </g>\n</svg>\n",
        "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\aperture\\aperture.png",
        "tooltip": "Aperture: restrict the drawing of stimuli to a given region",
        "version": "0.0.0",
        "beta": false,
        "validatorClasses": [
            "VisualValidatorRoutine"
        ],
        "hidden": false,
        "params": {
            "name": {
                "val": "aperture",
                "valType": "code",
                "inputType": "name",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Name",
                "hint": "Name of this Component (alphanumeric or _, no spaces)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startVal": {
                "val": 0.0,
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Start",
                "hint": "When does the Component start?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startEstim": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Expected start (s)",
                "hint": "(Optional) expected start (s), purely for representing in the timeline",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startType": {
                "val": "time (s)",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "time (s)",
                    "frame N",
                    "condition"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Start type",
                "hint": "How do you want to define your start point?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "stopVal": {
                "val": 1.0,
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": [],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop",
                "hint": "When does the Component end? (blank is endless)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "durationEstim": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Expected duration (s)",
                "hint": "(Optional) expected duration (s), purely for representing in the timeline",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "stopType": {
                "val": "duration (s)",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "duration (s)",
                    "duration (frames)",
                    "time (s)",
                    "frame N",
                    "condition"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop type",
                "hint": "How do you want to define your end point?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "size": {
                "val": 1,
                "valType": "list",
                "inputType": "single",
                "categ": "Layout",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Size",
                "hint": "How big is the aperture? (a single number for diameter)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "pos": {
                "val": [
                    0,
                    0
                ],
                "valType": "list",
                "inputType": "single",
                "categ": "Layout",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Position [x,y]",
                "hint": "Where is the aperture centred?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "units": {
                "val": "norm",
                "valType": "str",
                "inputType": "choice",
                "categ": "Layout",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "from exp settings",
                    "deg",
                    "cm",
                    "pix",
                    "norm",
                    "height",
                    "degFlatPos",
                    "degFlat"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Spatial units",
                "hint": "Units of dimensions for this stimulus",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "anchor": {
                "val": "center",
                "valType": "str",
                "inputType": "choice",
                "categ": "Layout",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [
                    "center",
                    "top-center",
                    "bottom-center",
                    "center-left",
                    "center-right",
                    "top-left",
                    "top-right",
                    "bottom-left",
                    "bottom-right"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Anchor",
                "hint": "Which point on the aperture should be anchored to its exact position?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "ori": {
                "val": 0,
                "valType": "num",
                "inputType": "spin",
                "categ": "Layout",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [
                    -360,
                    360
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Orientation",
                "hint": "Orientation of this stimulus (in deg)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "shape": {
                "val": "triangle",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "line",
                    "triangle",
                    "rectangle",
                    "circle",
                    "cross",
                    "star7",
                    "arrow",
                    "regular polygon...",
                    "custom polygon..."
                ],
                "allowedLabels": [
                    "Line",
                    "Triangle",
                    "Rectangle",
                    "Circle",
                    "Cross",
                    "Star",
                    "Arrow",
                    "Regular polygon...",
                    "Custom polygon..."
                ],
                "ctrlParams": {},
                "label": "Shape",
                "hint": "What shape is this? With 'regular polygon...' you can set number of vertices and with 'custom polygon...' you can set vertices",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "nVertices": {
                "val": 4,
                "valType": "int",
                "inputType": "single",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Num. vertices",
                "hint": "How many vertices in your regular polygon?",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "shape",
                            "condition": "=='regular polygon...'"
                        }
                    ],
                    "enabled": []
                }
            },
            "saveStartStop": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Save onset/offset times",
                "hint": "Store the onset/offset times in the data file (as well as in the log file).",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "syncScreenRefresh": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Sync timing with screen refresh",
                "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "disabled": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Disable Component",
                "hint": "Disable this Component",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "validator": {
                "val": "",
                "valType": "code",
                "inputType": "validator",
                "categ": "Testing",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "VisualValidatorRoutine"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Validate with...",
                "hint": "Name of validator Component/Routine to use to check the timing of this stimulus.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "vertices": {
                "val": "",
                "valType": "list",
                "inputType": "single",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Vertices",
                "hint": "What are the vertices of your polygon? Should be an nx2 array or a list of [x, y] lists",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "shape",
                            "condition": "=='custom polygon...'"
                        }
                    ],
                    "enabled": []
                }
            },
            "draggable": {
                "val": false,
                "valType": "code",
                "inputType": "bool",
                "categ": "Layout",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Draggable?",
                "hint": "Should this stimulus be moveble by clicking and dragging?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            }
        }
    },
    "PolygonComponent": {
        "__class__": "psychopy.experiment.components.polygon:PolygonComponent",
        "__name__": "PolygonComponent",
        "categories": [
            "Stimuli"
        ],
        "targets": [
            "PsychoPy",
            "PsychoJS"
        ],
        "plugin": null,
        "iconSVG": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 32 32\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:space=\"preserve\" xmlns:serif=\"http://www.serif.com/\" style=\"fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2;\">\n    <g id=\"light-components-PolygonComponent\" serif:id=\"light/components/PolygonComponent\" transform=\"matrix(0.451519,0,0,0.451519,0,0)\">\n        <rect x=\"0\" y=\"0\" width=\"70.872\" height=\"70.866\" style=\"fill:none;\"/>\n        <g id=\"Polygon-Component\" serif:id=\"Polygon Component\" transform=\"matrix(0.877427,0,0,0.877427,6.62776,4.7213)\">\n            <g transform=\"matrix(1,0,0,1,30.825,29.2602)\">\n                <path d=\"M0,38.347L39.603,19.165L8.312,0L0,38.347Z\" style=\"fill:rgb(2,169,234);fill-rule:nonzero;\"/>\n            </g>\n            <g transform=\"matrix(1,0,0,1,64.448,28.8455)\">\n                <path d=\"M0,-14.151L0,0L-12.291,0L-12.291,12.291L-26.442,12.291L-26.442,0L-38.732,0L-38.732,-14.151L-26.442,-14.151L-26.442,-26.442L-12.291,-26.442L-12.291,-14.151L0,-14.151Z\" style=\"fill:var(--outline);fill-rule:nonzero;\"/>\n            </g>\n            <g transform=\"matrix(0.866025,-0.500001,-0.500001,-0.866025,34.7834,52.9271)\">\n                <path d=\"M-9.037,-2.421C-18.852,-2.421 -26.808,5.67 -26.808,15.652C-26.808,25.635 -18.852,33.727 -9.037,33.726C0.778,33.726 8.734,25.635 8.734,15.653C8.734,5.67 0.778,-2.422 -9.037,-2.421\" style=\"fill:rgb(242,84,91);fill-rule:nonzero;\"/>\n            </g>\n        </g>\n    </g>\n</svg>\n",
        "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\polygon\\polygon.png",
        "tooltip": "Polygon: any regular polygon (line, triangle, square...circle)",
        "version": "0.0.0",
        "beta": false,
        "validatorClasses": [
            "VisualValidatorRoutine"
        ],
        "hidden": false,
        "params": {
            "name": {
                "val": "polygon",
                "valType": "code",
                "inputType": "name",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Name",
                "hint": "Name of this Component (alphanumeric or _, no spaces)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startVal": {
                "val": 0.0,
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Start",
                "hint": "When does the Component start?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startEstim": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Expected start (s)",
                "hint": "(Optional) expected start (s), purely for representing in the timeline",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startType": {
                "val": "time (s)",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "time (s)",
                    "frame N",
                    "condition"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Start type",
                "hint": "How do you want to define your start point?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "stopVal": {
                "val": 1.0,
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": [],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop",
                "hint": "When does the Component end? (blank is endless)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "durationEstim": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Expected duration (s)",
                "hint": "(Optional) expected duration (s), purely for representing in the timeline",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "stopType": {
                "val": "duration (s)",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "duration (s)",
                    "duration (frames)",
                    "time (s)",
                    "frame N",
                    "condition"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop type",
                "hint": "How do you want to define your end point?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "fillColor": {
                "val": "white",
                "valType": "color",
                "inputType": "color",
                "categ": "Appearance",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Fill color",
                "hint": "Fill color of this stimulus (e.g. $[1,1,0], red )",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "lineColor": {
                "val": "white",
                "valType": "color",
                "inputType": "color",
                "categ": "Appearance",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Border color",
                "hint": "Border color of this stimulus (e.g. $[1,1,0], red )",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "colorSpace": {
                "val": "rgb",
                "valType": "str",
                "inputType": "choice",
                "categ": "Appearance",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [
                    "rgb",
                    "dkl",
                    "lms",
                    "hsv"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Color space",
                "hint": "In what format (color space) have you specified the colors? (rgb, dkl, lms, hsv)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "opacity": {
                "val": "",
                "valType": "num",
                "inputType": "single",
                "categ": "Appearance",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Opacity",
                "hint": "Opacity of the stimulus (1=opaque, 0=fully transparent, 0.5=translucent). Leave blank for each color to have its own opacity (recommended if any color is None).",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "size": {
                "val": [
                    0.5,
                    0.5
                ],
                "valType": "list",
                "inputType": "single",
                "categ": "Layout",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Size [w,h]",
                "hint": "Size of this stimulus [w,h]. Note that for a line only the first value is used, for triangle and rect the [w,h] is as expected,\n but for higher-order polygons it represents the [w,h] of the ellipse that the polygon sits on!! ",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "pos": {
                "val": [
                    0,
                    0
                ],
                "valType": "list",
                "inputType": "single",
                "categ": "Layout",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Position [x,y]",
                "hint": "Position of this stimulus (e.g. [1,2] )",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "units": {
                "val": "from exp settings",
                "valType": "str",
                "inputType": "choice",
                "categ": "Layout",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "from exp settings",
                    "deg",
                    "cm",
                    "pix",
                    "norm",
                    "height",
                    "degFlatPos",
                    "degFlat"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Spatial units",
                "hint": "Units of dimensions for this stimulus",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "anchor": {
                "val": "center",
                "valType": "str",
                "inputType": "choice",
                "categ": "Layout",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [
                    "center",
                    "top-center",
                    "bottom-center",
                    "center-left",
                    "center-right",
                    "top-left",
                    "top-right",
                    "bottom-left",
                    "bottom-right"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Anchor",
                "hint": "Which point on the stimulus should be anchored to its exact position?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "ori": {
                "val": 0,
                "valType": "num",
                "inputType": "spin",
                "categ": "Layout",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [
                    -360,
                    360
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Orientation",
                "hint": "Orientation of this stimulus (in deg)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "shape": {
                "val": "triangle",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "line",
                    "triangle",
                    "rectangle",
                    "circle",
                    "cross",
                    "star7",
                    "arrow",
                    "regular polygon...",
                    "custom polygon..."
                ],
                "allowedLabels": [
                    "Line",
                    "Triangle",
                    "Rectangle",
                    "Circle",
                    "Cross",
                    "Star",
                    "Arrow",
                    "Regular polygon...",
                    "Custom polygon..."
                ],
                "ctrlParams": {},
                "label": "Shape",
                "hint": "What shape is this? With 'regular polygon...' you can set number of vertices and with 'custom polygon...' you can set vertices",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "nVertices": {
                "val": 4,
                "valType": "int",
                "inputType": "single",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Num. vertices",
                "hint": "How many vertices in your regular polygon?",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "shape",
                            "condition": "=='regular polygon...'"
                        }
                    ],
                    "enabled": []
                }
            },
            "saveStartStop": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Save onset/offset times",
                "hint": "Store the onset/offset times in the data file (as well as in the log file).",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "syncScreenRefresh": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Sync timing with screen refresh",
                "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "disabled": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Disable Component",
                "hint": "Disable this Component",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "contrast": {
                "val": 1,
                "valType": "num",
                "inputType": "single",
                "categ": "Appearance",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Contrast",
                "hint": "Contrast of the stimulus (1.0=unchanged contrast, 0.5=decrease contrast, 0.0=uniform/no contrast, -0.5=slightly inverted, -1.0=totally inverted)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "validator": {
                "val": "",
                "valType": "code",
                "inputType": "validator",
                "categ": "Testing",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "VisualValidatorRoutine"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Validate with...",
                "hint": "Name of validator Component/Routine to use to check the timing of this stimulus.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "vertices": {
                "val": "",
                "valType": "list",
                "inputType": "single",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Vertices",
                "hint": "What are the vertices of your polygon? Should be an nx2 array or a list of [x, y] lists",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "shape",
                            "condition": "=='custom polygon...'"
                        }
                    ],
                    "enabled": []
                }
            },
            "draggable": {
                "val": false,
                "valType": "code",
                "inputType": "bool",
                "categ": "Layout",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Draggable?",
                "hint": "Should this stimulus be moveble by clicking and dragging?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "lineWidth": {
                "val": 1,
                "valType": "num",
                "inputType": "single",
                "categ": "Appearance",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Line width",
                "hint": "Width of the shape's line (always in pixels - this does NOT use 'units')",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "interpolate": {
                "val": "linear",
                "valType": "str",
                "inputType": "choice",
                "categ": "Texture",
                "updates": "constant",
                "allowedUpdates": [],
                "allowedVals": [
                    "linear",
                    "nearest"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Interpolate",
                "hint": "How should the image be interpolated if/when rescaled",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            }
        }
    },
    "BrushComponent": {
        "__class__": "psychopy.experiment.components.brush:BrushComponent",
        "__name__": "BrushComponent",
        "categories": [
            "Responses"
        ],
        "targets": [
            "PsychoPy",
            "PsychoJS"
        ],
        "plugin": null,
        "iconSVG": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 32 32\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:space=\"preserve\" xmlns:serif=\"http://www.serif.com/\" style=\"fill-rule:evenodd;clip-rule:evenodd;stroke-miterlimit:10;\">\n    <g id=\"light-components-BrushComponent\" serif:id=\"light/components/BrushComponent\" transform=\"matrix(0.451519,0,0,0.451519,0,0)\">\n        <rect x=\"0\" y=\"0\" width=\"70.872\" height=\"70.866\" style=\"fill:none;\"/>\n        <clipPath id=\"_clip1\">\n            <rect x=\"0\" y=\"0\" width=\"70.872\" height=\"70.866\"/>\n        </clipPath>\n        <g clip-path=\"url(#_clip1)\">\n            <g id=\"Brush-Component\" serif:id=\"Brush Component\" transform=\"matrix(1.04598,0,0,1.04598,-1.89518,-2.85414)\">\n                <g transform=\"matrix(1,0,0,1,59.3863,15.2264)\">\n                    <path d=\"M0,6.571C-3.293,14.441 -6.585,16.168 -7.308,15.979C-8.818,15.585 -6.992,6.901 -9.443,5.939C-11.106,5.286 -13.479,10.601 -15.108,10.102C-16.217,9.765 -16.955,6.999 -16.933,3.615C-16.926,3.601 -16.919,3.58 -16.919,3.566C-16.828,3.089 -16.821,2.618 -16.877,2.148C-17.404,-2.633 -24.642,-6.501 -23.884,-7.765C-22.768,-9.597 -4.072,-6.747 0,6.571\" style=\"fill:rgb(242,84,91);fill-rule:nonzero;\"/>\n                </g>\n                <g transform=\"matrix(1,0,0,1,35.7764,43.7854)\">\n                    <path d=\"M0,-36.323C-0.838,-34.944 7.963,-30.422 6.961,-24.994C6.182,-20.772 0.37,-20.857 -1.774,-15.439C-3.375,-11.397 -2.263,-5.987 0.955,-2.882C5.843,1.834 14.667,0.343 19.655,-3.974C25.334,-8.889 25.433,-16.94 23.887,-21.991C19.809,-35.309 1.115,-38.157 0,-36.323Z\" style=\"fill:none;fill-rule:nonzero;stroke:var(--outline);stroke-width:4px;\"/>\n                </g>\n                <g transform=\"matrix(1,0,0,1,35.363,66.6627)\">\n                    <path d=\"M0,-24.438C-1.486,-25.219 -3.312,-24.946 -4.512,-23.772C-18.872,-9.708 -25.495,-1.995 -24.377,-0.634C-23.216,0.781 -13.698,-4.663 4.179,-16.965C6.152,-18.323 5.982,-21.296 3.862,-22.41L0,-24.438Z\" style=\"fill:none;fill-rule:nonzero;stroke:var(--outline);stroke-width:4px;\"/>\n                </g>\n            </g>\n        </g>\n    </g>\n</svg>\n",
        "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\brush\\brush.png",
        "tooltip": "Brush: a drawing tool",
        "version": "0.0.0",
        "beta": false,
        "validatorClasses": [
            "VisualValidatorRoutine"
        ],
        "hidden": false,
        "params": {
            "name": {
                "val": "brush",
                "valType": "code",
                "inputType": "name",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Name",
                "hint": "Name of this Component (alphanumeric or _, no spaces)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startVal": {
                "val": 0.0,
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Start",
                "hint": "When does the Component start?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startEstim": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Expected start (s)",
                "hint": "(Optional) expected start (s), purely for representing in the timeline",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startType": {
                "val": "time (s)",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "time (s)",
                    "frame N",
                    "condition"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Start type",
                "hint": "How do you want to define your start point?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "stopVal": {
                "val": 1.0,
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": [],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop",
                "hint": "When does the Component end? (blank is endless)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "durationEstim": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Expected duration (s)",
                "hint": "(Optional) expected duration (s), purely for representing in the timeline",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "stopType": {
                "val": "duration (s)",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "duration (s)",
                    "duration (frames)",
                    "time (s)",
                    "frame N",
                    "condition"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop type",
                "hint": "How do you want to define your end point?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "lineWidth": {
                "val": 1.5,
                "valType": "num",
                "inputType": "spin",
                "categ": "Appearance",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Brush size",
                "hint": "Width of the brush's line (always in pixels and limited to 10px max width)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "lineColor": {
                "val": "$[1,1,1]",
                "valType": "color",
                "inputType": "color",
                "categ": "Appearance",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Brush color",
                "hint": "Fill color of this brush",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "lineColorSpace": {
                "val": "rgb",
                "valType": "str",
                "inputType": "choice",
                "categ": "Appearance",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [
                    "rgb",
                    "dkl",
                    "lms",
                    "hsv"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Color space",
                "hint": "In what format (color space) have you specified the colors? (rgb, dkl, lms, hsv)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "opacity": {
                "val": "",
                "valType": "num",
                "inputType": "single",
                "categ": "Appearance",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Opacity",
                "hint": "The line opacity",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "saveStartStop": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Save onset/offset times",
                "hint": "Store the onset/offset times in the data file (as well as in the log file).",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "syncScreenRefresh": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Sync timing with screen refresh",
                "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "disabled": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Disable Component",
                "hint": "Disable this Component",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "contrast": {
                "val": 1,
                "valType": "num",
                "inputType": "single",
                "categ": "Appearance",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Contrast",
                "hint": "Contrast of the stimulus (1.0=unchanged contrast, 0.5=decrease contrast, 0.0=uniform/no contrast, -0.5=slightly inverted, -1.0=totally inverted)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "validator": {
                "val": "",
                "valType": "code",
                "inputType": "validator",
                "categ": "Testing",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "VisualValidatorRoutine"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Validate with...",
                "hint": "Name of validator Component/Routine to use to check the timing of this stimulus.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "buttonRequired": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Press button",
                "hint": "Should the participant have to press a button to paint (True), or should it be always on (False)?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            }
        }
    },
    "ButtonComponent": {
        "__class__": "psychopy.experiment.components.button:ButtonComponent",
        "__name__": "ButtonComponent",
        "categories": [
            "Responses"
        ],
        "targets": [
            "PsychoPy",
            "PsychoJS"
        ],
        "plugin": null,
        "iconSVG": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 32 32\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:space=\"preserve\" xmlns:serif=\"http://www.serif.com/\" style=\"fill-rule:evenodd;clip-rule:evenodd;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:1.5;\">\n    <g id=\"light-components-ButtonComponent\" serif:id=\"light/components/ButtonComponent\" transform=\"matrix(0.451519,0,0,0.451519,0,0)\">\n        <rect x=\"0\" y=\"0\" width=\"70.872\" height=\"70.866\" style=\"fill:none;\"/>\n        <clipPath id=\"_clip1\">\n            <rect x=\"0\" y=\"0\" width=\"70.872\" height=\"70.866\"/>\n        </clipPath>\n        <g clip-path=\"url(#_clip1)\">\n            <g id=\"mask\" transform=\"matrix(2.53114,0,0,2.6577,-5.06228,-18.8253)\">\n                <path d=\"M30,7.083L30,28.333L19.5,18.75L18.187,19.583L18.187,33.75L2,33.75L2,7.083L30,7.083Z\" style=\"fill:none;\"/>\n                <clipPath id=\"_clip2\">\n                    <path d=\"M30,7.083L30,28.333L19.5,18.75L18.187,19.583L18.187,33.75L2,33.75L2,7.083L30,7.083Z\"/>\n                </clipPath>\n                <g clip-path=\"url(#_clip2)\">\n                    <g transform=\"matrix(0.875,0,0,0.8,2,4.97417)\">\n                        <path d=\"M30,13.125L30,19.375C30,21.1 28.656,22.5 27,22.5L5,22.5C3.344,22.5 2,21.1 2,19.375L2,13.125C2,11.4 3.344,10 5,10L27,10C28.656,10 30,11.4 30,13.125Z\" style=\"fill:none;stroke:var(--outline);stroke-width:2.04px;\"/>\n                    </g>\n                    <g transform=\"matrix(0.450909,0,0,0.429438,-108.461,-129.783)\">\n                        <path d=\"M271.171,345.985C271.171,351.861 275.942,356.632 281.818,356.632C287.695,356.632 292.465,351.861 292.465,345.985C292.465,340.109 287.695,335.338 281.818,335.338C275.942,335.338 271.171,340.109 271.171,345.985ZM273.171,345.985C273.171,341.213 277.046,337.338 281.818,337.338C286.591,337.338 290.465,341.213 290.465,345.985C290.465,350.758 286.591,354.632 281.818,354.632C277.046,354.632 273.171,350.758 273.171,345.985ZM274.521,345.985C274.521,350.013 277.791,353.283 281.819,353.283C285.846,353.283 289.117,350.013 289.117,345.985C289.117,341.957 285.846,338.687 281.819,338.687C277.791,338.687 274.521,341.957 274.521,345.985ZM278.521,345.985C278.521,344.165 279.998,342.687 281.819,342.687C283.639,342.687 285.117,344.165 285.117,345.985C285.117,347.805 283.639,349.283 281.819,349.283C279.998,349.283 278.521,347.805 278.521,345.985Z\" style=\"fill:rgb(242,84,91);\"/>\n                    </g>\n                </g>\n            </g>\n            <g id=\"Mouse-Component\" serif:id=\"Mouse Component\" transform=\"matrix(0.937657,0,0,0.937657,43.4449,67.5498)\">\n                <path d=\"M0,-40.613C-2.7,-40.613 -4.897,-38.418 -4.897,-35.72L-4.897,-10.685C-4.897,-7.987 -2.7,-5.792 0,-5.792C1.227,-5.792 2.402,-6.253 3.309,-7.089L4.549,-8.232L7.075,-2.823C7.875,-1.108 9.615,0 11.507,0C12.191,0 12.855,-0.141 13.481,-0.417L16.676,-1.826C19.116,-2.903 20.238,-5.68 19.231,-8.149L17.039,-13.523L18.406,-13.573C20.38,-13.646 22.105,-14.888 22.802,-16.736C23.499,-18.584 23.022,-20.655 21.588,-22.013L3.357,-39.272C2.443,-40.137 1.251,-40.613 0,-40.613M0,-36.613C0.212,-36.613 0.427,-36.537 0.607,-36.367L18.838,-19.108C19.412,-18.565 19.047,-17.6 18.258,-17.571L12.448,-17.356C11.829,-17.333 11.422,-16.702 11.655,-16.129L15.527,-6.638C15.71,-6.192 15.503,-5.681 15.062,-5.486L11.867,-4.076C11.75,-4.025 11.628,-4 11.507,-4C11.171,-4 10.85,-4.191 10.699,-4.515L6.375,-13.776C6.22,-14.108 5.896,-14.291 5.566,-14.291C5.353,-14.291 5.138,-14.215 4.964,-14.054L0.598,-10.03C0.42,-9.866 0.208,-9.792 0,-9.792C-0.459,-9.792 -0.897,-10.151 -0.897,-10.685L-0.897,-35.72C-0.897,-36.255 -0.459,-36.613 0,-36.613\" style=\"fill:var(--outline);fill-rule:nonzero;\"/>\n            </g>\n        </g>\n    </g>\n</svg>\n",
        "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\button\\button.png",
        "tooltip": "Button: A clickable textbox",
        "version": "2021.1.0",
        "beta": true,
        "validatorClasses": [
            "VisualValidatorRoutine"
        ],
        "hidden": false,
        "params": {
            "name": {
                "val": "button",
                "valType": "code",
                "inputType": "name",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Name",
                "hint": "Name of this Component (alphanumeric or _, no spaces)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startVal": {
                "val": 0,
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Start",
                "hint": "When does the Component start?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startEstim": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Expected start (s)",
                "hint": "(Optional) expected start (s), purely for representing in the timeline",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startType": {
                "val": "time (s)",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "time (s)",
                    "frame N",
                    "condition"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Start type",
                "hint": "How do you want to define your start point?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "stopVal": {
                "val": 1.0,
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": [],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop",
                "hint": "When does the Component end? (blank is endless)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "durationEstim": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Expected duration (s)",
                "hint": "(Optional) expected duration (s), purely for representing in the timeline",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "stopType": {
                "val": "duration (s)",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "duration (s)",
                    "duration (frames)",
                    "time (s)",
                    "frame N",
                    "condition"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop type",
                "hint": "How do you want to define your end point?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "color": {
                "val": "white",
                "valType": "color",
                "inputType": "color",
                "categ": "Appearance",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Text color",
                "hint": "Foreground color of this stimulus (e.g. $[1,1,0], red )",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "fillColor": {
                "val": "darkgrey",
                "valType": "color",
                "inputType": "color",
                "categ": "Appearance",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Fill color",
                "hint": "Fill color of this stimulus (e.g. $[1,1,0], red )",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "borderColor": {
                "val": "None",
                "valType": "color",
                "inputType": "color",
                "categ": "Appearance",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Border color",
                "hint": "Border color of this stimulus (e.g. $[1,1,0], red )",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "colorSpace": {
                "val": "rgb",
                "valType": "str",
                "inputType": "choice",
                "categ": "Appearance",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [
                    "rgb",
                    "dkl",
                    "lms",
                    "hsv"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Color space",
                "hint": "In what format (color space) have you specified the colors? (rgb, dkl, lms, hsv)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "opacity": {
                "val": "",
                "valType": "num",
                "inputType": "single",
                "categ": "Appearance",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Opacity",
                "hint": "Opacity of the stimulus (1=opaque, 0=fully transparent, 0.5=translucent). Leave blank for each color to have its own opacity (recommended if any color is None).",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "size": {
                "val": [
                    0.5,
                    0.5
                ],
                "valType": "list",
                "inputType": "single",
                "categ": "Layout",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Size [w,h]",
                "hint": "Size of this stimulus (either a single value or x,y pair, e.g. 2.5, [1,2] ",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "pos": {
                "val": [
                    0,
                    0
                ],
                "valType": "list",
                "inputType": "single",
                "categ": "Layout",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Position [x,y]",
                "hint": "Position of this stimulus (e.g. [1,2] )",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "units": {
                "val": "from exp settings",
                "valType": "str",
                "inputType": "choice",
                "categ": "Layout",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "from exp settings",
                    "deg",
                    "cm",
                    "pix",
                    "norm",
                    "height",
                    "degFlatPos",
                    "degFlat"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Spatial units",
                "hint": "Units of dimensions for this stimulus",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "anchor": {
                "val": "center",
                "valType": "str",
                "inputType": "choice",
                "categ": "Layout",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [
                    "center",
                    "top-center",
                    "bottom-center",
                    "center-left",
                    "center-right",
                    "top-left",
                    "top-right",
                    "bottom-left",
                    "bottom-right"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Anchor",
                "hint": "Should text anchor to the top, center or bottom of the box?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "ori": {
                "val": 0,
                "valType": "num",
                "inputType": "spin",
                "categ": "Layout",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [
                    -360,
                    360
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Orientation",
                "hint": "Orientation of this stimulus (in deg)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "forceEndRoutine": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Force end of Routine",
                "hint": "Should a response force the end of the Routine (e.g end the trial)?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "text": {
                "val": "Click here",
                "valType": "str",
                "inputType": "single",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Button text",
                "hint": "The text to be displayed",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "callback": {
                "val": "",
                "valType": "extendedCode",
                "inputType": "code",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": "python",
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Callback function",
                "hint": "Code to run when button is clicked",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "oncePerClick": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Run once per click",
                "hint": "Should the callback run once per click (True), or each frame until click is released (False)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "borderWidth": {
                "val": 0,
                "valType": "num",
                "inputType": "single",
                "categ": "Appearance",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Border width",
                "hint": "Textbox border width",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "font": {
                "val": "Arvo",
                "valType": "str",
                "inputType": "font",
                "categ": "Formatting",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Font",
                "hint": "The font name (e.g. Comic Sans)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "letterHeight": {
                "val": 0.05,
                "valType": "num",
                "inputType": "single",
                "categ": "Formatting",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Letter height",
                "hint": "Specifies the height of the letter (the width is then determined by the font)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "bold": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Formatting",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Bold",
                "hint": "Should text be bold?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "italic": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Formatting",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Italic",
                "hint": "Should text be italic?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "saveStartStop": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Save onset/offset times",
                "hint": "Store the onset/offset times in the data file (as well as in the log file).",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "syncScreenRefresh": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Sync timing with screen refresh",
                "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "disabled": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Disable Component",
                "hint": "Disable this Component",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "contrast": {
                "val": 1,
                "valType": "num",
                "inputType": "single",
                "categ": "Appearance",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Contrast",
                "hint": "Contrast of the stimulus (1.0=unchanged contrast, 0.5=decrease contrast, 0.0=uniform/no contrast, -0.5=slightly inverted, -1.0=totally inverted)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "validator": {
                "val": "",
                "valType": "code",
                "inputType": "validator",
                "categ": "Testing",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "VisualValidatorRoutine"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Validate with...",
                "hint": "Name of validator Component/Routine to use to check the timing of this stimulus.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "padding": {
                "val": "",
                "valType": "num",
                "inputType": "single",
                "categ": "Layout",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Padding",
                "hint": "Defines the space between text and the textbox border",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "save": {
                "val": "every click",
                "valType": "str",
                "inputType": "choice",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "first click",
                    "last click",
                    "every click",
                    "none"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Record clicks",
                "hint": "What clicks on this button should be saved to the data output?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "timeRelativeTo": {
                "val": "button onset",
                "valType": "str",
                "inputType": "choice",
                "categ": "Data",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [
                    "button onset",
                    "experiment",
                    "routine"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Time relative to",
                "hint": "What should the values of mouse.time should be relative to?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            }
        }
    },
    "ButtonBoxComponent": {
        "__class__": "psychopy.experiment.components.buttonBox:ButtonBoxComponent",
        "__name__": "ButtonBoxComponent",
        "categories": [
            "Responses"
        ],
        "targets": [
            "PsychoPy"
        ],
        "plugin": null,
        "iconSVG": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 32 32\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:space=\"preserve\" xmlns:serif=\"http://www.serif.com/\" style=\"fill-rule:evenodd;clip-rule:evenodd;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:1.5;\">\n    <g id=\"light-components-ButtonBoxComponent\" serif:id=\"light/components/ButtonBoxComponent\" transform=\"matrix(0.451519,0,0,0.451519,0,0)\">\n        <rect x=\"0\" y=\"0\" width=\"70.872\" height=\"70.866\" style=\"fill:none;\"/>\n        <g transform=\"matrix(1.40938,0,0,1.51251,1.61072,0.645319)\">\n            <path d=\"M46,14.331C46,13.183 45.51,12.081 44.639,11.269C43.767,10.456 42.585,10 41.352,10C32.898,10 15.102,10 6.648,10C5.415,10 4.233,10.456 3.361,11.269C2.49,12.081 2,13.183 2,14.331C2,19.141 2,26.859 2,31.669C2,32.817 2.49,33.919 3.361,34.731C4.233,35.544 5.415,36 6.648,36C15.102,36 32.898,36 41.352,36C42.585,36 43.767,35.544 44.639,34.731C45.51,33.919 46,32.817 46,31.669C46,26.859 46,19.141 46,14.331Z\" style=\"fill:none;stroke:var(--outline);stroke-width:3.03px;\"/>\n        </g>\n        <g transform=\"matrix(1.03312,0,0,1.01754,-1.35126,-17.6735)\">\n            <path d=\"M21.683,46.437C21.683,45.871 21.461,45.328 21.067,44.927C20.673,44.527 20.138,44.302 19.58,44.302C17.966,44.302 15.747,44.302 14.133,44.302C13.575,44.302 13.04,44.527 12.646,44.927C12.252,45.328 12.03,45.871 12.03,46.437C12.03,47.56 12.03,48.933 12.03,50.056C12.03,50.622 12.252,51.165 12.646,51.566C13.04,51.966 13.575,52.191 14.133,52.191C15.747,52.191 17.966,52.191 19.58,52.191C20.138,52.191 20.673,51.966 21.067,51.566C21.461,51.165 21.683,50.622 21.683,50.056C21.683,48.933 21.683,47.56 21.683,46.437Z\" style=\"fill:rgb(242,84,91);\"/>\n        </g>\n        <g transform=\"matrix(1.03312,0,0,1.01754,-1.35126,-21.0705)\">\n            <path d=\"M34.171,46.437C34.171,45.871 33.949,45.328 33.555,44.927C33.161,44.527 32.626,44.302 32.068,44.302C30.454,44.302 28.235,44.302 26.621,44.302C26.063,44.302 25.528,44.527 25.134,44.927C24.74,45.328 24.518,45.871 24.518,46.437C24.518,47.56 24.518,48.933 24.518,50.056C24.518,50.622 24.74,51.165 25.134,51.566C25.528,51.966 26.063,52.191 26.621,52.191C28.235,52.191 30.454,52.191 32.068,52.191C32.626,52.191 33.161,51.966 33.555,51.566C33.949,51.165 34.171,50.622 34.171,50.056C34.171,48.933 34.171,47.56 34.171,46.437Z\" style=\"fill:rgb(2,169,234);\"/>\n        </g>\n        <g transform=\"matrix(1.03312,0,0,1.01754,-1.35126,-21.0705)\">\n            <path d=\"M46.659,46.437C46.659,45.871 46.437,45.328 46.043,44.927C45.649,44.527 45.114,44.302 44.556,44.302C42.942,44.302 40.723,44.302 39.109,44.302C38.551,44.302 38.016,44.527 37.622,44.927C37.228,45.328 37.006,45.871 37.006,46.437C37.006,47.56 37.006,48.933 37.006,50.056C37.006,50.622 37.228,51.165 37.622,51.566C38.016,51.966 38.551,52.191 39.109,52.191C40.723,52.191 42.942,52.191 44.556,52.191C45.114,52.191 45.649,51.966 46.043,51.566C46.437,51.165 46.659,50.622 46.659,50.056C46.659,48.933 46.659,47.56 46.659,46.437Z\" style=\"fill:rgb(242,84,91);\"/>\n        </g>\n        <g transform=\"matrix(1.03312,0,0,1.01754,-1.35126,-17.6735)\">\n            <path d=\"M59.147,46.437C59.147,45.871 58.925,45.328 58.531,44.927C58.137,44.527 57.602,44.302 57.044,44.302C55.43,44.302 53.211,44.302 51.597,44.302C51.039,44.302 50.504,44.527 50.11,44.927C49.716,45.328 49.494,45.871 49.494,46.437C49.494,47.56 49.494,48.933 49.494,50.056C49.494,50.622 49.716,51.165 50.11,51.566C50.504,51.966 51.039,52.191 51.597,52.191C53.211,52.191 55.43,52.191 57.044,52.191C57.602,52.191 58.137,51.966 58.531,51.566C58.925,51.165 59.147,50.622 59.147,50.056C59.147,48.933 59.147,47.56 59.147,46.437Z\" style=\"fill:rgb(2,169,234);\"/>\n        </g>\n    </g>\n</svg>\n",
        "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\buttonBox\\buttonBox.png",
        "tooltip": "Button Box: Get input from a button box",
        "version": "0.0.0",
        "beta": true,
        "validatorClasses": [],
        "hidden": false,
        "params": {
            "name": {
                "val": "buttonBox",
                "valType": "code",
                "inputType": "name",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Name",
                "hint": "Name of this Component (alphanumeric or _, no spaces)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startVal": {
                "val": 0.0,
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Start",
                "hint": "When does the Component start?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startEstim": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Expected start (s)",
                "hint": "(Optional) expected start (s), purely for representing in the timeline",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startType": {
                "val": "time (s)",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "time (s)",
                    "frame N",
                    "condition"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Start type",
                "hint": "How do you want to define your start point?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "stopVal": {
                "val": 1.0,
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": [],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop",
                "hint": "When does the Component end? (blank is endless)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "durationEstim": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Expected duration (s)",
                "hint": "(Optional) expected duration (s), purely for representing in the timeline",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "stopType": {
                "val": "duration (s)",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "duration (s)",
                    "duration (frames)",
                    "time (s)",
                    "frame N",
                    "condition"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop type",
                "hint": "How do you want to define your end point?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "deviceLabel": {
                "val": "",
                "valType": "device",
                "inputType": "device",
                "categ": "Device",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "python:///psychopy.experiment.components.buttonBox:KeyboardButtonBoxDeviceBackend"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Device",
                "hint": "The named device from Device Manager to use for this Component.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "forceEndRoutine": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Force end of Routine",
                "hint": "Should a response force the end of the Routine (e.g end the trial)?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "registerOn": {
                "val": true,
                "valType": "code",
                "inputType": "choice",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    true,
                    false
                ],
                "allowedLabels": [
                    "Press",
                    "Release"
                ],
                "ctrlParams": {},
                "label": "Register button press on...",
                "hint": "When should the button press be registered? As soon as pressed, or when released?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "store": {
                "val": "first",
                "valType": "str",
                "inputType": "choice",
                "categ": "Data",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [
                    "last",
                    "first",
                    "all",
                    "nothing"
                ],
                "allowedLabels": [
                    "Last button",
                    "First button",
                    "All buttons",
                    "Nothing"
                ],
                "ctrlParams": {},
                "label": "Store",
                "hint": "Choose which (if any) responses to store at the end of a trial",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "allowedButtons": {
                "val": "",
                "valType": "list",
                "inputType": "single",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Allowed buttons",
                "hint": "A comma-separated list of button indices (should be whole numbers), leave blank to listen for all buttons.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "storeCorrect": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Store correct",
                "hint": "Do you want to save the response as correct/incorrect?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "correctAns": {
                "val": "",
                "valType": "list",
                "inputType": "single",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Correct answer",
                "hint": "What is the 'correct' key? Might be helpful to add a correctAns column and use $correctAns to compare to the key press. ",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "storeCorrect",
                            "condition": "== True"
                        }
                    ],
                    "enabled": []
                }
            },
            "discardPrevious": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Discard previous",
                "hint": "Do you want to discard all responses occurring before the onset of this Component?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "saveStartStop": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Save onset/offset times",
                "hint": "Store the onset/offset times in the data file (as well as in the log file).",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "syncScreenRefresh": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Sync timing with screen refresh",
                "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "disabled": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Disable Component",
                "hint": "Disable this Component",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            }
        }
    },
    "CameraComponent": {
        "__class__": "psychopy.experiment.components.camera:CameraComponent",
        "__name__": "CameraComponent",
        "categories": [
            "Responses"
        ],
        "targets": [
            "PsychoPy",
            "PsychoJS"
        ],
        "plugin": null,
        "iconSVG": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 32 32\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:space=\"preserve\" xmlns:serif=\"http://www.serif.com/\" style=\"fill-rule:evenodd;clip-rule:evenodd;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:1.5;\">\n    <g id=\"light-components-CameraComponent\" serif:id=\"light/components/CameraComponent\" transform=\"matrix(0.451519,0,0,0.451519,0,0)\">\n        <rect x=\"0\" y=\"0\" width=\"70.872\" height=\"70.866\" style=\"fill:none;\"/>\n        <g id=\"Camera-Component\" serif:id=\"Camera Component\" transform=\"matrix(1.00377,0,0,1.00377,-0.13351,4.12687)\">\n            <g transform=\"matrix(1,0,0,1,-558.116,-322.897)\">\n                <path d=\"M587.546,364.33C587.399,364.497 587.29,364.681 587.228,364.886C586.907,365.94 585.475,367.758 583.032,368.234C579.912,368.841 580.463,372.256 581.828,374.248C583.192,376.24 586.144,377.515 589.39,377.515L597.782,377.515C601.029,377.515 603.98,376.24 605.345,374.248C606.71,372.256 607.06,369.196 604.141,368.234C602.697,367.758 600.266,365.94 599.945,364.886C599.883,364.681 599.774,364.497 599.627,364.33L609.813,364.33C614.278,364.33 618.56,362.557 621.718,359.399C624.875,356.242 626.649,351.96 626.649,347.494L626.649,347.493C626.649,343.028 624.875,338.746 621.718,335.588C618.56,332.431 614.278,330.657 609.813,330.657C600.367,330.657 586.737,330.657 577.292,330.657C572.826,330.657 568.544,332.431 565.387,335.588C562.229,338.746 560.456,343.028 560.456,347.493C560.456,347.494 560.456,347.494 560.456,347.494C560.456,351.96 562.229,356.242 565.387,359.399C568.544,362.557 572.826,364.33 577.292,364.33L587.546,364.33ZM620.649,347.493C620.649,344.619 619.507,341.863 617.475,339.831C615.443,337.799 612.687,336.657 609.813,336.657C600.367,336.657 586.737,336.657 577.292,336.657C574.418,336.657 571.662,337.799 569.629,339.831C567.597,341.863 566.456,344.619 566.456,347.493C566.456,347.494 566.456,347.494 566.456,347.494C566.456,350.368 567.597,353.124 569.629,355.157C571.662,357.189 574.418,358.33 577.292,358.33C586.737,358.33 600.367,358.33 609.813,358.33C612.687,358.33 615.443,357.189 617.475,355.157C619.507,353.124 620.649,350.368 620.649,347.494C620.649,347.494 620.649,347.494 620.649,347.493Z\" style=\"fill:var(--outline);\"/>\n            </g>\n            <g transform=\"matrix(1,0,0,1,-553.878,-324.599)\">\n                <circle cx=\"576.5\" cy=\"342.5\" r=\"2.5\" style=\"fill:rgb(242,84,91);\"/>\n            </g>\n            <g transform=\"matrix(1.0341,0,0,1.0341,-571.112,-326.293)\">\n                <circle cx=\"586.549\" cy=\"339.32\" r=\"7.004\" style=\"fill:none;stroke:rgb(37,169,234);stroke-width:2.95px;\"/>\n            </g>\n            <g transform=\"matrix(0.599008,0,0,0.599008,-315.911,-178.659)\">\n                <path d=\"M586.549,332.316C590.414,332.316 593.552,335.455 593.552,339.32C593.552,343.185 590.414,346.323 586.549,346.323C582.683,346.323 579.545,343.185 579.545,339.32C579.545,335.455 582.683,332.316 586.549,332.316ZM586.549,335.655C584.526,335.655 582.884,337.297 582.884,339.32C582.884,341.342 584.526,342.984 586.549,342.984C588.571,342.984 590.213,341.342 590.213,339.32C590.213,337.297 588.571,335.655 586.549,335.655Z\" style=\"fill:var(--outline);\"/>\n            </g>\n        </g>\n    </g>\n</svg>\n",
        "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\camera\\webcam.png",
        "tooltip": "Webcam: Record video from a webcam.",
        "version": "2022.2.0",
        "beta": false,
        "validatorClasses": [],
        "hidden": false,
        "params": {
            "name": {
                "val": "cam",
                "valType": "code",
                "inputType": "name",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Name",
                "hint": "Name of this Component (alphanumeric or _, no spaces)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startVal": {
                "val": "0",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Start",
                "hint": "When does the Component start?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startEstim": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Expected start (s)",
                "hint": "(Optional) expected start (s), purely for representing in the timeline",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startType": {
                "val": "time (s)",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "time (s)",
                    "frame N",
                    "condition"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Start type",
                "hint": "How do you want to define your start point?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "stopVal": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": [],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop",
                "hint": "When does the Component end? (blank is endless)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "durationEstim": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Expected duration (s)",
                "hint": "(Optional) expected duration (s), purely for representing in the timeline",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "stopType": {
                "val": "duration (s)",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "duration (s)",
                    "duration (frames)",
                    "time (s)",
                    "frame N",
                    "condition"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop type",
                "hint": "How do you want to define your end point?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "deviceLabel": {
                "val": "",
                "valType": "device",
                "inputType": "device",
                "categ": "Device",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "python:///psychopy.experiment.components.camera:CameraDeviceBackend"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Device",
                "hint": "The named device from Device Manager to use for this Component.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "saveStartStop": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Save onset/offset times",
                "hint": "Store the onset/offset times in the data file (as well as in the log file).",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "syncScreenRefresh": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Sync timing with screen refresh",
                "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "disabled": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Disable Component",
                "hint": "Disable this Component",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "micDeviceLabel": {
                "val": "",
                "valType": "device",
                "inputType": "device",
                "categ": "Device",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "python:///psychopy.experiment.components.microphone:MicrophoneDeviceBackend"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Microphone device",
                "hint": "The named device from Device Manager to use for this Component.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "saveFile": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Save file?",
                "hint": "Save webcam output to a file?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            }
        }
    },
    "CodeComponent": {
        "__class__": "psychopy.experiment.components.code:CodeComponent",
        "__name__": "CodeComponent",
        "categories": [
            "Custom"
        ],
        "targets": [
            "PsychoPy",
            "PsychoJS"
        ],
        "plugin": null,
        "iconSVG": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 32 32\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:space=\"preserve\" xmlns:serif=\"http://www.serif.com/\" style=\"fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2;\">\n    <g id=\"light-components-CodeComponent\" serif:id=\"light/components/CodeComponent\" transform=\"matrix(0.451519,0,0,0.451519,0,0)\">\n        <rect x=\"0\" y=\"0\" width=\"70.872\" height=\"70.866\" style=\"fill:none;\"/>\n        <g id=\"Code-Component\" serif:id=\"Code Component\" transform=\"matrix(1.24973,0,0,1.24973,-8.87028,-9.93001)\">\n            <path d=\"M10.642,34.042L23.914,29.225L23.914,33.725L16.039,36.081L23.914,38.612L23.914,43.007L10.642,37.962L10.642,34.042Z\" style=\"fill:rgb(242,84,91);fill-rule:nonzero;\"/>\n            <path d=\"M25.466,21.561L29.614,21.561L39.651,51.04L35.397,51.04L25.466,21.561Z\" style=\"fill:var(--outline);fill-rule:nonzero;\"/>\n            <path d=\"M60.263,37.962L46.974,43.007L46.974,38.612L54.849,36.081L46.974,33.725L46.974,29.225L60.263,34.042L60.263,37.962Z\" style=\"fill:rgb(242,84,91);fill-rule:nonzero;\"/>\n        </g>\n    </g>\n</svg>\n",
        "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\code\\code.png",
        "tooltip": "Code: insert python commands into an experiment",
        "version": "0.0.0",
        "beta": false,
        "validatorClasses": [],
        "hidden": false,
        "params": {
            "name": {
                "val": "code",
                "valType": "code",
                "inputType": "name",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Name",
                "hint": "Name of this Component (alphanumeric or _, no spaces)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "Code Type": {
                "val": "Auto->JS",
                "valType": "str",
                "inputType": "choice",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "Py",
                    "JS",
                    "Both",
                    "Auto->JS"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Code type",
                "hint": "Display Python or JS Code",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "disabled": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Disable Component",
                "hint": "Disable this Component",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "Before Experiment": {
                "val": "",
                "valType": "extendedCode",
                "inputType": "code",
                "categ": "Before Exp.",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": "python",
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Before experiment (Py)",
                "hint": "Code to run before the experiment starts (initialization); right-click checks syntax",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "Code Type",
                            "condition": "in ['Py', 'Both', 'Auto->JS']"
                        }
                    ],
                    "enabled": []
                }
            },
            "Begin Experiment": {
                "val": "",
                "valType": "extendedCode",
                "inputType": "code",
                "categ": "Begin Exp.",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": "python",
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Begin experiment (Py)",
                "hint": "Code at the start of the experiment ; right-click checks syntax",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "Code Type",
                            "condition": "in ['Py', 'Both', 'Auto->JS']"
                        }
                    ],
                    "enabled": []
                }
            },
            "Begin Routine": {
                "val": "",
                "valType": "extendedCode",
                "inputType": "code",
                "categ": "Begin Routine",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": "python",
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Begin Routine (Py)",
                "hint": "Code to be run at the start of each repeat of the Routine (e.g. each trial); right-click checks syntax",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "Code Type",
                            "condition": "in ['Py', 'Both', 'Auto->JS']"
                        }
                    ],
                    "enabled": []
                }
            },
            "Each Frame": {
                "val": "",
                "valType": "extendedCode",
                "inputType": "code",
                "categ": "Each Frame",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": "python",
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Each frame (Py)",
                "hint": "Code to be run on every video frame during for the duration of this Routine; right-click checks syntax",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "Code Type",
                            "condition": "in ['Py', 'Both', 'Auto->JS']"
                        }
                    ],
                    "enabled": []
                }
            },
            "End Routine": {
                "val": "",
                "valType": "extendedCode",
                "inputType": "code",
                "categ": "End Routine",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": "python",
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "End Routine (Py)",
                "hint": "Code at the end of this repeat of the Routine (e.g. getting/storing responses); right-click checks syntax",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "Code Type",
                            "condition": "in ['Py', 'Both', 'Auto->JS']"
                        }
                    ],
                    "enabled": []
                }
            },
            "End Experiment": {
                "val": "",
                "valType": "extendedCode",
                "inputType": "code",
                "categ": "End Exp.",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": "python",
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "End experiment (Py)",
                "hint": "Code at the end of the entire experiment (e.g. saving files, resetting computer); right-click checks syntax",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "Code Type",
                            "condition": "in ['Py', 'Both', 'Auto->JS']"
                        }
                    ],
                    "enabled": []
                }
            },
            "Before JS Experiment": {
                "val": "",
                "valType": "extendedCode",
                "inputType": "code",
                "categ": "Before Exp.",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": "javascript",
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Before experiment (JS)",
                "hint": "Code before the start of the experiment (initialization); right-click checks syntax",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "Code Type",
                            "condition": "in ['JS', 'Both', 'Auto->JS']"
                        }
                    ],
                    "enabled": [
                        {
                            "param": "Code Type",
                            "condition": "in ['JS', 'Both']"
                        }
                    ]
                }
            },
            "Begin JS Experiment": {
                "val": "",
                "valType": "extendedCode",
                "inputType": "code",
                "categ": "Begin Exp.",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": "javascript",
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Begin experiment (JS)",
                "hint": "Code at the start of the experiment (initialization); right-click checks syntax",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "Code Type",
                            "condition": "in ['JS', 'Both', 'Auto->JS']"
                        }
                    ],
                    "enabled": [
                        {
                            "param": "Code Type",
                            "condition": "in ['JS', 'Both']"
                        }
                    ]
                }
            },
            "Begin JS Routine": {
                "val": "",
                "valType": "extendedCode",
                "inputType": "code",
                "categ": "Begin Routine",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": "javascript",
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Begin Routine (JS)",
                "hint": "Code to be run at the start of each repeat of the Routine (e.g. each trial); right-click checks syntax",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "Code Type",
                            "condition": "in ['JS', 'Both', 'Auto->JS']"
                        }
                    ],
                    "enabled": [
                        {
                            "param": "Code Type",
                            "condition": "in ['JS', 'Both']"
                        }
                    ]
                }
            },
            "Each JS Frame": {
                "val": "",
                "valType": "extendedCode",
                "inputType": "code",
                "categ": "Each Frame",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": "javascript",
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Each JS frame",
                "hint": "Code to be run on every video frame during for the duration of this Routine; right-click checks syntax",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "Code Type",
                            "condition": "in ['JS', 'Both', 'Auto->JS']"
                        }
                    ],
                    "enabled": [
                        {
                            "param": "Code Type",
                            "condition": "in ['JS', 'Both']"
                        }
                    ]
                }
            },
            "End JS Routine": {
                "val": "",
                "valType": "extendedCode",
                "inputType": "code",
                "categ": "End Routine",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": "javascript",
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "End Routine (JS)",
                "hint": "Code at the end of this repeat of the Routine (e.g. getting/storing responses); right-click checks syntax",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "Code Type",
                            "condition": "in ['JS', 'Both', 'Auto->JS']"
                        }
                    ],
                    "enabled": [
                        {
                            "param": "Code Type",
                            "condition": "in ['JS', 'Both']"
                        }
                    ]
                }
            },
            "End JS Experiment": {
                "val": "",
                "valType": "extendedCode",
                "inputType": "code",
                "categ": "End Exp.",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": "javascript",
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "End experiment (JS)",
                "hint": "Code at the end of the entire experiment (e.g. saving files, resetting computer); right-click checks syntax",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "Code Type",
                            "condition": "in ['JS', 'Both', 'Auto->JS']"
                        }
                    ],
                    "enabled": [
                        {
                            "param": "Code Type",
                            "condition": "in ['JS', 'Both']"
                        }
                    ]
                }
            }
        }
    },
    "DotsComponent": {
        "__class__": "psychopy.experiment.components.dots:DotsComponent",
        "__name__": "DotsComponent",
        "categories": [
            "Stimuli"
        ],
        "targets": [
            "PsychoPy"
        ],
        "plugin": null,
        "iconSVG": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 32 32\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:space=\"preserve\" xmlns:serif=\"http://www.serif.com/\" style=\"fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2;\">\n    <g id=\"light-components-DotsComponent\" serif:id=\"light/components/DotsComponent\" transform=\"matrix(0.451519,0,0,0.451519,0,0)\">\n        <rect x=\"0\" y=\"0\" width=\"70.872\" height=\"70.866\" style=\"fill:none;\"/>\n        <g id=\"Dots-Component\" serif:id=\"Dots Component\" transform=\"matrix(1.48221,0,0,1.48221,-18.4067,-18.9733)\">\n            <g opacity=\"0.8\">\n                <g id=\"Dot8\">\n                    <g transform=\"matrix(-1,-6.12323e-17,-6.12323e-17,1,24.3443,30.7793)\">\n                        <path d=\"M-2.727,-2.727C-4.233,-2.727 -5.454,-1.506 -5.454,0C-5.454,1.506 -4.233,2.727 -2.727,2.727C-1.221,2.727 0,1.506 0,0C0,-1.506 -1.221,-2.727 -2.727,-2.727\" style=\"fill:rgb(242,84,91);fill-opacity:0.4;fill-rule:nonzero;\"/>\n                    </g>\n                    <g transform=\"matrix(0,-1,-1,0,25.7647,29.5399)\">\n                        <path d=\"M-2.968,-2.968C-4.607,-2.968 -5.936,-1.639 -5.936,-0C-5.936,1.639 -4.607,2.968 -2.968,2.968C-1.329,2.968 -0,1.639 -0,-0C-0,-1.639 -1.329,-2.968 -2.968,-2.968\" style=\"fill:rgb(242,84,91);fill-opacity:0.6;fill-rule:nonzero;\"/>\n                    </g>\n                    <g transform=\"matrix(-1,-5.55112e-17,-5.55112e-17,1,21.6499,32.9627)\">\n                        <path d=\"M-2.809,-1.811C-4.512,-1.811 -5.893,-0.43 -5.893,1.274C-5.893,2.977 -4.512,4.358 -2.809,4.358C-1.105,4.357 0.275,2.977 0.276,1.273C0.275,-0.43 -1.106,-1.811 -2.809,-1.811\" style=\"fill:rgb(242,84,91);fill-opacity:0.8;fill-rule:nonzero;\"/>\n                    </g>\n                    <g transform=\"matrix(-1,-6.12323e-17,-6.12323e-17,1,18.9706,36.6428)\">\n                        <path d=\"M-3.669,-3.669C-5.695,-3.669 -7.338,-2.026 -7.338,0C-7.338,2.026 -5.695,3.669 -3.669,3.669C-1.643,3.669 0,2.026 0,0C0,-2.026 -1.643,-3.669 -3.669,-3.669\" style=\"fill:rgb(242,84,91);fill-rule:nonzero;\"/>\n                    </g>\n                </g>\n                <g id=\"Dot7\">\n                    <g transform=\"matrix(-1,5.55112e-17,5.55112e-17,1,37.4953,47.6466)\">\n                        <path d=\"M1.791,-0.671C0.286,-0.671 -0.936,0.55 -0.935,2.056C-0.936,3.562 0.285,4.783 1.791,4.783C3.297,4.783 4.518,3.562 4.518,2.056C4.518,0.55 3.297,-0.671 1.791,-0.671\" style=\"fill:rgb(2,169,234);fill-opacity:0.4;fill-rule:nonzero;\"/>\n                    </g>\n                    <g transform=\"matrix(-1,-1.11022e-16,-1.11022e-16,1,37.2076,45.3447)\">\n                        <path d=\"M1.949,-0.73C0.31,-0.73 -1.018,0.598 -1.018,2.238C-1.018,3.877 0.311,5.206 1.949,5.205C3.589,5.205 4.917,3.877 4.917,2.237C4.917,0.598 3.589,-0.73 1.949,-0.73\" style=\"fill:rgb(2,169,234);fill-opacity:0.6;fill-rule:nonzero;\"/>\n                    </g>\n                    <g transform=\"matrix(-1,1.66533e-16,1.66533e-16,1,37.6194,44.1812)\">\n                        <path d=\"M2.806,-1.804C1.103,-1.803 -0.278,-0.423 -0.279,1.281C-0.278,2.984 1.103,4.365 2.806,4.365C4.509,4.365 5.89,2.984 5.891,1.281C5.89,-0.423 4.509,-1.804 2.806,-1.804\" style=\"fill:rgb(2,169,234);fill-opacity:0.8;fill-rule:nonzero;\"/>\n                    </g>\n                    <g transform=\"matrix(-1,5.55112e-17,5.55112e-17,1,36.6045,39.7434)\">\n                        <path d=\"M2.411,-0.903C0.384,-0.903 -1.258,0.74 -1.259,2.766C-1.259,4.792 0.384,6.435 2.411,6.435C4.437,6.436 6.079,4.793 6.08,2.767C6.08,0.74 4.437,-0.902 2.411,-0.903\" style=\"fill:rgb(2,169,234);fill-rule:nonzero;\"/>\n                    </g>\n                </g>\n                <g id=\"Dot6\">\n                    <g transform=\"matrix(-1,1.11022e-16,1.11022e-16,1,48.8843,31.285)\">\n                        <path d=\"M-1.609,-0.525C-3.116,-0.525 -4.336,0.696 -4.336,2.202C-4.335,3.708 -3.114,4.928 -1.609,4.928C-0.103,4.928 1.118,3.707 1.118,2.201C1.118,0.695 -0.103,-0.526 -1.609,-0.525\" style=\"fill:rgb(2,169,234);fill-opacity:0.4;fill-rule:nonzero;\"/>\n                    </g>\n                    <g transform=\"matrix(-1,0,0,1,46.5751,31.0564)\">\n                        <path d=\"M-1.752,-0.572C-3.391,-0.572 -4.72,0.757 -4.719,2.396C-4.72,4.035 -3.391,5.363 -1.752,5.363C-0.112,5.364 1.216,4.034 1.216,2.396C1.216,0.756 -0.113,-0.572 -1.752,-0.572\" style=\"fill:rgb(2,169,234);fill-opacity:0.6;fill-rule:nonzero;\"/>\n                    </g>\n                    <g transform=\"matrix(-1,-2.77556e-17,-2.77556e-17,1,45.5312,30.3986)\">\n                        <path d=\"M-0.63,-0.065C-2.332,-0.065 -3.714,1.316 -3.714,3.019C-3.714,4.722 -2.333,6.104 -0.63,6.103C1.073,6.103 2.455,4.722 2.455,3.019C2.454,1.316 1.073,-0.065 -0.63,-0.065\" style=\"fill:rgb(2,169,234);fill-opacity:0.8;fill-rule:nonzero;\"/>\n                    </g>\n                    <g transform=\"matrix(-1,1.66533e-16,1.66533e-16,1,40.9783,30.4072)\">\n                        <path d=\"M-2.165,-0.707C-4.192,-0.707 -5.834,0.936 -5.835,2.961C-5.835,4.988 -4.192,6.631 -2.166,6.631C-0.139,6.631 1.503,4.988 1.503,2.962C1.504,0.936 -0.139,-0.707 -2.165,-0.707\" style=\"fill:rgb(2,169,234);fill-rule:nonzero;\"/>\n                    </g>\n                </g>\n                <g id=\"Dot5\">\n                    <g transform=\"matrix(-1,2.22045e-16,2.22045e-16,1,37.4033,22.5644)\">\n                        <path d=\"M2.762,-1.884C1.123,-1.884 -0.206,-0.555 -0.206,1.084C-0.205,2.723 1.124,4.052 2.762,4.052C4.401,4.052 5.73,2.723 5.73,1.084C5.731,-0.555 4.402,-1.884 2.762,-1.884\" style=\"fill:rgb(2,169,234);fill-opacity:0.6;fill-rule:nonzero;\"/>\n                    </g>\n                    <g transform=\"matrix(-1,0,0,1,36.5946,24.7396)\">\n                        <path d=\"M2.538,-1.731C1.032,-1.731 -0.188,-0.51 -0.188,0.996C-0.188,2.502 1.032,3.723 2.538,3.723C4.044,3.723 5.265,2.501 5.265,0.995C5.265,-0.511 4.044,-1.731 2.538,-1.731\" style=\"fill:rgb(2,169,234);fill-opacity:0.4;fill-rule:nonzero;\"/>\n                    </g>\n                    <g transform=\"matrix(-1,1.94289e-16,1.94289e-16,1,38.3059,21.7224)\">\n                        <path d=\"M3.08,-3.244C1.377,-3.245 -0.004,-1.863 -0.004,-0.16C-0.005,1.543 1.377,2.924 3.08,2.924C4.783,2.925 6.164,1.543 6.164,-0.16C6.165,-1.863 4.783,-3.244 3.08,-3.244\" style=\"fill:rgb(2,169,234);fill-opacity:0.8;fill-rule:nonzero;\"/>\n                    </g>\n                    <g transform=\"matrix(-1,1.66533e-16,1.66533e-16,1,39.4559,17.3181)\">\n                        <path d=\"M3.416,-2.329C1.39,-2.329 -0.254,-0.686 -0.254,1.341C-0.254,3.367 1.39,5.009 3.416,5.009C5.442,5.009 7.085,3.366 7.085,1.34C7.085,-0.687 5.441,-2.329 3.416,-2.329\" style=\"fill:rgb(2,169,234);fill-rule:nonzero;\"/>\n                    </g>\n                </g>\n                <g id=\"Dot4\">\n                    <g transform=\"matrix(-1,0,0,1,55.624,23.5338)\">\n                        <path d=\"M2.538,-1.731C1.032,-1.731 -0.188,-0.51 -0.188,0.996C-0.188,2.502 1.032,3.723 2.538,3.723C4.044,3.723 5.265,2.501 5.265,0.995C5.265,-0.511 4.044,-1.731 2.538,-1.731\" style=\"fill:rgb(2,169,234);fill-opacity:0.4;fill-rule:nonzero;\"/>\n                    </g>\n                    <g transform=\"matrix(-1,2.22045e-16,2.22045e-16,1,56.4327,21.3586)\">\n                        <path d=\"M2.762,-1.884C1.123,-1.884 -0.206,-0.555 -0.206,1.084C-0.205,2.723 1.124,4.052 2.762,4.052C4.401,4.052 5.73,2.723 5.73,1.084C5.731,-0.555 4.402,-1.884 2.762,-1.884\" style=\"fill:rgb(2,169,234);fill-opacity:0.6;fill-rule:nonzero;\"/>\n                    </g>\n                    <g transform=\"matrix(-1,1.94289e-16,1.94289e-16,1,57.3353,20.5167)\">\n                        <path d=\"M3.08,-3.244C1.377,-3.245 -0.004,-1.863 -0.004,-0.16C-0.005,1.543 1.377,2.924 3.08,2.924C4.783,2.925 6.164,1.543 6.164,-0.16C6.165,-1.863 4.783,-3.244 3.08,-3.244\" style=\"fill:rgb(2,169,234);fill-opacity:0.8;fill-rule:nonzero;\"/>\n                    </g>\n                    <g transform=\"matrix(-1,1.66533e-16,1.66533e-16,1,58.4853,16.1123)\">\n                        <path d=\"M3.416,-2.329C1.39,-2.329 -0.254,-0.686 -0.254,1.341C-0.254,3.367 1.39,5.009 3.416,5.009C5.442,5.009 7.085,3.366 7.085,1.34C7.085,-0.687 5.441,-2.329 3.416,-2.329\" style=\"fill:rgb(2,169,234);fill-rule:nonzero;\"/>\n                    </g>\n                </g>\n                <g id=\"Dot3\">\n                    <g transform=\"matrix(-1,0,0,1,50.4284,55.9065)\">\n                        <path d=\"M2.538,-1.731C1.032,-1.731 -0.188,-0.51 -0.188,0.996C-0.188,2.502 1.032,3.723 2.538,3.723C4.044,3.723 5.265,2.501 5.265,0.995C5.265,-0.511 4.044,-1.731 2.538,-1.731\" style=\"fill:rgb(2,169,234);fill-opacity:0.4;fill-rule:nonzero;\"/>\n                    </g>\n                    <g transform=\"matrix(-1,2.22045e-16,2.22045e-16,1,51.2371,53.7313)\">\n                        <path d=\"M2.762,-1.884C1.123,-1.884 -0.206,-0.555 -0.206,1.084C-0.205,2.723 1.124,4.052 2.762,4.052C4.401,4.052 5.73,2.723 5.73,1.084C5.731,-0.555 4.402,-1.884 2.762,-1.884\" style=\"fill:rgb(2,169,234);fill-opacity:0.6;fill-rule:nonzero;\"/>\n                    </g>\n                    <g transform=\"matrix(-1,1.94289e-16,1.94289e-16,1,52.1396,52.8894)\">\n                        <path d=\"M3.08,-3.244C1.377,-3.245 -0.004,-1.863 -0.004,-0.16C-0.005,1.543 1.377,2.924 3.08,2.924C4.783,2.925 6.164,1.543 6.164,-0.16C6.165,-1.863 4.783,-3.244 3.08,-3.244\" style=\"fill:rgb(2,169,234);fill-opacity:0.8;fill-rule:nonzero;\"/>\n                    </g>\n                    <g transform=\"matrix(-1,1.66533e-16,1.66533e-16,1,53.2897,48.485)\">\n                        <path d=\"M3.416,-2.329C1.39,-2.329 -0.254,-0.686 -0.254,1.341C-0.254,3.367 1.39,5.009 3.416,5.009C5.442,5.009 7.085,3.366 7.085,1.34C7.085,-0.687 5.441,-2.329 3.416,-2.329\" style=\"fill:rgb(2,169,234);fill-rule:nonzero;\"/>\n                    </g>\n                </g>\n                <g id=\"Dot2\">\n                    <g transform=\"matrix(-1,1.11022e-16,1.11022e-16,1,23.3216,17.7062)\">\n                        <path d=\"M-1.609,-0.525C-3.116,-0.525 -4.336,0.696 -4.336,2.202C-4.335,3.708 -3.114,4.928 -1.609,4.928C-0.103,4.928 1.118,3.707 1.118,2.201C1.118,0.695 -0.103,-0.526 -1.609,-0.525\" style=\"fill:rgb(2,169,234);fill-opacity:0.4;fill-rule:nonzero;\"/>\n                    </g>\n                    <g transform=\"matrix(-1,-4.44089e-16,-4.44089e-16,1,21.0124,17.4776)\">\n                        <path d=\"M-1.752,-0.572C-3.391,-0.572 -4.72,0.757 -4.719,2.396C-4.72,4.035 -3.391,5.363 -1.752,5.363C-0.112,5.364 1.216,4.034 1.216,2.396C1.216,0.756 -0.113,-0.572 -1.752,-0.572\" style=\"fill:rgb(2,169,234);fill-opacity:0.6;fill-rule:nonzero;\"/>\n                    </g>\n                    <g transform=\"matrix(-1,-2.77556e-17,-2.77556e-17,1,19.9685,16.8198)\">\n                        <path d=\"M-0.63,-0.065C-2.332,-0.065 -3.714,1.316 -3.714,3.019C-3.714,4.722 -2.333,6.104 -0.63,6.103C1.073,6.103 2.455,4.722 2.455,3.019C2.454,1.316 1.073,-0.065 -0.63,-0.065\" style=\"fill:rgb(2,169,234);fill-opacity:0.8;fill-rule:nonzero;\"/>\n                    </g>\n                    <g transform=\"matrix(-1,1.66533e-16,1.66533e-16,1,15.4156,16.8285)\">\n                        <path d=\"M-2.165,-0.707C-4.192,-0.707 -5.834,0.936 -5.835,2.961C-5.835,4.988 -4.192,6.631 -2.166,6.631C-0.139,6.631 1.503,4.988 1.503,2.962C1.504,0.936 -0.139,-0.707 -2.165,-0.707\" style=\"fill:rgb(2,169,234);fill-rule:nonzero;\"/>\n                    </g>\n                </g>\n                <g id=\"Dot1\">\n                    <g transform=\"matrix(-1,1.11022e-16,1.11022e-16,1,23.8368,48.4498)\">\n                        <path d=\"M-1.609,-0.525C-3.116,-0.525 -4.336,0.696 -4.336,2.202C-4.335,3.708 -3.114,4.928 -1.609,4.928C-0.103,4.928 1.118,3.707 1.118,2.201C1.118,0.695 -0.103,-0.526 -1.609,-0.525\" style=\"fill:rgb(2,169,234);fill-opacity:0.4;fill-rule:nonzero;\"/>\n                    </g>\n                    <g transform=\"matrix(-1,-4.44089e-16,-4.44089e-16,1,21.5276,48.2212)\">\n                        <path d=\"M-1.752,-0.572C-3.391,-0.572 -4.72,0.757 -4.719,2.396C-4.72,4.035 -3.391,5.363 -1.752,5.363C-0.112,5.364 1.216,4.034 1.216,2.396C1.216,0.756 -0.113,-0.572 -1.752,-0.572\" style=\"fill:rgb(2,169,234);fill-opacity:0.6;fill-rule:nonzero;\"/>\n                    </g>\n                    <g transform=\"matrix(-1,-2.77556e-17,-2.77556e-17,1,20.4837,47.5634)\">\n                        <path d=\"M-0.63,-0.065C-2.332,-0.065 -3.714,1.316 -3.714,3.019C-3.714,4.722 -2.333,6.104 -0.63,6.103C1.073,6.103 2.455,4.722 2.455,3.019C2.454,1.316 1.073,-0.065 -0.63,-0.065\" style=\"fill:rgb(2,169,234);fill-opacity:0.8;fill-rule:nonzero;\"/>\n                    </g>\n                    <g transform=\"matrix(-1,1.66533e-16,1.66533e-16,1,15.9308,47.572)\">\n                        <path d=\"M-2.165,-0.707C-4.192,-0.707 -5.834,0.936 -5.835,2.961C-5.835,4.988 -4.192,6.631 -2.166,6.631C-0.139,6.631 1.503,4.988 1.503,2.962C1.504,0.936 -0.139,-0.707 -2.165,-0.707\" style=\"fill:rgb(2,169,234);fill-rule:nonzero;\"/>\n                    </g>\n                </g>\n            </g>\n        </g>\n    </g>\n</svg>\n",
        "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\dots\\dots.png",
        "tooltip": "Dots: Random Dot Kinematogram",
        "version": "0.0.0",
        "beta": false,
        "validatorClasses": [
            "VisualValidatorRoutine"
        ],
        "hidden": false,
        "params": {
            "name": {
                "val": "dots",
                "valType": "code",
                "inputType": "name",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Name",
                "hint": "Name of this Component (alphanumeric or _, no spaces)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startVal": {
                "val": 0.0,
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Start",
                "hint": "When does the Component start?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startEstim": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Expected start (s)",
                "hint": "(Optional) expected start (s), purely for representing in the timeline",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startType": {
                "val": "time (s)",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "time (s)",
                    "frame N",
                    "condition"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Start type",
                "hint": "How do you want to define your start point?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "stopVal": {
                "val": 1.0,
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": [],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop",
                "hint": "When does the Component end? (blank is endless)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "durationEstim": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Expected duration (s)",
                "hint": "(Optional) expected duration (s), purely for representing in the timeline",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "stopType": {
                "val": "duration (s)",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "duration (s)",
                    "duration (frames)",
                    "time (s)",
                    "frame N",
                    "condition"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop type",
                "hint": "How do you want to define your end point?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "color": {
                "val": "$[1.0,1.0,1.0]",
                "valType": "color",
                "inputType": "color",
                "categ": "Appearance",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Dot color",
                "hint": "Foreground color of this stimulus (e.g. $[1,1,0], red )",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "colorSpace": {
                "val": "rgb",
                "valType": "str",
                "inputType": "choice",
                "categ": "Appearance",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [
                    "rgb",
                    "dkl",
                    "lms",
                    "hsv"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Dot color space",
                "hint": "In what format (color space) have you specified the colors? (rgb, dkl, lms, hsv)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "opacity": {
                "val": "",
                "valType": "num",
                "inputType": "single",
                "categ": "Appearance",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Opacity",
                "hint": "Opacity of the stimulus (1=opaque, 0=fully transparent, 0.5=translucent). Leave blank for each color to have its own opacity (recommended if any color is None).",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "dotSize": {
                "val": 2,
                "valType": "num",
                "inputType": "spin",
                "categ": "Layout",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Dot size",
                "hint": "Size of the dots IN PIXELS regardless of the set units",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "fieldSize": {
                "val": 1.0,
                "valType": "num",
                "inputType": "single",
                "categ": "Layout",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Field size",
                "hint": "What is the size of the field (in the specified units)?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "fieldPos": {
                "val": [
                    0.0,
                    0.0
                ],
                "valType": "list",
                "inputType": "single",
                "categ": "Layout",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Field position",
                "hint": "Where is the field centred (in the specified units)?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "units": {
                "val": "from exp settings",
                "valType": "str",
                "inputType": "choice",
                "categ": "Layout",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "from exp settings",
                    "deg",
                    "cm",
                    "pix",
                    "norm",
                    "height",
                    "degFlatPos",
                    "degFlat"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Spatial units",
                "hint": "Units of dimensions for this stimulus",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "anchor": {
                "val": "center",
                "valType": "str",
                "inputType": "choice",
                "categ": "Layout",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [
                    "center",
                    "top-center",
                    "bottom-center",
                    "center-left",
                    "center-right",
                    "top-left",
                    "top-right",
                    "bottom-left",
                    "bottom-right"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Field anchor",
                "hint": "Which point on the field should be anchored to its exact position?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "nDots": {
                "val": 100,
                "valType": "int",
                "inputType": "spin",
                "categ": "Dots",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Number of dots",
                "hint": "Number of dots in the field (for circular fields this will be average number of dots)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "dir": {
                "val": 0.0,
                "valType": "num",
                "inputType": "spin",
                "categ": "Dots",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Direction",
                "hint": "Direction of motion for the signal dots (degrees)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "speed": {
                "val": 0.1,
                "valType": "num",
                "inputType": "single",
                "categ": "Dots",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Speed",
                "hint": "Speed of the dots (displacement per frame in the specified units)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "saveStartStop": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Save onset/offset times",
                "hint": "Store the onset/offset times in the data file (as well as in the log file).",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "syncScreenRefresh": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Sync timing with screen refresh",
                "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "disabled": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Disable Component",
                "hint": "Disable this Component",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "contrast": {
                "val": 1,
                "valType": "num",
                "inputType": "single",
                "categ": "Appearance",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Contrast",
                "hint": "Contrast of the stimulus (1.0=unchanged contrast, 0.5=decrease contrast, 0.0=uniform/no contrast, -0.5=slightly inverted, -1.0=totally inverted)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "validator": {
                "val": "",
                "valType": "code",
                "inputType": "validator",
                "categ": "Testing",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "VisualValidatorRoutine"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Validate with...",
                "hint": "Name of validator Component/Routine to use to check the timing of this stimulus.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "coherence": {
                "val": 1.0,
                "valType": "num",
                "inputType": "single",
                "categ": "Dots",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Coherence",
                "hint": "Coherence of the dots (fraction moving in the signal direction on any one frame)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "dotLife": {
                "val": 3,
                "valType": "num",
                "inputType": "spin",
                "categ": "Dots",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Dot life-time",
                "hint": "Number of frames before each dot is killed and randomly assigned a new position",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "signalDots": {
                "val": "same",
                "valType": "str",
                "inputType": "choice",
                "categ": "Dots",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "same",
                    "different"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Signal dots",
                "hint": "On each frame are the signals dots remaining the same or changing? See Scase et al.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "refreshDots": {
                "val": "repeat",
                "valType": "str",
                "inputType": "choice",
                "categ": "Dots",
                "updates": null,
                "allowedUpdates": [],
                "allowedVals": [
                    "none",
                    "repeat"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Dot refresh rule",
                "hint": "When should the whole sample of dots be refreshed",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "noiseDots": {
                "val": "direction",
                "valType": "str",
                "inputType": "choice",
                "categ": "Dots",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "direction",
                    "position",
                    "walk"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Noise dots",
                "hint": "What governs the behaviour of the noise dots? See Scase et al.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "fieldShape": {
                "val": "circle",
                "valType": "str",
                "inputType": "choice",
                "categ": "Layout",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [
                    "circle",
                    "square"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Field shape",
                "hint": "What is the shape of the field?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            }
        }
    },
    "EyetrackerRecordComponent": {
        "__class__": "psychopy.experiment.components.eyetracker_record:EyetrackerRecordComponent",
        "__name__": "EyetrackerRecordComponent",
        "categories": [
            "Eyetracking"
        ],
        "targets": [
            "PsychoPy"
        ],
        "plugin": null,
        "iconSVG": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 32 32\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:space=\"preserve\" xmlns:serif=\"http://www.serif.com/\" style=\"fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2;\">\n    <g id=\"EyetrackerRecordComponent\" transform=\"matrix(0.451519,0,0,0.451519,0,0)\">\n        <rect x=\"0\" y=\"0\" width=\"70.872\" height=\"70.866\" style=\"fill:none;\"/>\n        <g transform=\"matrix(0,0.997716,0.997716,0,35.4361,18.5967)\">\n            <path d=\"M16.875,-16.875C7.555,-16.875 0,-9.32 0,0C0,9.32 7.555,16.875 16.875,16.875C26.195,16.875 33.75,9.32 33.75,0C33.75,-9.32 26.195,-16.875 16.875,-16.875\" style=\"fill:rgb(2,169,234);fill-rule:nonzero;\"/>\n        </g>\n        <g transform=\"matrix(0,-0.997716,-0.997716,0,33.3437,8.27124)\">\n            <path d=\"M-26.768,-32.1C-39.941,-24.322 -48.465,-13.622 -48.465,-2.097C-48.465,9.428 -39.941,20.128 -26.768,27.906L-24.948,28.98L-23.235,27.741C-11.846,19.499 -5.983,9.1 -5.983,-2.097C-5.983,-13.294 -11.846,-23.693 -23.235,-31.935L-24.948,-33.174L-26.768,-32.1ZM-25.318,-25.422C-16.953,-18.817 -12.437,-10.816 -12.437,-2.097C-12.437,6.622 -16.952,14.623 -25.318,21.228C-35.241,14.938 -42.011,6.906 -42.011,-2.097C-42.011,-11.1 -35.241,-19.132 -25.318,-25.422ZM-21.749,-2.25C-21.412,-3.135 -21.227,-4.094 -21.227,-5.097C-21.227,-9.514 -24.807,-13.094 -29.224,-13.094C-33.641,-13.094 -37.221,-9.514 -37.221,-5.097C-37.221,-0.68 -33.641,2.9 -29.224,2.9C-28.876,2.9 -28.534,2.878 -28.198,2.835C-28.609,2.194 -28.847,1.432 -28.847,0.614C-28.847,-1.665 -26.999,-3.513 -24.72,-3.513C-23.553,-3.513 -22.499,-3.029 -21.749,-2.25Z\" style=\"fill:var(--outline);\"/>\n        </g>\n    </g>\n</svg>\n",
        "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\eyetracker_record\\eyetracker_record.png",
        "tooltip": "Start and / or Stop recording data from the eye tracker",
        "version": "2021.2.0",
        "beta": false,
        "validatorClasses": [],
        "hidden": false,
        "params": {
            "name": {
                "val": "etRecord",
                "valType": "code",
                "inputType": "name",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Name",
                "hint": "Name of this Component (alphanumeric or _, no spaces)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "actionType": {
                "val": "Start and Stop",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "Start and Stop",
                    "Start Only",
                    "Stop Only"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Record actions",
                "hint": "Should this Component start and / or stop eye tracker recording?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startVal": {
                "val": 0.0,
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Start",
                "hint": "When does the Component start?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startEstim": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Expected start (s)",
                "hint": "(Optional) expected start (s), purely for representing in the timeline",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startType": {
                "val": "time (s)",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "time (s)",
                    "frame N",
                    "condition"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Start type",
                "hint": "How do you want to define your start point?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "stopVal": {
                "val": 1.0,
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": [],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop",
                "hint": "When does the Component end? (blank is endless)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "durationEstim": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Expected duration (s)",
                "hint": "(Optional) expected duration (s), purely for representing in the timeline",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "stopType": {
                "val": "duration (s)",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "duration (s)",
                    "duration (frames)",
                    "time (s)",
                    "frame N",
                    "condition"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop type",
                "hint": "How do you want to define your end point?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "saveStartStop": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Save onset/offset times",
                "hint": "Store the onset/offset times in the data file (as well as in the log file).",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "syncScreenRefresh": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Sync timing with screen refresh",
                "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "disabled": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Disable Component",
                "hint": "Disable this Component",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "stopWithRoutine": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop with Routine?",
                "hint": "Should eyetracking stop when the Routine ends? Tick to force stopping after the Routine has finished.",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "actionType",
                            "condition": "in ('Start and Stop', 'Stop Only')"
                        }
                    ],
                    "enabled": []
                }
            }
        }
    },
    "FormComponent": {
        "__class__": "psychopy.experiment.components.form:FormComponent",
        "__name__": "FormComponent",
        "categories": [
            "Responses"
        ],
        "targets": [
            "PsychoPy",
            "PsychoJS"
        ],
        "plugin": null,
        "iconSVG": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 32 32\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:space=\"preserve\" xmlns:serif=\"http://www.serif.com/\" style=\"fill-rule:evenodd;clip-rule:evenodd;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:1;\">\n    <g id=\"light-components-FormComponent\" serif:id=\"light/components/FormComponent\" transform=\"matrix(0.451519,0,0,0.451519,0,0)\">\n        <rect x=\"0\" y=\"0\" width=\"70.872\" height=\"70.866\" style=\"fill:none;\"/>\n        <g transform=\"matrix(1.06798,0,0,1.05793,-512.945,-420.135)\">\n            <path d=\"M534.274,413.928C534.274,410.405 531.444,407.548 527.954,407.548C520.275,407.548 507.397,407.548 499.719,407.548C496.228,407.548 493.399,410.405 493.399,413.928C493.399,423.576 493.399,441.771 493.399,451.418C493.399,454.942 496.228,457.798 499.719,457.798C507.397,457.798 520.275,457.798 527.954,457.798C531.444,457.798 534.274,454.942 534.274,451.418C534.274,441.771 534.274,423.576 534.274,413.928Z\" style=\"fill:none;stroke:var(--outline);stroke-width:4.17px;\"/>\n        </g>\n        <g id=\"Lines\" transform=\"matrix(1.07125,0,0,1.07125,-2.07367,-0.269196)\">\n            <g transform=\"matrix(1,0,0,1,-400.109,-377.546)\">\n                <g transform=\"matrix(1,0,0,1,435.41,431.245)\">\n                    <path d=\"M-10.307,-5.664C-11.871,-5.664 -13.139,-4.396 -13.139,-2.832C-13.139,-1.268 -11.871,0 -10.307,0C-8.743,0 -7.475,-1.268 -7.475,-2.832C-7.475,-4.396 -8.743,-5.664 -10.307,-5.664Z\" style=\"fill:var(--outline);fill-opacity:0.5;fill-rule:nonzero;\"/>\n                </g>\n                <g transform=\"matrix(1,0,0,1,447.318,431.245)\">\n                    <path d=\"M0,-5.664L-14.845,-5.664C-16.409,-5.664 -17.677,-4.396 -17.677,-2.832C-17.677,-1.268 -16.409,0 -14.845,0L0,0C1.564,0 2.832,-1.268 2.832,-2.832C2.832,-4.396 1.564,-5.664 0,-5.664\" style=\"fill:var(--outline);fill-rule:nonzero;\"/>\n                </g>\n            </g>\n            <g transform=\"matrix(1,0,0,1,-400.109,-387.17)\">\n                <g transform=\"matrix(1,0,0,1,447.318,431.245)\">\n                    <path d=\"M0,-5.664L-14.845,-5.664C-16.409,-5.664 -17.677,-4.396 -17.677,-2.832C-17.677,-1.268 -16.409,0 -14.845,0L0,0C1.564,0 2.832,-1.268 2.832,-2.832C2.832,-4.396 1.564,-5.664 0,-5.664\" style=\"fill:var(--outline);fill-rule:nonzero;\"/>\n                </g>\n                <g transform=\"matrix(-3.52039e-17,0.574923,0.574923,3.52039e-17,175.346,184.699)\">\n                    <path d=\"M421.056,438.36L426.761,432.655L424.108,430.002\" style=\"fill:none;stroke:rgb(37,169,234);stroke-width:5.39px;\"/>\n                </g>\n            </g>\n            <g transform=\"matrix(1,0,0,1,-400.109,-396.794)\">\n                <g transform=\"matrix(1,0,0,1,435.41,431.245)\">\n                    <path d=\"M-10.307,-5.664C-11.871,-5.664 -13.139,-4.396 -13.139,-2.832C-13.139,-1.268 -11.871,0 -10.307,0C-8.743,0 -7.475,-1.268 -7.475,-2.832C-7.475,-4.396 -8.743,-5.664 -10.307,-5.664Z\" style=\"fill:var(--outline);fill-opacity:0.5;fill-rule:nonzero;\"/>\n                </g>\n                <g transform=\"matrix(1,0,0,1,447.318,431.245)\">\n                    <path d=\"M0,-5.664L-14.845,-5.664C-16.409,-5.664 -17.677,-4.396 -17.677,-2.832C-17.677,-1.268 -16.409,0 -14.845,0L0,0C1.564,0 2.832,-1.268 2.832,-2.832C2.832,-4.396 1.564,-5.664 0,-5.664\" style=\"fill:var(--outline);fill-rule:nonzero;\"/>\n                </g>\n            </g>\n            <g transform=\"matrix(1,0,0,1,47.7639,24.827)\">\n                <path d=\"M0,-5.664L-22.77,-5.664C-24.334,-5.664 -25.602,-4.396 -25.602,-2.832C-25.602,-1.268 -24.334,0 -22.77,0L0,0C1.564,0 2.832,-1.268 2.832,-2.832C2.832,-4.396 1.564,-5.664 0,-5.664\" style=\"fill:var(--outline);fill-rule:nonzero;\"/>\n            </g>\n        </g>\n        <g transform=\"matrix(1.07125,0,0,1.07125,-514.921,-426.523)\">\n            <path d=\"M509.372,403.945L505.452,403.945C504.171,403.945 503.132,404.985 503.132,406.265L503.132,410.905C503.132,412.185 504.171,413.225 505.452,413.225L522.892,413.225C524.172,413.225 525.212,412.185 525.212,410.905L525.212,406.265C525.212,404.985 524.172,403.945 522.892,403.945L518.971,403.945C518.949,401.315 516.807,399.187 514.172,399.187C511.536,399.187 509.394,401.315 509.372,403.945ZM514.172,402.405C515.022,402.405 515.712,403.095 515.712,403.945C515.712,404.795 515.022,405.485 514.172,405.485C513.322,405.485 512.632,404.795 512.632,403.945C512.632,403.095 513.322,402.405 514.172,402.405Z\" style=\"fill:var(--outline);\"/>\n        </g>\n    </g>\n</svg>\n",
        "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\form\\form.png",
        "tooltip": "Form: a Psychopy survey tool",
        "version": "2020.2.0",
        "beta": false,
        "validatorClasses": [
            "VisualValidatorRoutine"
        ],
        "hidden": false,
        "params": {
            "name": {
                "val": "form",
                "valType": "code",
                "inputType": "name",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Name",
                "hint": "Name of this Component (alphanumeric or _, no spaces)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startVal": {
                "val": "0.0",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Start",
                "hint": "When does the Component start?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startEstim": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Expected start (s)",
                "hint": "(Optional) expected start (s), purely for representing in the timeline",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startType": {
                "val": "time (s)",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "time (s)",
                    "frame N",
                    "condition"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Start type",
                "hint": "How do you want to define your start point?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "stopVal": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": [],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop",
                "hint": "When does the Component end? (blank is endless)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "durationEstim": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Expected duration (s)",
                "hint": "(Optional) expected duration (s), purely for representing in the timeline",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "stopType": {
                "val": "duration (s)",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "duration (s)",
                    "duration (frames)",
                    "time (s)",
                    "frame N",
                    "condition"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop type",
                "hint": "How do you want to define your end point?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "fillColor": {
                "val": "",
                "valType": "color",
                "inputType": "color",
                "categ": "Appearance",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Fill color",
                "hint": "Color of the form's background",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": [
                        {
                            "param": "Style",
                            "condition": "=='custom...'"
                        }
                    ]
                }
            },
            "borderColor": {
                "val": "",
                "valType": "color",
                "inputType": "color",
                "categ": "Appearance",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Border color",
                "hint": "Color of the outline around the form",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": [
                        {
                            "param": "Style",
                            "condition": "=='custom...'"
                        }
                    ]
                }
            },
            "itemColor": {
                "val": "white",
                "valType": "color",
                "inputType": "color",
                "categ": "Appearance",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Item color",
                "hint": "Base text color for questions",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": [
                        {
                            "param": "Style",
                            "condition": "=='custom...'"
                        }
                    ]
                }
            },
            "responseColor": {
                "val": "white",
                "valType": "color",
                "inputType": "color",
                "categ": "Appearance",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Response color",
                "hint": "Base text color for responses, also sets color of lines in sliders and borders of textboxes",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": [
                        {
                            "param": "Style",
                            "condition": "=='custom...'"
                        }
                    ]
                }
            },
            "markerColor": {
                "val": "red",
                "valType": "color",
                "inputType": "color",
                "categ": "Appearance",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Marker color",
                "hint": "Color of markers and the scrollbar",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": [
                        {
                            "param": "Style",
                            "condition": "=='custom...'"
                        }
                    ]
                }
            },
            "Style": {
                "val": "dark",
                "valType": "str",
                "inputType": "choice",
                "categ": "Appearance",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [
                    "light",
                    "dark",
                    "custom..."
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Styles",
                "hint": "Styles determine the appearance of the form",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "colorSpace": {
                "val": "rgb",
                "valType": "str",
                "inputType": "choice",
                "categ": "Appearance",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [
                    "rgb",
                    "dkl",
                    "lms",
                    "hsv"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Color space",
                "hint": "In what format (color space) have you specified the colors? (rgb, dkl, lms, hsv)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "opacity": {
                "val": "",
                "valType": "num",
                "inputType": "single",
                "categ": "Appearance",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Opacity",
                "hint": "Opacity of the stimulus (1=opaque, 0=fully transparent, 0.5=translucent). Leave blank for each color to have its own opacity (recommended if any color is None).",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "size": {
                "val": [
                    1,
                    0.7
                ],
                "valType": "list",
                "inputType": "single",
                "categ": "Layout",
                "updates": "constant",
                "allowedUpdates": [],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Size [w,h]",
                "hint": "Size of this stimulus (either a single value or x,y pair, e.g. 2.5, [1,2] ",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "pos": {
                "val": [
                    0,
                    0
                ],
                "valType": "list",
                "inputType": "single",
                "categ": "Layout",
                "updates": "constant",
                "allowedUpdates": [],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Position [x,y]",
                "hint": "Position of this stimulus (e.g. [1,2] )",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "Item Padding": {
                "val": 0.05,
                "valType": "num",
                "inputType": "single",
                "categ": "Layout",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Item padding",
                "hint": "The padding or space between items.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "Items": {
                "val": "",
                "valType": "file",
                "inputType": "table",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {
                    "template": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\form\\formItems.xltx"
                },
                "label": "Items",
                "hint": "The csv filename containing the items for your survey.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "Randomize": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Randomize",
                "hint": "Do you want to randomize the order of your questions?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "Data Format": {
                "val": "rows",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [
                    "columns",
                    "rows"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Data format",
                "hint": "Store item data by columns, or rows",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "saveStartStop": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Save onset/offset times",
                "hint": "Store the onset/offset times in the data file (as well as in the log file).",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "syncScreenRefresh": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Sync timing with screen refresh",
                "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "disabled": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Disable Component",
                "hint": "Disable this Component",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "contrast": {
                "val": 1,
                "valType": "num",
                "inputType": "single",
                "categ": "Appearance",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Contrast",
                "hint": "Contrast of the stimulus (1.0=unchanged contrast, 0.5=decrease contrast, 0.0=uniform/no contrast, -0.5=slightly inverted, -1.0=totally inverted)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "validator": {
                "val": "",
                "valType": "code",
                "inputType": "validator",
                "categ": "Testing",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "VisualValidatorRoutine"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Validate with...",
                "hint": "Name of validator Component/Routine to use to check the timing of this stimulus.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "Text Height": {
                "val": 0.03,
                "valType": "num",
                "inputType": "single",
                "categ": "Formatting",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Text height",
                "hint": "The size of the item text for Form",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "Font": {
                "val": "Noto Sans",
                "valType": "str",
                "inputType": "single",
                "categ": "Formatting",
                "updates": "constant",
                "allowedUpdates": [
                    "constant"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Font",
                "hint": "The font name (e.g. Comic Sans)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            }
        }
    },
    "GratingComponent": {
        "__class__": "psychopy.experiment.components.grating:GratingComponent",
        "__name__": "GratingComponent",
        "categories": [
            "Stimuli"
        ],
        "targets": [
            "PsychoPy",
            "PsychoJS"
        ],
        "plugin": null,
        "iconSVG": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 32 32\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:space=\"preserve\" xmlns:serif=\"http://www.serif.com/\" style=\"fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2;\">\n    <g id=\"GratingComponent\" transform=\"matrix(0.451519,0,0,0.451519,0,0)\">\n        <rect x=\"0\" y=\"0\" width=\"70.872\" height=\"70.866\" style=\"fill:none;\"/>\n        <clipPath id=\"_clip1\">\n            <rect x=\"0\" y=\"0\" width=\"70.872\" height=\"70.866\"/>\n        </clipPath>\n        <g clip-path=\"url(#_clip1)\">\n            <g transform=\"matrix(1.12913,0,0,1.12913,-364.854,-5.5115)\">\n                <path d=\"M373.803,4.658L367.273,4.658L325.523,67.866L332.021,67.866L335.092,63.219L335.122,63.238L373.803,4.658ZM385.935,5.928L345.041,67.866L342.141,67.866L339.642,66.218L380.293,4.658L385.935,4.658L385.935,5.928ZM385.935,25.598L358.024,67.866L351.535,67.866L385.935,15.771L385.935,25.598ZM385.935,45.244L370.997,67.866L364.503,67.866L385.935,35.419L385.935,45.244ZM323.091,61.725L323.091,51.911L354.293,4.658L360.783,4.658L323.091,61.725ZM323.091,42.073L323.091,32.254L341.313,4.658L347.793,4.658L323.091,42.073ZM323.091,22.426L323.091,12.595L328.332,4.658L334.823,4.658L323.091,22.426Z\" style=\"fill:url(#_Radial2);fill-rule:nonzero;\"/>\n            </g>\n        </g>\n    </g>\n    <defs>\n        <radialGradient id=\"_Radial2\" cx=\"0\" cy=\"0\" r=\"1\" gradientUnits=\"userSpaceOnUse\" gradientTransform=\"matrix(27.4605,0,0,27.4605,354.513,36.2647)\"><stop offset=\"0\" style=\"stop-color:rgb(102,102,110);stop-opacity:1\"/><stop offset=\"0.75\" style=\"stop-color:rgb(102,102,110);stop-opacity:1\"/><stop offset=\"1\" style=\"stop-color:rgb(102,102,110);stop-opacity:0\"/></radialGradient>\n    </defs>\n</svg>\n",
        "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\grating\\grating.png",
        "tooltip": "Grating: present cyclic textures, prebuilt or from a file",
        "version": "0.0.0",
        "beta": false,
        "validatorClasses": [
            "VisualValidatorRoutine"
        ],
        "hidden": false,
        "params": {
            "name": {
                "val": "grating",
                "valType": "code",
                "inputType": "name",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Name",
                "hint": "Name of this Component (alphanumeric or _, no spaces)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startVal": {
                "val": 0.0,
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Start",
                "hint": "When does the Component start?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startEstim": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Expected start (s)",
                "hint": "(Optional) expected start (s), purely for representing in the timeline",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startType": {
                "val": "time (s)",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "time (s)",
                    "frame N",
                    "condition"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Start type",
                "hint": "How do you want to define your start point?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "stopVal": {
                "val": 1.0,
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": [],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop",
                "hint": "When does the Component end? (blank is endless)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "durationEstim": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Expected duration (s)",
                "hint": "(Optional) expected duration (s), purely for representing in the timeline",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "stopType": {
                "val": "duration (s)",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "duration (s)",
                    "duration (frames)",
                    "time (s)",
                    "frame N",
                    "condition"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop type",
                "hint": "How do you want to define your end point?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "color": {
                "val": "$[1,1,1]",
                "valType": "color",
                "inputType": "color",
                "categ": "Appearance",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Foreground color",
                "hint": "Foreground color of this stimulus (e.g. $[1,1,0], red )",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "colorSpace": {
                "val": "rgb",
                "valType": "str",
                "inputType": "choice",
                "categ": "Appearance",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [
                    "rgb",
                    "dkl",
                    "lms",
                    "hsv"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Color space",
                "hint": "In what format (color space) have you specified the colors? (rgb, dkl, lms, hsv)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "opacity": {
                "val": "",
                "valType": "num",
                "inputType": "single",
                "categ": "Appearance",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Opacity",
                "hint": "Opacity of the stimulus (1=opaque, 0=fully transparent, 0.5=translucent). Leave blank for each color to have its own opacity (recommended if any color is None).",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "size": {
                "val": [
                    0.5,
                    0.5
                ],
                "valType": "list",
                "inputType": "single",
                "categ": "Layout",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Size [w,h]",
                "hint": "Size of this stimulus (either a single value or x,y pair, e.g. 2.5, [1,2] ",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "pos": {
                "val": [
                    0,
                    0
                ],
                "valType": "list",
                "inputType": "single",
                "categ": "Layout",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Position [x,y]",
                "hint": "Position of this stimulus (e.g. [1,2] )",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "units": {
                "val": "from exp settings",
                "valType": "str",
                "inputType": "choice",
                "categ": "Layout",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "from exp settings",
                    "deg",
                    "cm",
                    "pix",
                    "norm",
                    "height",
                    "degFlatPos",
                    "degFlat"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Spatial units",
                "hint": "Units of dimensions for this stimulus",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "anchor": {
                "val": "center",
                "valType": "str",
                "inputType": "choice",
                "categ": "Layout",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [
                    "center",
                    "top-center",
                    "bottom-center",
                    "center-left",
                    "center-right",
                    "top-left",
                    "top-right",
                    "bottom-left",
                    "bottom-right"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Anchor",
                "hint": "Which point on the stimulus should be anchored to its exact position?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "ori": {
                "val": 0,
                "valType": "num",
                "inputType": "spin",
                "categ": "Layout",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [
                    -360,
                    360
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Orientation",
                "hint": "Orientation of this stimulus (in deg)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "tex": {
                "val": "sin",
                "valType": "file",
                "inputType": "file",
                "categ": "Texture",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [
                    "sin",
                    "sqr",
                    "sinXsin"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Texture",
                "hint": "The (2D) texture of the grating - can be sin, sqr, sinXsin... or a filename (including path)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "mask": {
                "val": "",
                "valType": "file",
                "inputType": "file",
                "categ": "Texture",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [
                    "gauss",
                    "circle"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Mask",
                "hint": "An image to define the alpha mask (ie shape)- gauss, circle... or a filename (including path)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "phase": {
                "val": 0.0,
                "valType": "num",
                "inputType": "single",
                "categ": "Texture",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Phase (in cycles)",
                "hint": "Spatial positioning of the image on the grating (wraps in range 0-1.0)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "sf": {
                "val": "",
                "valType": "num",
                "inputType": "single",
                "categ": "Texture",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Spatial frequency",
                "hint": "Spatial frequency of image repeats across the grating in 1 or 2 dimensions, e.g. 4 or [2,3]",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "texture resolution": {
                "val": "128",
                "valType": "num",
                "inputType": "choice",
                "categ": "Texture",
                "updates": "constant",
                "allowedUpdates": [],
                "allowedVals": [
                    "32",
                    "64",
                    "128",
                    "256",
                    "512"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Texture resolution",
                "hint": "Resolution of the texture for standard ones such as sin, sqr etc. For most cases a value of 256 pixels will suffice",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "interpolate": {
                "val": "linear",
                "valType": "str",
                "inputType": "choice",
                "categ": "Texture",
                "updates": "constant",
                "allowedUpdates": [],
                "allowedVals": [
                    "linear",
                    "nearest"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Interpolate",
                "hint": "How should the image be interpolated if/when rescaled",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "saveStartStop": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Save onset/offset times",
                "hint": "Store the onset/offset times in the data file (as well as in the log file).",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "syncScreenRefresh": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Sync timing with screen refresh",
                "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "disabled": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Disable Component",
                "hint": "Disable this Component",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "contrast": {
                "val": 1.0,
                "valType": "num",
                "inputType": "single",
                "categ": "Appearance",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Contrast",
                "hint": "Contrast of the stimulus (1.0=unchanged contrast, 0.5=decrease contrast, 0.0=uniform/no contrast, -0.5=slightly inverted, -1.0=totally inverted)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "validator": {
                "val": "",
                "valType": "code",
                "inputType": "validator",
                "categ": "Testing",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "VisualValidatorRoutine"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Validate with...",
                "hint": "Name of validator Component/Routine to use to check the timing of this stimulus.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "draggable": {
                "val": false,
                "valType": "code",
                "inputType": "bool",
                "categ": "Layout",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Draggable?",
                "hint": "Should this stimulus be moveble by clicking and dragging?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "blendmode": {
                "val": "avg",
                "valType": "str",
                "inputType": "choice",
                "categ": "Appearance",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [
                    "avg",
                    "add"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "OpenGL blend mode",
                "hint": "OpenGL Blendmode: avg gives traditional transparency, add is important to combine gratings)]",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            }
        }
    },
    "ImageComponent": {
        "__class__": "psychopy.experiment.components.image:ImageComponent",
        "__name__": "ImageComponent",
        "categories": [
            "Stimuli"
        ],
        "targets": [
            "PsychoPy",
            "PsychoJS"
        ],
        "plugin": null,
        "iconSVG": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 32 32\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:space=\"preserve\" xmlns:serif=\"http://www.serif.com/\" style=\"fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2;\">\n    <g id=\"ImageComponent\" transform=\"matrix(0.451519,0,0,0.451519,0,0)\">\n        <rect x=\"0\" y=\"0\" width=\"70.872\" height=\"70.866\" style=\"fill:none;\"/>\n        <g id=\"Image-Component\" serif:id=\"Image Component\" transform=\"matrix(1.05056,0,0,1.05056,-1.79155,-1.7914)\">\n            <path id=\"Frame\" d=\"M14.46,10.135C10.354,10.135 7.025,13.464 7.025,17.571L7.025,53.295C7.025,57.402 10.354,60.731 14.46,60.731L56.411,60.731C60.518,60.731 63.847,57.402 63.847,53.295L63.847,17.571C63.847,13.464 60.518,10.135 56.411,10.135L14.46,10.135Z\" style=\"fill:none;fill-rule:nonzero;\"/>\n            <clipPath id=\"_clip1\">\n                <path id=\"Frame1\" serif:id=\"Frame\" d=\"M14.46,10.135C10.354,10.135 7.025,13.464 7.025,17.571L7.025,53.295C7.025,57.402 10.354,60.731 14.46,60.731L56.411,60.731C60.518,60.731 63.847,57.402 63.847,53.295L63.847,17.571C63.847,13.464 60.518,10.135 56.411,10.135L14.46,10.135Z\" clip-rule=\"nonzero\"/>\n            </clipPath>\n            <g clip-path=\"url(#_clip1)\">\n                <g id=\"Sky\" transform=\"matrix(-1,0,0,1,66.724,0.6631)\">\n                    <rect x=\"-6.532\" y=\"1.239\" width=\"79.788\" height=\"67.725\" style=\"fill:rgb(2,169,234);\"/>\n                </g>\n                <g id=\"Sun\" transform=\"matrix(0,1,1,0,27.8961,12.7452)\">\n                    <path d=\"M10.24,-10.24C4.585,-10.24 0.001,-5.656 0.001,-0.001C0.001,5.655 4.585,10.24 10.24,10.24C15.894,10.24 20.478,5.655 20.478,-0.001C20.478,-5.656 15.894,-10.24 10.24,-10.24\" style=\"fill:var(--mantle);fill-rule:nonzero;\"/>\n                </g>\n                <g id=\"Mountains\" transform=\"matrix(1,0,0,1,-478.385,0)\">\n                    <path d=\"M484,41.774L496.338,27.38C497.941,25.509 500.887,25.688 502.253,27.737L510.432,40.01L527.58,20.004C528.661,18.742 530.648,18.862 531.57,20.245L544,38.899L544,65L484,65L484,41.774Z\" style=\"fill:var(--outline);\"/>\n                </g>\n            </g>\n        </g>\n    </g>\n</svg>\n",
        "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\image\\image.png",
        "tooltip": "Image: present images (bmp, jpg, tif...)",
        "version": "0.0.0",
        "beta": false,
        "validatorClasses": [
            "VisualValidatorRoutine"
        ],
        "hidden": false,
        "params": {
            "name": {
                "val": "image",
                "valType": "code",
                "inputType": "name",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Name",
                "hint": "Name of this Component (alphanumeric or _, no spaces)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startVal": {
                "val": 0.0,
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Start",
                "hint": "When does the Component start?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startEstim": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Expected start (s)",
                "hint": "(Optional) expected start (s), purely for representing in the timeline",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startType": {
                "val": "time (s)",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "time (s)",
                    "frame N",
                    "condition"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Start type",
                "hint": "How do you want to define your start point?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "stopVal": {
                "val": 1.0,
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": [],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop",
                "hint": "When does the Component end? (blank is endless)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "durationEstim": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Expected duration (s)",
                "hint": "(Optional) expected duration (s), purely for representing in the timeline",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "stopType": {
                "val": "duration (s)",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "duration (s)",
                    "duration (frames)",
                    "time (s)",
                    "frame N",
                    "condition"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop type",
                "hint": "How do you want to define your end point?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "color": {
                "val": "$[1,1,1]",
                "valType": "color",
                "inputType": "color",
                "categ": "Appearance",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Foreground color",
                "hint": "Foreground color of this stimulus (e.g. $[1,1,0], red )",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "colorSpace": {
                "val": "rgb",
                "valType": "str",
                "inputType": "choice",
                "categ": "Appearance",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [
                    "rgb",
                    "dkl",
                    "lms",
                    "hsv"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Color space",
                "hint": "In what format (color space) have you specified the colors? (rgb, dkl, lms, hsv)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "opacity": {
                "val": "",
                "valType": "num",
                "inputType": "single",
                "categ": "Appearance",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Opacity",
                "hint": "Opacity of the stimulus (1=opaque, 0=fully transparent, 0.5=translucent). Leave blank for each color to have its own opacity (recommended if any color is None).",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "size": {
                "val": [
                    0.5,
                    0.5
                ],
                "valType": "list",
                "inputType": "single",
                "categ": "Layout",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Size [w,h]",
                "hint": "Size of this stimulus (either a single value or x,y pair, e.g. 2.5, [1,2] ",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "pos": {
                "val": [
                    0,
                    0
                ],
                "valType": "list",
                "inputType": "single",
                "categ": "Layout",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Position [x,y]",
                "hint": "Position of this stimulus (e.g. [1,2] )",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "units": {
                "val": "from exp settings",
                "valType": "str",
                "inputType": "choice",
                "categ": "Layout",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "from exp settings",
                    "deg",
                    "cm",
                    "pix",
                    "norm",
                    "height",
                    "degFlatPos",
                    "degFlat"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Spatial units",
                "hint": "Units of dimensions for this stimulus",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "anchor": {
                "val": "center",
                "valType": "str",
                "inputType": "choice",
                "categ": "Layout",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [
                    "center",
                    "top-center",
                    "bottom-center",
                    "center-left",
                    "center-right",
                    "top-left",
                    "top-right",
                    "bottom-left",
                    "bottom-right"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Anchor",
                "hint": "Which point on the stimulus should be anchored to its exact position?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "ori": {
                "val": 0,
                "valType": "num",
                "inputType": "spin",
                "categ": "Layout",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [
                    -360,
                    360
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Orientation",
                "hint": "Orientation of this stimulus (in deg)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "image": {
                "val": "",
                "valType": "file",
                "inputType": "file",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Image",
                "hint": "The image to be displayed - a filename, including path",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "mask": {
                "val": "",
                "valType": "str",
                "inputType": "file",
                "categ": "Texture",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Mask",
                "hint": "An image to define the alpha mask through which the image is seen - gauss, circle, None or a filename (including path)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "texture resolution": {
                "val": "128",
                "valType": "num",
                "inputType": "choice",
                "categ": "Texture",
                "updates": "constant",
                "allowedUpdates": [],
                "allowedVals": [
                    "32",
                    "64",
                    "128",
                    "256",
                    "512"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Texture resolution",
                "hint": "Resolution of the mask if one is used.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "saveStartStop": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Save onset/offset times",
                "hint": "Store the onset/offset times in the data file (as well as in the log file).",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "syncScreenRefresh": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Sync timing with screen refresh",
                "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "disabled": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Disable Component",
                "hint": "Disable this Component",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "contrast": {
                "val": 1,
                "valType": "num",
                "inputType": "single",
                "categ": "Appearance",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Contrast",
                "hint": "Contrast of the stimulus (1.0=unchanged contrast, 0.5=decrease contrast, 0.0=uniform/no contrast, -0.5=slightly inverted, -1.0=totally inverted)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "validator": {
                "val": "",
                "valType": "code",
                "inputType": "validator",
                "categ": "Testing",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "VisualValidatorRoutine"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Validate with...",
                "hint": "Name of validator Component/Routine to use to check the timing of this stimulus.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "interpolate": {
                "val": "linear",
                "valType": "str",
                "inputType": "choice",
                "categ": "Texture",
                "updates": "constant",
                "allowedUpdates": [],
                "allowedVals": [
                    "linear",
                    "nearest"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Interpolate",
                "hint": "How should the image be interpolated if/when rescaled",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "flipVert": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Layout",
                "updates": "constant",
                "allowedUpdates": [],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Flip vertically",
                "hint": "Should the image be flipped vertically (top to bottom)?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "flipHoriz": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Layout",
                "updates": "constant",
                "allowedUpdates": [],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Flip horizontally",
                "hint": "Should the image be flipped horizontally (left to right)?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "draggable": {
                "val": false,
                "valType": "code",
                "inputType": "bool",
                "categ": "Layout",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Draggable?",
                "hint": "Should this stimulus be moveble by clicking and dragging?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            }
        }
    },
    "JoyButtonsComponent": {
        "__class__": "psychopy.experiment.components.joyButtons:JoyButtonsComponent",
        "__name__": "JoyButtonsComponent",
        "categories": [
            "Responses"
        ],
        "targets": [
            "PsychoPy"
        ],
        "plugin": null,
        "iconSVG": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 32 32\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:space=\"preserve\" xmlns:serif=\"http://www.serif.com/\" style=\"fill-rule:evenodd;clip-rule:evenodd;stroke-miterlimit:10;\">\n    <g id=\"light-components-JoyButtonsComponent\" serif:id=\"light/components/JoyButtonsComponent\" transform=\"matrix(0.451519,0,0,0.451519,0,0)\">\n        <rect x=\"0\" y=\"0\" width=\"70.872\" height=\"70.866\" style=\"fill:none;\"/>\n        <clipPath id=\"_clip1\">\n            <rect x=\"0\" y=\"0\" width=\"70.872\" height=\"70.866\"/>\n        </clipPath>\n        <g clip-path=\"url(#_clip1)\">\n            <g id=\"Joybuttons-Component\" serif:id=\"Joybuttons Component\" transform=\"matrix(0.965783,0,0,0.965783,1.21252,1.21242)\">\n                <g transform=\"matrix(1,0,0,1,67.541,24.8566)\">\n                    <path d=\"M0,22.28C0,26.13 -2.43,29.71 -6.28,31C-11.09,32.6 -16.3,30.01 -17.91,25.19L-19.824,19.462C-20.49,17.466 -22.359,16.12 -24.463,16.12L-39.747,16.12C-41.851,16.12 -43.72,17.466 -44.386,19.462L-46.3,25.19C-47.91,30.01 -53.12,32.6 -57.93,31C-61.78,29.71 -64.21,26.13 -64.21,22.28C-64.21,21.31 -64.06,20.33 -63.74,19.37L-55.92,-4.03C-54.67,-7.8 -51.2,-10.22 -47.44,-10.31C-47.36,-10.32 -47.29,-10.32 -47.21,-10.32L-17,-10.32C-16.92,-10.32 -16.85,-10.32 -16.77,-10.31C-13.01,-10.22 -9.54,-7.8 -8.29,-4.03L-0.47,19.37C-0.15,20.33 0,21.31 0,22.28Z\" style=\"fill:none;fill-rule:nonzero;stroke:var(--outline);stroke-width:4.28px;\"/>\n                </g>\n                <g id=\"Buttons\" transform=\"matrix(1,0,0,1,-2.91525,-0.392054)\">\n                    <g transform=\"matrix(0,1.28774,1.28774,0,49.8173,28.9485)\">\n                        <path d=\"M2.226,-2.226C0.997,-2.226 0,-1.229 0,0C0,1.229 0.997,2.226 2.226,2.226C3.455,2.226 4.452,1.229 4.452,0C4.452,-1.229 3.455,-2.226 2.226,-2.226\" style=\"fill:rgb(2,169,234);fill-rule:nonzero;\"/>\n                    </g>\n                    <g transform=\"matrix(0,1.28774,1.28774,0,49.8173,18.629)\">\n                        <path d=\"M2.226,-2.226C0.997,-2.226 0,-1.229 0,0C0,1.229 0.997,2.226 2.226,2.226C3.455,2.226 4.452,1.229 4.452,0C4.452,-1.229 3.455,-2.226 2.226,-2.226\" style=\"fill:rgb(242,84,91);fill-rule:nonzero;\"/>\n                    </g>\n                    <g transform=\"matrix(0,1.28774,1.28774,0,54.977,23.7887)\">\n                        <path d=\"M2.226,-2.226C0.997,-2.226 0,-1.229 0,0C0,1.229 0.997,2.226 2.226,2.226C3.455,2.226 4.452,1.229 4.452,0C4.452,-1.229 3.455,-2.226 2.226,-2.226\" style=\"fill:rgb(242,84,91);fill-rule:nonzero;\"/>\n                    </g>\n                    <g transform=\"matrix(0,1.28774,1.28774,0,44.6575,23.7887)\">\n                        <path d=\"M2.226,-2.226C0.997,-2.226 0,-1.229 0,0C0,1.229 0.997,2.226 2.226,2.226C3.455,2.226 4.452,1.229 4.452,0C4.452,-1.229 3.455,-2.226 2.226,-2.226\" style=\"fill:rgb(2,169,234);fill-rule:nonzero;\"/>\n                    </g>\n                </g>\n                <g id=\"Joystick\" transform=\"matrix(-7.57633e-21,-1.13003,-1.12991,-7.57633e-21,21.6767,21.1029)\">\n                    <path d=\"M-4.566,-4.566C-7.089,-4.566 -9.133,-2.522 -9.133,-0C-9.133,2.522 -7.089,4.566 -4.566,4.566C-2.044,4.566 -0,2.522 -0,-0C-0,-2.522 -2.044,-4.566 -4.566,-4.566\" style=\"fill:var(--outline);fill-rule:nonzero;\"/>\n                </g>\n            </g>\n        </g>\n    </g>\n</svg>\n",
        "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\joyButtons\\joyButtons.png",
        "tooltip": "JoyButtons: check and record joystick/gamepad button presses",
        "version": "0.0.0",
        "beta": false,
        "validatorClasses": [],
        "hidden": false,
        "params": {
            "name": {
                "val": "button_resp",
                "valType": "code",
                "inputType": "name",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Name",
                "hint": "Name of this Component (alphanumeric or _, no spaces)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startVal": {
                "val": 0.0,
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Start",
                "hint": "When does the Component start?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startEstim": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Expected start (s)",
                "hint": "(Optional) expected start (s), purely for representing in the timeline",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startType": {
                "val": "time (s)",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "time (s)",
                    "frame N",
                    "condition"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Start type",
                "hint": "How do you want to define your start point?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "stopVal": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": [],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop",
                "hint": "When does the Component end? (blank is endless)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "durationEstim": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Expected duration (s)",
                "hint": "(Optional) expected duration (s), purely for representing in the timeline",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "stopType": {
                "val": "duration (s)",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "duration (s)",
                    "duration (frames)",
                    "time (s)",
                    "frame N",
                    "condition"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop type",
                "hint": "How do you want to define your end point?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "forceEndRoutine": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Force end of Routine",
                "hint": "Should a response force the end of the Routine (e.g end the trial)?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "allowedKeys": {
                "val": "0,1,2,3,4",
                "valType": "list",
                "inputType": "single",
                "categ": "Data",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Allowed buttons",
                "hint": "A comma-separated list of button numbers, such as 0,1,2,3,4",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "store": {
                "val": "last key",
                "valType": "str",
                "inputType": "choice",
                "categ": "Data",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [
                    "last key",
                    "first key",
                    "all keys",
                    "nothing"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Store",
                "hint": "Choose which (if any) responses to store at the end of a trial",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "storeCorrect": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Store correct",
                "hint": "Do you want to save the response as correct/incorrect?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "correctAns": {
                "val": "",
                "valType": "list",
                "inputType": "single",
                "categ": "Data",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Correct answer",
                "hint": "What is the 'correct' key? Might be helpful to add a correctAns column and use $correctAns to compare to the key press.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": [
                        {
                            "param": "storeCorrect",
                            "condition": "== True"
                        }
                    ]
                }
            },
            "deviceNumber": {
                "val": "0",
                "valType": "int",
                "inputType": "int",
                "categ": "Device",
                "updates": "constant",
                "allowedUpdates": [],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Device number",
                "hint": "Device number, if you have multiple devices which one do you want (0, 1, 2...)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "saveStartStop": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Save onset/offset times",
                "hint": "Store the onset/offset times in the data file (as well as in the log file).",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "syncScreenRefresh": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Sync RT with screen",
                "hint": "A reaction time to a visual stimulus should be based on when the screen flipped",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "disabled": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Disable Component",
                "hint": "Disable this Component",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            }
        }
    },
    "JoystickComponent": {
        "__class__": "psychopy.experiment.components.joystick:JoystickComponent",
        "__name__": "JoystickComponent",
        "categories": [
            "Responses"
        ],
        "targets": [
            "PsychoPy"
        ],
        "plugin": null,
        "iconSVG": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 32 32\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:space=\"preserve\" xmlns:serif=\"http://www.serif.com/\" style=\"fill-rule:evenodd;clip-rule:evenodd;stroke-miterlimit:10;\">\n    <g id=\"light-components-JoyStickComponent\" serif:id=\"light/components/JoyStickComponent\" transform=\"matrix(0.451519,0,0,0.451519,0,0)\">\n        <rect x=\"0\" y=\"0\" width=\"70.872\" height=\"70.866\" style=\"fill:none;\"/>\n        <clipPath id=\"_clip1\">\n            <rect x=\"0\" y=\"0\" width=\"70.872\" height=\"70.866\"/>\n        </clipPath>\n        <g clip-path=\"url(#_clip1)\">\n            <g id=\"Joybuttons-Component\" serif:id=\"Joybuttons Component\" transform=\"matrix(0.965783,0,0,0.965783,1.21252,1.21242)\">\n                <g transform=\"matrix(1,0,0,1,67.541,24.8566)\">\n                    <path d=\"M0,22.28C0,26.13 -2.43,29.71 -6.28,31C-11.09,32.6 -16.3,30.01 -17.91,25.19L-19.824,19.462C-20.49,17.466 -22.359,16.12 -24.463,16.12L-39.747,16.12C-41.851,16.12 -43.72,17.466 -44.386,19.462L-46.3,25.19C-47.91,30.01 -53.12,32.6 -57.93,31C-61.78,29.71 -64.21,26.13 -64.21,22.28C-64.21,21.31 -64.06,20.33 -63.74,19.37L-55.92,-4.03C-54.67,-7.8 -51.2,-10.22 -47.44,-10.31C-47.36,-10.32 -47.29,-10.32 -47.21,-10.32L-17,-10.32C-16.92,-10.32 -16.85,-10.32 -16.77,-10.31C-13.01,-10.22 -9.54,-7.8 -8.29,-4.03L-0.47,19.37C-0.15,20.33 0,21.31 0,22.28Z\" style=\"fill:none;fill-rule:nonzero;stroke:var(--outline);stroke-width:4.28px;\"/>\n                </g>\n                <g id=\"Buttons\" transform=\"matrix(1,0,0,1,-2.91525,-0.392054)\">\n                    <g transform=\"matrix(0,1.28774,1.28774,0,49.8173,28.9485)\">\n                        <path d=\"M2.226,-2.226C0.997,-2.226 0,-1.229 0,0C0,1.229 0.997,2.226 2.226,2.226C3.455,2.226 4.452,1.229 4.452,0C4.452,-1.229 3.455,-2.226 2.226,-2.226\" style=\"fill:var(--outline);fill-rule:nonzero;\"/>\n                    </g>\n                    <g transform=\"matrix(0,1.28774,1.28774,0,49.8173,18.629)\">\n                        <path d=\"M2.226,-2.226C0.997,-2.226 0,-1.229 0,0C0,1.229 0.997,2.226 2.226,2.226C3.455,2.226 4.452,1.229 4.452,0C4.452,-1.229 3.455,-2.226 2.226,-2.226\" style=\"fill:var(--outline);fill-rule:nonzero;\"/>\n                    </g>\n                    <g transform=\"matrix(0,1.28774,1.28774,0,54.977,23.7887)\">\n                        <path d=\"M2.226,-2.226C0.997,-2.226 0,-1.229 0,0C0,1.229 0.997,2.226 2.226,2.226C3.455,2.226 4.452,1.229 4.452,0C4.452,-1.229 3.455,-2.226 2.226,-2.226\" style=\"fill:var(--outline);fill-rule:nonzero;\"/>\n                    </g>\n                    <g transform=\"matrix(0,1.28774,1.28774,0,44.6575,23.7887)\">\n                        <path d=\"M2.226,-2.226C0.997,-2.226 0,-1.229 0,0C0,1.229 0.997,2.226 2.226,2.226C3.455,2.226 4.452,1.229 4.452,0C4.452,-1.229 3.455,-2.226 2.226,-2.226\" style=\"fill:var(--outline);fill-rule:nonzero;\"/>\n                    </g>\n                </g>\n                <g id=\"Joystick\" transform=\"matrix(-7.57633e-21,-1.13003,-1.12991,-7.57633e-21,21.6767,21.1029)\">\n                    <path d=\"M-4.566,-4.566C-7.089,-4.566 -9.133,-2.522 -9.133,-0C-9.133,2.522 -7.089,4.566 -4.566,4.566C-2.044,4.566 -0,2.522 -0,-0C-0,-2.522 -2.044,-4.566 -4.566,-4.566\" style=\"fill:rgb(242,84,91);fill-rule:nonzero;\"/>\n                </g>\n            </g>\n        </g>\n    </g>\n</svg>\n",
        "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\joystick\\joystick.png",
        "tooltip": "Joystick: query joystick position and buttons",
        "version": "0.0.0",
        "beta": false,
        "validatorClasses": [],
        "hidden": false,
        "params": {
            "name": {
                "val": "joystick",
                "valType": "code",
                "inputType": "name",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Name",
                "hint": "Name of this Component (alphanumeric or _, no spaces)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startVal": {
                "val": 0.0,
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Start",
                "hint": "When does the Component start?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startEstim": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Expected start (s)",
                "hint": "(Optional) expected start (s), purely for representing in the timeline",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startType": {
                "val": "time (s)",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "time (s)",
                    "frame N",
                    "condition"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Start type",
                "hint": "How do you want to define your start point?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "stopVal": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": [],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop",
                "hint": "When does the Component end? (blank is endless)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "durationEstim": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Expected duration (s)",
                "hint": "(Optional) expected duration (s), purely for representing in the timeline",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "stopType": {
                "val": "duration (s)",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "duration (s)",
                    "duration (frames)",
                    "time (s)",
                    "frame N",
                    "condition"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop type",
                "hint": "How do you want to define your end point?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "saveJoystickState": {
                "val": "final",
                "valType": "str",
                "inputType": "choice",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "final",
                    "on click",
                    "every frame",
                    "never"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Save joystick state",
                "hint": "How often should the joystick state (x,y,buttons) be stored? On every video frame, every click or just at the end of the Routine?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "timeRelativeTo": {
                "val": "joystick onset",
                "valType": "str",
                "inputType": "choice",
                "categ": "Data",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [
                    "joystick onset",
                    "experiment",
                    "routine"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Time relative to",
                "hint": "What should the values of joystick.time be relative to?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "clickable": {
                "val": "",
                "valType": "list",
                "inputType": "single",
                "categ": "Data",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Clickable stimuli",
                "hint": "A comma-separated list of your stimulus names that can be \"clicked\" by the participant. e.g. target, foil",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "saveParamsClickable": {
                "val": "name,",
                "valType": "list",
                "inputType": "single",
                "categ": "Data",
                "updates": "constant",
                "allowedUpdates": [],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Store params for clicked",
                "hint": "The params (e.g. name, text), for which you want to store the current value, for the stimulus that was\"clicked\" by the joystick. Make sure that all the clickable objects have all these params.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "allowedButtons": {
                "val": "",
                "valType": "list",
                "inputType": "single",
                "categ": "Data",
                "updates": "constant",
                "allowedUpdates": [],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Allowed buttons",
                "hint": "Buttons to be read (blank for any) numbers separated by commas",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "deviceNumber": {
                "val": "0",
                "valType": "int",
                "inputType": "single",
                "categ": "Device",
                "updates": "constant",
                "allowedUpdates": [],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Device number",
                "hint": "Device number, if you have multiple devices which one do you want (0, 1, 2...)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "saveStartStop": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Save onset/offset times",
                "hint": "Store the onset/offset times in the data file (as well as in the log file).",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "syncScreenRefresh": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Sync timing with screen refresh",
                "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "disabled": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Disable Component",
                "hint": "Disable this Component",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "forceEndRoutineOnPress": {
                "val": "any click",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [
                    "never",
                    "any click",
                    "valid click"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "End Routine on press",
                "hint": "Should a button press force the end of the Routine (e.g end the trial)?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            }
        }
    },
    "KeyboardComponent": {
        "__class__": "psychopy.experiment.components.keyboard:KeyboardComponent",
        "__name__": "KeyboardComponent",
        "categories": [
            "Responses"
        ],
        "targets": [
            "PsychoPy",
            "PsychoJS"
        ],
        "plugin": null,
        "iconSVG": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 32 32\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:space=\"preserve\" xmlns:serif=\"http://www.serif.com/\" style=\"fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2;\">\n    <g transform=\"matrix(1,0,0,1,-242,0)\">\n        <g id=\"light-components-KeyboardComponent\" serif:id=\"light/components/KeyboardComponent\" transform=\"matrix(0.451519,0,0,0.451519,242,0)\">\n            <rect x=\"0\" y=\"0\" width=\"70.872\" height=\"70.866\" style=\"fill:none;\"/>\n            <g id=\"Keyboard-Component\" serif:id=\"Keyboard Component\" transform=\"matrix(0.962679,0,0,0.962679,1.15725,-0.776977)\">\n                <g transform=\"matrix(1,0,0,1,9.3671,54.3903)\">\n                    <path d=\"M0,-35.553C-3.295,-35.553 -5.968,-32.882 -5.968,-29.585L-5.968,-3.967C-5.968,-0.672 -3.295,2 0,2L52.482,2C55.778,2 58.449,-0.671 58.449,-3.967C58.449,-3.967 58.449,-29.585 58.449,-29.585C58.449,-32.882 55.777,-35.553 52.482,-35.553C52.482,-35.553 0,-35.553 0,-35.553ZM0,-31.553L52.482,-31.553C53.569,-31.553 54.449,-30.672 54.449,-29.585L54.449,-3.967C54.449,-2.881 53.568,-2 52.482,-2C52.482,-2 -0,-2 -0,-2C-1.087,-2 -1.968,-2.88 -1.968,-3.967C-1.968,-3.967 -1.968,-29.585 -1.968,-29.585C-1.968,-30.672 -1.087,-31.553 0,-31.553Z\" style=\"fill:var(--outline);\"/>\n                </g>\n                <g id=\"Keys\">\n                    <g transform=\"matrix(-1,0,0,1,72.153,23.9171)\">\n                        <rect x=\"18.035\" y=\"21.058\" width=\"36.083\" height=\"4.833\" style=\"fill:rgb(242,84,91);\"/>\n                    </g>\n                    <g transform=\"matrix(-1,0,0,1,27.091,23.9171)\">\n                        <rect x=\"10.66\" y=\"21.058\" width=\"5.771\" height=\"4.833\" style=\"fill:var(--outline);\"/>\n                    </g>\n                    <g transform=\"matrix(-1,0,0,1,116.279,23.9171)\">\n                        <rect x=\"55.723\" y=\"21.058\" width=\"4.833\" height=\"4.833\" style=\"fill:var(--outline);\"/>\n                    </g>\n                    <g transform=\"matrix(-1,0,0,1,116.279,-1.8329)\">\n                        <rect x=\"55.723\" y=\"33.933\" width=\"4.833\" height=\"4.833\" style=\"fill:var(--outline);\"/>\n                    </g>\n                    <g transform=\"matrix(-1,0,0,1,113.862,-14.7069)\">\n                        <rect x=\"53.306\" y=\"40.37\" width=\"7.25\" height=\"4.833\" style=\"fill:rgb(2,169,234);\"/>\n                    </g>\n                    <g transform=\"matrix(-1,0,0,1,113.862,11.0431)\">\n                        <rect x=\"53.306\" y=\"27.495\" width=\"7.25\" height=\"4.833\" style=\"fill:rgb(2,169,234);\"/>\n                    </g>\n                    <g transform=\"matrix(-1,0,0,1,103.403,-1.8329)\">\n                        <rect x=\"49.285\" y=\"33.933\" width=\"4.833\" height=\"4.833\" style=\"fill:var(--outline);\"/>\n                    </g>\n                    <g transform=\"matrix(-1,0,0,1,90.529,-1.8329)\">\n                        <rect x=\"42.848\" y=\"33.933\" width=\"4.833\" height=\"4.833\" style=\"fill:var(--outline);\"/>\n                    </g>\n                    <g transform=\"matrix(-1,0,0,1,77.653,-2.3209)\">\n                        <rect x=\"36.41\" y=\"34.177\" width=\"4.833\" height=\"4.833\" style=\"fill:var(--outline);\"/>\n                    </g>\n                    <g transform=\"matrix(-1,0,0,1,64.779,-2.3209)\">\n                        <rect x=\"29.973\" y=\"34.177\" width=\"4.833\" height=\"4.833\" style=\"fill:var(--outline);\"/>\n                    </g>\n                    <g transform=\"matrix(-1,0,0,1,51.903,-2.3209)\">\n                        <rect x=\"23.535\" y=\"34.177\" width=\"4.833\" height=\"4.833\" style=\"fill:var(--outline);\"/>\n                    </g>\n                    <g transform=\"matrix(-1,0,0,1,39.029,-2.3209)\">\n                        <rect x=\"17.098\" y=\"34.177\" width=\"4.833\" height=\"4.833\" style=\"fill:var(--outline);\"/>\n                    </g>\n                    <g transform=\"matrix(-1,0,0,1,26.153,-2.3209)\">\n                        <rect x=\"10.66\" y=\"34.177\" width=\"4.833\" height=\"4.833\" style=\"fill:var(--outline);\"/>\n                    </g>\n                    <g transform=\"matrix(-1,0,0,1,98.571,11.0431)\">\n                        <rect x=\"46.869\" y=\"27.495\" width=\"4.833\" height=\"4.833\" style=\"fill:var(--outline);\"/>\n                    </g>\n                    <g transform=\"matrix(-1,0,0,1,85.695,11.0431)\">\n                        <rect x=\"40.431\" y=\"27.495\" width=\"4.833\" height=\"4.833\" style=\"fill:var(--outline);\"/>\n                    </g>\n                    <g transform=\"matrix(-1,0,0,1,72.821,10.5551)\">\n                        <rect x=\"33.994\" y=\"27.739\" width=\"4.833\" height=\"4.833\" style=\"fill:var(--outline);\"/>\n                    </g>\n                    <g transform=\"matrix(-1,0,0,1,59.945,10.5551)\">\n                        <rect x=\"27.556\" y=\"27.739\" width=\"4.833\" height=\"4.833\" style=\"fill:var(--outline);\"/>\n                    </g>\n                    <g transform=\"matrix(-1,0,0,1,47.071,10.5551)\">\n                        <rect x=\"21.119\" y=\"27.739\" width=\"4.833\" height=\"4.833\" style=\"fill:var(--outline);\"/>\n                    </g>\n                    <g transform=\"matrix(-1,0,0,1,30.174,10.5551)\">\n                        <rect x=\"10.66\" y=\"27.739\" width=\"8.854\" height=\"4.833\" style=\"fill:rgb(2,169,234);\"/>\n                    </g>\n                    <g transform=\"matrix(-1,0,0,1,98.571,-14.7069)\">\n                        <rect x=\"46.869\" y=\"40.37\" width=\"4.833\" height=\"4.833\" style=\"fill:var(--outline);\"/>\n                    </g>\n                    <g transform=\"matrix(-1,0,0,1,85.695,-14.7069)\">\n                        <rect x=\"40.431\" y=\"40.37\" width=\"4.833\" height=\"4.833\" style=\"fill:var(--outline);\"/>\n                    </g>\n                    <g transform=\"matrix(-1,0,0,1,72.821,-15.1949)\">\n                        <rect x=\"33.994\" y=\"40.614\" width=\"4.833\" height=\"4.833\" style=\"fill:var(--outline);\"/>\n                    </g>\n                    <g transform=\"matrix(-1,0,0,1,59.945,-15.1949)\">\n                        <rect x=\"27.556\" y=\"40.614\" width=\"4.833\" height=\"4.833\" style=\"fill:var(--outline);\"/>\n                    </g>\n                    <g transform=\"matrix(-1,0,0,1,47.071,-15.1949)\">\n                        <rect x=\"21.119\" y=\"40.614\" width=\"4.833\" height=\"4.833\" style=\"fill:var(--outline);\"/>\n                    </g>\n                    <g transform=\"matrix(-1,0,0,1,34.195,-15.1949)\">\n                        <rect x=\"14.681\" y=\"40.614\" width=\"4.833\" height=\"4.833\" style=\"fill:var(--outline);\"/>\n                    </g>\n                </g>\n            </g>\n        </g>\n    </g>\n</svg>\n",
        "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\keyboard\\keyboard.png",
        "tooltip": "Keyboard: check and record keypresses",
        "version": "0.0.0",
        "beta": false,
        "validatorClasses": [],
        "hidden": false,
        "params": {
            "name": {
                "val": "key_resp",
                "valType": "code",
                "inputType": "name",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Name",
                "hint": "Name of this Component (alphanumeric or _, no spaces)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startVal": {
                "val": 0.0,
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Start",
                "hint": "When does the Component start?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startEstim": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Expected start (s)",
                "hint": "(Optional) expected start (s), purely for representing in the timeline",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startType": {
                "val": "time (s)",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "time (s)",
                    "frame N",
                    "condition"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Start type",
                "hint": "How do you want to define your start point?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "stopVal": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": [],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop",
                "hint": "When does the Component end? (blank is endless)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "durationEstim": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Expected duration (s)",
                "hint": "(Optional) expected duration (s), purely for representing in the timeline",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "stopType": {
                "val": "duration (s)",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "duration (s)",
                    "duration (frames)",
                    "time (s)",
                    "frame N",
                    "condition"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop type",
                "hint": "How do you want to define your end point?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "forceEndRoutine": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Force end of Routine",
                "hint": "Should a response force the end of the Routine (e.g end the trial)?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "registerOn": {
                "val": "press",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [
                    "press",
                    "release"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Register keypress on...",
                "hint": "When should the keypress be registered? As soon as pressed, or when released?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "allowedKeys": {
                "val": "'y','n','left','right','space'",
                "valType": "list",
                "inputType": "single",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Allowed keys",
                "hint": "A comma-separated list of keys (with quotes), such as 'q','right','space','left'",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "store": {
                "val": "last key",
                "valType": "str",
                "inputType": "choice",
                "categ": "Data",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [
                    "last key",
                    "first key",
                    "all keys",
                    "nothing"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Store",
                "hint": "Choose which (if any) responses to store at the end of a trial",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "storeCorrect": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Store correct",
                "hint": "Do you want to save the response as correct/incorrect?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "correctAns": {
                "val": "",
                "valType": "str",
                "inputType": "single",
                "categ": "Data",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Correct answer",
                "hint": "What is the 'correct' key? Might be helpful to add a correctAns column and use $correctAns to compare to the key press.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": [
                        {
                            "param": "storeCorrect",
                            "condition": "== True"
                        }
                    ]
                }
            },
            "saveStartStop": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Save onset/offset times",
                "hint": "Store the onset/offset times in the data file (as well as in the log file).",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "syncScreenRefresh": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Sync timing with screen",
                "hint": "A reaction time to a visual stimulus should be based on when the screen flipped",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "disabled": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Disable Component",
                "hint": "Disable this Component",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "discard previous": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Discard previous",
                "hint": "Do you want to discard all responses occurring before the onset of this Component?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            }
        }
    },
    "MicrophoneComponent": {
        "__class__": "psychopy.experiment.components.microphone:MicrophoneComponent",
        "__name__": "MicrophoneComponent",
        "categories": [
            "Responses"
        ],
        "targets": [
            "PsychoPy",
            "PsychoJS"
        ],
        "plugin": null,
        "iconSVG": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 32 32\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:space=\"preserve\" xmlns:serif=\"http://www.serif.com/\" style=\"fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2;\">\n    <g id=\"light-components-MicrophoneComponent\" serif:id=\"light/components/MicrophoneComponent\" transform=\"matrix(0.451519,0,0,0.451519,0,0)\">\n        <rect x=\"0\" y=\"0\" width=\"70.872\" height=\"70.866\" style=\"fill:none;\"/>\n        <g id=\"Microphone-Component\" serif:id=\"Microphone Component\" transform=\"matrix(1.03258,0,0,1.03258,-3.05569,0.0431186)\">\n            <g transform=\"matrix(1,0,0,1,57.8779,20.598)\">\n                <path d=\"M0,9.902L-11.564,21.466C-11.343,19.753 -11.208,17.99 -11.174,16.193C-11.14,14.328 -12.632,12.768 -14.497,12.734C-16.311,12.683 -17.922,14.192 -17.956,16.057C-18.041,20.499 -18.787,24.823 -20.059,28.265C-23.568,29.333 -27.536,28.468 -30.3,25.705L-31.317,24.687L-41.202,14.802C-44.95,11.055 -45.187,5.137 -41.914,1.119L-29.045,13.988C-28.367,14.65 -27.502,14.989 -26.637,14.989C-25.773,14.989 -24.908,14.65 -24.247,13.988C-22.924,12.666 -22.924,10.512 -24.247,9.19L-37.167,-3.73L-35.302,-5.595L-22.788,6.901C-22.127,7.562 -21.262,7.901 -20.398,7.901C-19.533,7.901 -18.668,7.562 -18.007,6.901C-16.667,5.578 -16.667,3.442 -18.007,2.102L-30.503,-10.394L-28.638,-12.259L-16.549,-0.187C-15.887,0.475 -15.023,0.814 -14.158,0.814C-13.293,0.814 -12.412,0.475 -11.75,-0.187C-10.428,-1.509 -10.428,-3.646 -11.75,-4.968L-23.67,-16.888C-19.702,-19.431 -14.362,-18.956 -10.902,-15.498L0,-4.595C4.002,-0.594 4.002,5.9 0,9.902\" style=\"fill:rgb(242,84,91);fill-rule:nonzero;\"/>\n            </g>\n            <g transform=\"matrix(1,0,0,1,48.62,37.9944)\">\n                <path d=\"M0,23.738C0,26.332 -7.054,28.452 -15.769,28.452C-24.467,28.452 -31.521,26.332 -31.521,23.738C-31.521,22.042 -28.57,20.567 -24.128,19.736C-27.434,15.362 -29.554,8.19 -29.622,-0.271L-22.059,7.291C-20.788,13.632 -18.126,17.515 -16.125,17.549L-16.091,17.549C-14.785,17.549 -13.073,15.786 -11.716,13.022C-11.377,12.361 -11.089,11.632 -10.801,10.869C-9.529,7.427 -8.783,3.103 -8.698,-1.34C-8.664,-3.205 -7.054,-4.714 -5.239,-4.663C-3.374,-4.629 -1.882,-3.069 -1.916,-1.204C-1.95,0.593 -2.086,2.357 -2.306,4.069C-2.849,8.546 -3.985,12.666 -5.629,16.006C-6.29,17.38 -7.037,18.6 -7.85,19.652C-3.154,20.465 0,21.992 0,23.738\" style=\"fill:var(--outline);fill-rule:nonzero;\"/>\n            </g>\n        </g>\n    </g>\n</svg>\n",
        "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\microphone\\microphone.png",
        "tooltip": "Microphone: basic sound capture (fixed onset & duration), okay for spoken words",
        "version": "2021.2.0",
        "beta": false,
        "validatorClasses": [],
        "hidden": false,
        "params": {
            "name": {
                "val": "mic",
                "valType": "code",
                "inputType": "name",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Name",
                "hint": "Name of this Component (alphanumeric or _, no spaces)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startVal": {
                "val": 0.0,
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Start",
                "hint": "When does the Component start?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startEstim": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Expected start (s)",
                "hint": "(Optional) expected start (s), purely for representing in the timeline",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startType": {
                "val": "time (s)",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "time (s)",
                    "frame N",
                    "condition"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Start type",
                "hint": "How do you want to define your start point?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "stopVal": {
                "val": 2.0,
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": [],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop",
                "hint": "When does the Component end? (blank is endless)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "durationEstim": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Expected duration (s)",
                "hint": "(Optional) expected duration (s), purely for representing in the timeline",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "stopType": {
                "val": "duration (s)",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "duration (s)"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop type",
                "hint": "The duration of the recording in seconds; blank = 0 sec",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "deviceLabel": {
                "val": "",
                "valType": "device",
                "inputType": "device",
                "categ": "Device",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "python:///psychopy.experiment.components.microphone:MicrophoneDeviceBackend"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Device",
                "hint": "The named device from Device Manager to use for this Component.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "transcribe": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Transcription",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Transcribe audio",
                "hint": "Whether to transcribe the audio recording and store the transcription",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "transcribeBackend": {
                "val": "none",
                "valType": "code",
                "inputType": "choice",
                "categ": "Transcription",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "none",
                    "google"
                ],
                "allowedLabels": [
                    "None",
                    "Google"
                ],
                "ctrlParams": {},
                "label": "Transcription backend",
                "hint": "What transcription service to use to transcribe audio?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": [
                        {
                            "param": "transcribe",
                            "condition": "==True"
                        }
                    ]
                }
            },
            "transcribeLang": {
                "val": "en-US",
                "valType": "str",
                "inputType": "single",
                "categ": "Transcription",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Transcription language",
                "hint": "What language you expect the recording to be spoken in, e.g. en-US for English",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "transcribeBackend",
                            "condition": "=='google'"
                        }
                    ],
                    "enabled": [
                        {
                            "param": "transcribe",
                            "condition": "==True"
                        }
                    ]
                }
            },
            "transcribeWords": {
                "val": "",
                "valType": "list",
                "inputType": "single",
                "categ": "Transcription",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Expected words",
                "hint": "Set list of words to listen for - if blank will listen for all words in chosen language. \n\nIf using the built-in transcriber, you can set a minimum % confidence level using a colon after the word, e.g. 'red:100', 'green:80'. Otherwise, default confidence level is 80%.",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "transcribeBackend",
                            "condition": "=='google'"
                        }
                    ],
                    "enabled": [
                        {
                            "param": "transcribe",
                            "condition": "==True"
                        }
                    ]
                }
            },
            "saveStartStop": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Save onset/offset times",
                "hint": "Store the onset/offset times in the data file (as well as in the log file).",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "syncScreenRefresh": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Sync timing with screen refresh",
                "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "disabled": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Disable Component",
                "hint": "Disable this Component",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "outputType": {
                "val": "default",
                "valType": "code",
                "inputType": "choice",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "default",
                    "aiff",
                    "au",
                    "avr",
                    "caf",
                    "flac",
                    "htk",
                    "svx",
                    "mat4",
                    "mat5",
                    "mpc2k",
                    "mp3",
                    "ogg",
                    "paf",
                    "pvf",
                    "raw",
                    "rf64",
                    "sd2",
                    "sds",
                    "ircam",
                    "voc",
                    "w64",
                    "wav",
                    "nist",
                    "wavex",
                    "wve",
                    "xi"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Output file type",
                "hint": "What file type should output audio files be saved as?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "policyWhenFull": {
                "val": "warn",
                "valType": "str",
                "inputType": "choice",
                "categ": "Data",
                "updates": "set every repeat",
                "allowedUpdates": null,
                "allowedVals": [
                    "warn",
                    "roll",
                    "error"
                ],
                "allowedLabels": [
                    "Discard incoming data",
                    "Clear oldest data",
                    "Raise error"
                ],
                "ctrlParams": {},
                "label": "Full buffer policy",
                "hint": "What to do when we reach the max amount of audio data which can be safely stored in memory?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "speakTimes": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Transcription",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Speaking start / stop times",
                "hint": "Tick this to save times when the participant starts and stops speaking",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "transcribeBackend",
                            "condition": "=='Whisper'"
                        }
                    ],
                    "enabled": [
                        {
                            "param": "transcribe",
                            "condition": "==True"
                        }
                    ]
                }
            },
            "trimSilent": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Trim silent",
                "hint": "Trim periods of silence from the output file",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "transcribeWhisperModel": {
                "val": "base",
                "valType": "code",
                "inputType": "choice",
                "categ": "Transcription",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "tiny",
                    "base",
                    "small",
                    "medium",
                    "large",
                    "tiny.en",
                    "base.en",
                    "small.en",
                    "medium.en"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Whisper model",
                "hint": "Which model of Whisper AI should be used for transcription? Details of each model are available here at github.com/openai/whisper",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "transcribeBackend",
                            "condition": "=='Whisper'"
                        }
                    ],
                    "enabled": [
                        {
                            "param": "transcribe",
                            "condition": "==True"
                        }
                    ]
                }
            },
            "transcribeWhisperDevice": {
                "val": "auto",
                "valType": "code",
                "inputType": "choice",
                "categ": "Transcription",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "auto",
                    "gpu",
                    "cpu"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Whisper device",
                "hint": "Which device to use for transcription?",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "transcribeBackend",
                            "condition": "=='Whisper'"
                        }
                    ],
                    "enabled": [
                        {
                            "param": "transcribe",
                            "condition": "==True"
                        }
                    ]
                }
            }
        }
    },
    "MouseComponent": {
        "__class__": "psychopy.experiment.components.mouse:MouseComponent",
        "__name__": "MouseComponent",
        "categories": [
            "Responses"
        ],
        "targets": [
            "PsychoPy",
            "PsychoJS"
        ],
        "plugin": null,
        "iconSVG": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 32 32\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:space=\"preserve\" xmlns:serif=\"http://www.serif.com/\" style=\"fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2;\">\n    <g id=\"light-components-MouseComponent\" serif:id=\"light/components/MouseComponent\" transform=\"matrix(0.451519,0,0,0.451519,0,0)\">\n        <rect x=\"0\" y=\"0\" width=\"70.872\" height=\"70.866\" style=\"fill:none;\"/>\n        <g id=\"Mouse-Component\" serif:id=\"Mouse Component\" transform=\"matrix(0.893614,0,0,0.893614,22.5843,62.01)\">\n            <path d=\"M0,-59.482C-2.987,-59.482 -5.416,-57.055 -5.416,-54.072L-5.416,-14.552C-5.416,-11.569 -2.987,-9.142 0,-9.142C1.354,-9.142 2.652,-9.652 3.655,-10.577L7.94,-14.526L13.266,-3.119C14.15,-1.224 16.074,0 18.166,0C18.921,0 19.655,-0.155 20.347,-0.46L25.391,-2.685C28.088,-3.875 29.329,-6.945 28.215,-9.675L23.504,-21.222L28.97,-21.424C31.152,-21.505 33.06,-22.877 33.83,-24.92C34.6,-26.963 34.073,-29.253 32.488,-30.754L3.708,-57.999C2.697,-58.955 1.381,-59.482 0,-59.482M0,-55.482C0.334,-55.482 0.675,-55.362 0.958,-55.094L29.738,-27.849C30.643,-26.992 30.069,-25.467 28.822,-25.421L19.65,-25.082C18.673,-25.046 18.03,-24.05 18.399,-23.145L24.511,-8.164C24.799,-7.458 24.474,-6.652 23.777,-6.345L18.733,-4.12C18.548,-4.038 18.355,-4 18.166,-4C17.635,-4 17.128,-4.301 16.89,-4.812L10.064,-19.432C9.82,-19.956 9.308,-20.244 8.787,-20.244C8.45,-20.244 8.11,-20.124 7.836,-19.871L0.944,-13.518C0.663,-13.259 0.328,-13.142 0,-13.142C-0.725,-13.142 -1.416,-13.708 -1.416,-14.552L-1.416,-54.072C-1.416,-54.917 -0.724,-55.482 0,-55.482\" style=\"fill:var(--outline);fill-rule:nonzero;\"/>\n        </g>\n    </g>\n</svg>\n",
        "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\mouse\\mouse.png",
        "tooltip": "Mouse: query mouse position and buttons",
        "version": "0.0.0",
        "beta": false,
        "validatorClasses": [],
        "hidden": false,
        "params": {
            "name": {
                "val": "mouse",
                "valType": "code",
                "inputType": "name",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Name",
                "hint": "Name of this Component (alphanumeric or _, no spaces)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startVal": {
                "val": 0.0,
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Start",
                "hint": "When does the Component start?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startEstim": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Expected start (s)",
                "hint": "(Optional) expected start (s), purely for representing in the timeline",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startType": {
                "val": "time (s)",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "time (s)",
                    "frame N",
                    "condition"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Start type",
                "hint": "How do you want to define your start point?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "stopVal": {
                "val": 1.0,
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": [],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop",
                "hint": "When does the Component end? (blank is endless)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "durationEstim": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Expected duration (s)",
                "hint": "(Optional) expected duration (s), purely for representing in the timeline",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "stopType": {
                "val": "duration (s)",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "duration (s)",
                    "duration (frames)",
                    "time (s)",
                    "frame N",
                    "condition"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop type",
                "hint": "How do you want to define your end point?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "forceEndRoutineOnPress": {
                "val": "any click",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [
                    "never",
                    "any click",
                    "valid click",
                    "correct click"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "End Routine on press",
                "hint": "Should a button press force the end of the Routine (e.g end the trial)?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "saveMouseState": {
                "val": "on click",
                "valType": "str",
                "inputType": "choice",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "final",
                    "on click",
                    "on valid click",
                    "every frame",
                    "never"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Save mouse state",
                "hint": "How often should the mouse state (x,y,buttons) be stored? On every video frame, every click or just at the end of the Routine?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "timeRelativeTo": {
                "val": "mouse onset",
                "valType": "str",
                "inputType": "choice",
                "categ": "Data",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [
                    "mouse onset",
                    "experiment",
                    "routine"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Time relative to",
                "hint": "What should the values of mouse.time should be relative to?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "newClicksOnly": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "New clicks only",
                "hint": "If the mouse button is already down when we start checking then wait for it to be released before recording as a new click.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "clickable": {
                "val": "",
                "valType": "list",
                "inputType": "single",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Clickable stimuli",
                "hint": "A comma-separated list of your stimulus names that can be \"clicked\" by the participant. e.g. target, foil",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "saveParamsClickable": {
                "val": "name,",
                "valType": "list",
                "inputType": "single",
                "categ": "Data",
                "updates": "constant",
                "allowedUpdates": [],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Store params for clicked",
                "hint": "The params (e.g. name, text), for which you want to store the current value, for the stimulus that was\"clicked\" by the mouse. Make sure that all the clickable objects have all these params.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "saveStartStop": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Save onset/offset times",
                "hint": "Store the onset/offset times in the data file (as well as in the log file).",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "syncScreenRefresh": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Sync timing with screen refresh",
                "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "disabled": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Disable Component",
                "hint": "Disable this Component",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "storeCorrect": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Store correct",
                "hint": "Do you want to save the response as correct/incorrect?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "correctAns": {
                "val": "",
                "valType": "list",
                "inputType": "single",
                "categ": "Data",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Correct answer",
                "hint": "What is the 'correct' object? To specify an area, remember that you can create a shape Component with 0 opacity.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": [
                        {
                            "param": "storeCorrect",
                            "condition": "== True"
                        }
                    ]
                }
            }
        }
    },
    "MovieComponent": {
        "__class__": "psychopy.experiment.components.movie:MovieComponent",
        "__name__": "MovieComponent",
        "categories": [
            "Stimuli"
        ],
        "targets": [
            "PsychoPy",
            "PsychoJS"
        ],
        "plugin": null,
        "iconSVG": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 32 32\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:space=\"preserve\" xmlns:serif=\"http://www.serif.com/\" style=\"fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2;\">\n    <g id=\"light-components-MovieComponent\" serif:id=\"light/components/MovieComponent\" transform=\"matrix(0.451519,0,0,0.451519,0,0)\">\n        <rect x=\"0\" y=\"0\" width=\"70.872\" height=\"70.866\" style=\"fill:none;\"/>\n        <g id=\"Movie-Component\" serif:id=\"Movie Component\" transform=\"matrix(1.04716,0,0,1.04716,-2.02155,-1.4329)\">\n            <g id=\"Reel\" transform=\"matrix(1,0,0,1,8.5145,16.0406)\">\n                <path d=\"M0,38.33C-0.491,38.33 -0.889,37.932 -0.889,37.441L-0.889,32.199C-0.889,31.708 -0.491,31.31 0,31.31L3.802,31.31C4.293,31.31 4.691,31.708 4.691,32.199L4.691,37.441C4.691,37.932 4.293,38.33 3.802,38.33L0,38.33ZM50.52,38.33C50.029,38.33 49.631,37.932 49.631,37.441L49.631,32.199C49.631,31.708 50.029,31.31 50.52,31.31L54.322,31.31C54.813,31.31 55.211,31.708 55.211,32.199L55.211,37.441C55.211,37.932 54.813,38.33 54.322,38.33L50.52,38.33ZM0,27.66C-0.491,27.66 -0.889,27.262 -0.889,26.771L-0.889,21.529C-0.889,21.038 -0.491,20.64 0,20.64L3.802,20.64C4.293,20.64 4.691,21.038 4.691,21.529L4.691,26.771C4.691,27.262 4.293,27.66 3.802,27.66L0,27.66ZM50.52,27.66C50.029,27.66 49.631,27.262 49.631,26.771L49.631,21.529C49.631,21.038 50.029,20.64 50.52,20.64L54.322,20.64C54.813,20.64 55.211,21.038 55.211,21.529L55.211,26.771C55.211,27.262 54.813,27.66 54.322,27.66L50.52,27.66ZM0,17.05C-0.491,17.05 -0.889,16.652 -0.889,16.161L-0.889,10.929C-0.889,10.438 -0.491,10.04 0,10.04L3.802,10.04C4.293,10.04 4.691,10.438 4.691,10.929L4.691,16.161C4.691,16.652 4.293,17.05 3.802,17.05L0,17.05ZM50.52,17.05C50.029,17.05 49.631,16.652 49.631,16.161L49.631,10.929C49.631,10.438 50.029,10.04 50.52,10.04L54.322,10.04C54.813,10.04 55.211,10.438 55.211,10.929L55.211,16.161C55.211,16.652 54.813,17.05 54.322,17.05L50.52,17.05ZM0,6.45C-0.491,6.45 -0.889,6.052 -0.889,5.561L-0.889,0.319C-0.889,-0.172 -0.491,-0.57 0,-0.57L3.802,-0.57C4.293,-0.57 4.691,-0.172 4.691,0.319L4.691,5.561C4.691,6.052 4.293,6.45 3.802,6.45L0,6.45ZM50.52,6.45C50.029,6.45 49.631,6.052 49.631,5.561L49.631,0.319C49.631,-0.172 50.029,-0.57 50.52,-0.57L54.322,-0.57C54.813,-0.57 55.211,-0.172 55.211,0.319L55.211,5.561C55.211,6.052 54.813,6.45 54.322,6.45L50.52,6.45ZM10.617,42.61C8.504,42.61 6.791,40.897 6.791,38.785L6.791,-0.455C6.791,-2.567 8.504,-4.28 10.617,-4.28L43.896,-4.28C46.009,-4.28 47.721,-2.567 47.721,-0.455L47.721,38.785C47.721,40.897 46.009,42.61 43.896,42.61L10.617,42.61ZM50.112,-7.94L4.4,-7.94C-0.498,-7.94 -4.469,-3.969 -4.469,0.929L-4.469,38.29C-4.469,42.7 -0.889,46.27 3.511,46.27L50.112,46.27C55.011,46.27 58.981,42.299 58.981,37.401L58.981,0.929C58.981,-3.969 55.011,-7.94 50.112,-7.94\" style=\"fill:var(--outline);fill-rule:nonzero;\"/>\n            </g>\n            <g id=\"Play\" transform=\"matrix(1,0,0,1,44.2728,33.2261)\">\n                <path d=\"M0,3.959L-14.615,12.78C-16.156,13.71 -18.122,12.6 -18.122,10.8L-18.122,-6.841C-18.122,-8.641 -16.156,-9.751 -14.615,-8.821L0,0C1.49,0.899 1.49,3.06 0,3.959\" style=\"fill:rgb(242,84,91);fill-rule:nonzero;\"/>\n            </g>\n        </g>\n    </g>\n</svg>\n",
        "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\movie\\movie.png",
        "tooltip": "Movie: play movie files",
        "version": "0.0.0",
        "beta": false,
        "validatorClasses": [
            "VisualValidatorRoutine"
        ],
        "hidden": false,
        "params": {
            "name": {
                "val": "movie",
                "valType": "code",
                "inputType": "name",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Name",
                "hint": "Name of this Component (alphanumeric or _, no spaces)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startVal": {
                "val": 0.0,
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Start",
                "hint": "When does the Component start?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startEstim": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Expected start (s)",
                "hint": "(Optional) expected start (s), purely for representing in the timeline",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startType": {
                "val": "time (s)",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "time (s)",
                    "frame N",
                    "condition"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Start type",
                "hint": "How do you want to define your start point?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "stopVal": {
                "val": 1.0,
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": [],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop",
                "hint": "When does the Component end? (blank to use the duration of the media)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "durationEstim": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Expected duration (s)",
                "hint": "(Optional) expected duration (s), purely for representing in the timeline",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "stopType": {
                "val": "duration (s)",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "duration (s)",
                    "duration (frames)",
                    "time (s)",
                    "frame N",
                    "condition"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop type",
                "hint": "How do you want to define your end point?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "opacity": {
                "val": "",
                "valType": "num",
                "inputType": "single",
                "categ": "Appearance",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Opacity",
                "hint": "Opacity of the stimulus (1=opaque, 0=fully transparent, 0.5=translucent). Leave blank for each color to have its own opacity (recommended if any color is None).",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "size": {
                "val": [
                    0.5,
                    0.5
                ],
                "valType": "list",
                "inputType": "single",
                "categ": "Layout",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Size [w,h]",
                "hint": "Size of this stimulus (either a single value or x,y pair, e.g. 2.5, [1,2] ",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "pos": {
                "val": [
                    0,
                    0
                ],
                "valType": "list",
                "inputType": "single",
                "categ": "Layout",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Position [x,y]",
                "hint": "Position of this stimulus (e.g. [1,2] )",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "units": {
                "val": "from exp settings",
                "valType": "str",
                "inputType": "choice",
                "categ": "Layout",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "from exp settings",
                    "deg",
                    "cm",
                    "pix",
                    "norm",
                    "height",
                    "degFlatPos",
                    "degFlat"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Spatial units",
                "hint": "Units of dimensions for this stimulus",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "anchor": {
                "val": "center",
                "valType": "str",
                "inputType": "choice",
                "categ": "Layout",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [
                    "center",
                    "top-center",
                    "bottom-center",
                    "center-left",
                    "center-right",
                    "top-left",
                    "top-right",
                    "bottom-left",
                    "bottom-right"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Anchor",
                "hint": "Which point on the stimulus should be anchored to its exact position?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "ori": {
                "val": 0,
                "valType": "num",
                "inputType": "spin",
                "categ": "Layout",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [
                    -360,
                    360
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Orientation",
                "hint": "Orientation of this stimulus (in deg)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "movie": {
                "val": "",
                "valType": "file",
                "inputType": "file",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Movie file",
                "hint": "A filename for the movie (including path)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "forceEndRoutine": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": [],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Force end of Routine",
                "hint": "Should the end of the movie cause the end of the Routine (e.g. trial)?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "loop": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Playback",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Loop playback",
                "hint": "Whether the movie should loop back to the beginning on completion.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "No audio": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Playback",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "No audio",
                "hint": "Prevent the audio stream from being loaded/processed (moviepy and opencv only)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "backend": {
                "val": "ffpyplayer",
                "valType": "str",
                "inputType": "choice",
                "categ": "Playback",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "ffpyplayer",
                    "moviepy",
                    "opencv",
                    "vlc"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Backend",
                "hint": "What underlying lib to use for loading movies",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "saveStartStop": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Save onset/offset times",
                "hint": "Store the onset/offset times in the data file (as well as in the log file).",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "syncScreenRefresh": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Sync timing with screen refresh",
                "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "disabled": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Disable Component",
                "hint": "Disable this Component",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "contrast": {
                "val": 1,
                "valType": "num",
                "inputType": "single",
                "categ": "Appearance",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Contrast",
                "hint": "Contrast of the stimulus (1.0=unchanged contrast, 0.5=decrease contrast, 0.0=uniform/no contrast, -0.5=slightly inverted, -1.0=totally inverted)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "validator": {
                "val": "",
                "valType": "code",
                "inputType": "validator",
                "categ": "Testing",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "VisualValidatorRoutine"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Validate with...",
                "hint": "Name of validator Component/Routine to use to check the timing of this stimulus.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "volume": {
                "val": 1,
                "valType": "num",
                "inputType": "single",
                "categ": "Playback",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Volume",
                "hint": "How loud should audio be played?",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "No audio",
                            "condition": "==False"
                        }
                    ],
                    "enabled": []
                }
            },
            "stopWithRoutine": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Playback",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop with Routine?",
                "hint": "Should playback cease when the Routine ends? Untick to continue playing after the Routine has finished.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            }
        }
    },
    "PanoramaComponent": {
        "__class__": "psychopy.experiment.components.panorama:PanoramaComponent",
        "__name__": "PanoramaComponent",
        "categories": [
            "Stimuli"
        ],
        "targets": [
            "PsychoPy"
        ],
        "plugin": null,
        "iconSVG": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 32 32\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:space=\"preserve\" xmlns:serif=\"http://www.serif.com/\" style=\"fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2;\">\n    <g id=\"light-components-PanoramaComponent\" serif:id=\"light/components/PanoramaComponent\" transform=\"matrix(0.451519,0,0,0.451519,0,0)\">\n        <rect x=\"0\" y=\"0\" width=\"70.872\" height=\"70.866\" style=\"fill:none;\"/>\n        <g id=\"Panorama-Component\" serif:id=\"Panorama Component\" transform=\"matrix(1.52894,0,0,1.52894,-19.7149,-18.9446)\">\n            <g id=\"Frame\" transform=\"matrix(1,0,0,1,-151.643,-404.699)\">\n                <g id=\"Image-Component\" serif:id=\"Image Component\">\n                    <path id=\"Frame1\" serif:id=\"Frame\" d=\"M209.442,453.925L209.442,426.604C209.442,423.463 206.896,420.917 203.755,420.917C193.061,427.853 182.366,427.907 171.672,420.917C168.532,420.917 165.986,423.463 165.986,426.604L165.986,453.925C165.986,457.066 168.532,459.612 171.672,459.612C181.92,454.555 192.618,454.594 203.755,459.612C206.896,459.612 209.442,457.066 209.442,453.925Z\" style=\"fill:none;\"/>\n                    <clipPath id=\"_clip1\">\n                        <path id=\"Frame2\" serif:id=\"Frame\" d=\"M209.442,453.925L209.442,426.604C209.442,423.463 206.896,420.917 203.755,420.917C193.061,427.853 182.366,427.907 171.672,420.917C168.532,420.917 165.986,423.463 165.986,426.604L165.986,453.925C165.986,457.066 168.532,459.612 171.672,459.612C181.92,454.555 192.618,454.594 203.755,459.612C206.896,459.612 209.442,457.066 209.442,453.925Z\"/>\n                    </clipPath>\n                    <g clip-path=\"url(#_clip1)\">\n                        <g id=\"Sky\" transform=\"matrix(-0.764783,0,0,0.764783,211.642,413.673)\">\n                            <rect x=\"-6.532\" y=\"1.239\" width=\"79.788\" height=\"67.725\" style=\"fill:rgb(2,169,234);\"/>\n                        </g>\n                        <g id=\"Sun\" transform=\"matrix(0,0.764783,0.764783,0,181.948,422.913)\">\n                            <path d=\"M10.24,-10.24C3.577,-10.353 1.941,-3.904 1.988,-0.001C2.057,5.654 6.667,10.24 10.24,10.24C14.049,10.24 18.33,5.652 18.491,-0.001C18.585,-3.336 17.032,-10.124 10.24,-10.24Z\" style=\"fill:var(--mantle);fill-rule:nonzero;\"/>\n                        </g>\n                        <g id=\"Mountains\" transform=\"matrix(0.774599,0,0,0.774599,-210.865,413.434)\">\n                            <path d=\"M483.589,37.992C485.566,34.265 493.228,29.089 496.338,27.38C498.069,26.429 500.782,26.419 502.253,27.737C504.602,29.842 506.575,36.33 510.432,40.01C517.35,34.845 524.057,23.298 527.58,20.004C528.553,19.094 530.55,19.388 531.57,20.245C534.471,22.684 542.53,28.976 544.987,34.638L544,65L484,65L483.589,37.992Z\" style=\"fill:var(--outline);\"/>\n                        </g>\n                    </g>\n                </g>\n            </g>\n            <g id=\"Anchor\" transform=\"matrix(0.796125,0,0,0.796125,-183.375,-309.423)\">\n                <path d=\"M274.143,423.373L274.143,425.668C270.89,426.257 268.334,428.723 267.703,431.835L265.681,431.835C266.012,431.262 265.933,430.515 265.442,430.024C264.857,429.439 263.907,429.439 263.321,430.024L260.011,433.335L263.321,436.646C263.907,437.231 264.857,437.231 265.442,436.646C265.933,436.155 266.012,435.409 265.681,434.835L267.703,434.835C268.334,437.947 270.89,440.413 274.143,441.002L274.143,443.297C273.57,442.966 272.823,443.045 272.332,443.536C271.747,444.121 271.747,445.072 272.332,445.657L275.643,448.968L278.954,445.657C279.539,445.072 279.539,444.121 278.954,443.536C278.463,443.045 277.717,442.966 277.143,443.297L277.143,441.002C280.396,440.414 282.952,437.947 283.583,434.835L285.605,434.835C285.274,435.409 285.353,436.155 285.844,436.646C286.429,437.231 287.38,437.231 287.965,436.646L291.276,433.335L287.965,430.024C287.38,429.439 286.429,429.439 285.844,430.024C285.353,430.515 285.274,431.262 285.605,431.835L283.583,431.835C282.953,428.723 280.397,426.257 277.143,425.668L277.143,423.373C277.717,423.704 278.463,423.625 278.954,423.134C279.539,422.549 279.539,421.598 278.954,421.013L275.643,417.702L272.332,421.013C271.747,421.598 271.747,422.549 272.332,423.134C272.823,423.625 273.57,423.704 274.143,423.373ZM274.143,437.923C272.574,437.466 271.321,436.313 270.806,434.835L274.143,434.835L274.143,437.923ZM280.48,434.835C279.966,436.312 278.712,437.466 277.143,437.923L277.143,434.835L280.48,434.835ZM274.143,428.747L274.143,431.835L270.806,431.835C271.32,430.358 272.574,429.204 274.143,428.747ZM277.143,428.747C278.712,429.204 279.966,430.358 280.48,431.835L277.143,431.835L277.143,428.747Z\" style=\"fill:rgb(242,84,91);\"/>\n            </g>\n        </g>\n    </g>\n</svg>\n",
        "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\panorama\\panorama.png",
        "tooltip": "Panorama: Present a panoramic image (such as from a phone camera in Panorama mode) on screen.",
        "version": "2023.1.0",
        "beta": true,
        "validatorClasses": [
            "VisualValidatorRoutine"
        ],
        "hidden": false,
        "params": {
            "name": {
                "val": "pan",
                "valType": "code",
                "inputType": "name",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Name",
                "hint": "Name of this Component (alphanumeric or _, no spaces)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startVal": {
                "val": 0,
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Start",
                "hint": "When does the Component start?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startEstim": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Expected start (s)",
                "hint": "(Optional) expected start (s), purely for representing in the timeline",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startType": {
                "val": "time (s)",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "time (s)",
                    "frame N",
                    "condition"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Start type",
                "hint": "How do you want to define your start point?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "stopVal": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": [],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop",
                "hint": "When does the Component end? (blank is endless)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "durationEstim": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Expected duration (s)",
                "hint": "(Optional) expected duration (s), purely for representing in the timeline",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "stopType": {
                "val": "duration (s)",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "duration (s)",
                    "duration (frames)",
                    "time (s)",
                    "frame N",
                    "condition"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop type",
                "hint": "How do you want to define your end point?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "image": {
                "val": "",
                "valType": "file",
                "inputType": "file",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Image",
                "hint": "The image to be displayed - a filename, including path",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "posCtrl": {
                "val": "mouse",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [
                    "mouse",
                    "drag",
                    "arrows",
                    "wasd",
                    "keymap",
                    "custom"
                ],
                "allowedLabels": [
                    "Mouse",
                    "Drag",
                    "Keyboard (Arrow Keys)",
                    "Keyboard (WASD)",
                    "Keyboard (Custom keys)",
                    "Custom"
                ],
                "ctrlParams": {},
                "label": "Position control",
                "hint": "How to control looking around the panorama scene",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "azimuth": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Azimuth",
                "hint": "Horizontal look position, ranging from -1 (fully left) to 1 (fully right)",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "posCtrl",
                            "condition": "=='custom'"
                        }
                    ],
                    "enabled": []
                }
            },
            "elevation": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Elevation",
                "hint": "Vertical look position, ranging from -1 (fully down) to 1 (fully up)",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "posCtrl",
                            "condition": "=='custom'"
                        }
                    ],
                    "enabled": []
                }
            },
            "upKey": {
                "val": "w",
                "valType": "str",
                "inputType": "single",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Up",
                "hint": "What key corresponds to the view action 'Up'?",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "posCtrl",
                            "condition": "=='keymap'"
                        }
                    ],
                    "enabled": []
                }
            },
            "leftKey": {
                "val": "a",
                "valType": "str",
                "inputType": "single",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Left",
                "hint": "What key corresponds to the view action 'Left'?",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "posCtrl",
                            "condition": "=='keymap'"
                        }
                    ],
                    "enabled": []
                }
            },
            "downKey": {
                "val": "s",
                "valType": "str",
                "inputType": "single",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Down",
                "hint": "What key corresponds to the view action 'Down'?",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "posCtrl",
                            "condition": "=='keymap'"
                        }
                    ],
                    "enabled": []
                }
            },
            "rightKey": {
                "val": "d",
                "valType": "str",
                "inputType": "single",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Right",
                "hint": "What key corresponds to the view action 'Right'?",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "posCtrl",
                            "condition": "=='keymap'"
                        }
                    ],
                    "enabled": []
                }
            },
            "stopKey": {
                "val": "space",
                "valType": "str",
                "inputType": "single",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop",
                "hint": "What key corresponds to the view action 'Stop'?",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "posCtrl",
                            "condition": "=='keymap'"
                        }
                    ],
                    "enabled": []
                }
            },
            "posSensitivity": {
                "val": 1,
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Movement sensitivity",
                "hint": "Multiplier to apply to view changes. 1 means that moving the mouse from the center of the screen to the edge or holding down a key for 2s will rotate 180\u00b0.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "smooth": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Smooth?",
                "hint": "Should movement be smoothed, so the view keeps moving a little after a change?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "zoomCtrl": {
                "val": "wheel",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [
                    "wheel",
                    "invwheel",
                    "arrows",
                    "plusmin",
                    "keymap",
                    "custom"
                ],
                "allowedLabels": [
                    "Mouse Wheel",
                    "Mouse Wheel (Inverted)",
                    "Keyboard (Arrow Keys)",
                    "Keyboard (+-)",
                    "Keyboard (Custom keys)",
                    "Custom"
                ],
                "ctrlParams": {},
                "label": "Zoom control",
                "hint": "How to control zooming in and out of the panorama scene",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "zoom": {
                "val": 1,
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Zoom",
                "hint": "How zoomed in the scene is, with 1 being no adjustment.",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "zoomCtrl",
                            "condition": "=='custom'"
                        }
                    ],
                    "enabled": []
                }
            },
            "inKey": {
                "val": "up",
                "valType": "str",
                "inputType": "single",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Zoom in",
                "hint": "What key corresponds to the view action 'Zoom in'?",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "zoomCtrl",
                            "condition": "=='keymap'"
                        }
                    ],
                    "enabled": []
                }
            },
            "outKey": {
                "val": "down",
                "valType": "str",
                "inputType": "single",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Zoom out",
                "hint": "What key corresponds to the view action 'Zoom out'?",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "zoomCtrl",
                            "condition": "=='keymap'"
                        }
                    ],
                    "enabled": []
                }
            },
            "zoomSensitivity": {
                "val": 1,
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Zoom sensitivity",
                "hint": "Multiplier to apply to zoom changes. 1 means that pressing the zoom in key for 1s or scrolling the mouse wheel 100% zooms in 100%.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "saveStartStop": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Save onset/offset times",
                "hint": "Store the onset/offset times in the data file (as well as in the log file).",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "syncScreenRefresh": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Sync timing with screen refresh",
                "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "disabled": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Disable Component",
                "hint": "Disable this Component",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "validator": {
                "val": "",
                "valType": "code",
                "inputType": "validator",
                "categ": "Testing",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "VisualValidatorRoutine"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Validate with...",
                "hint": "Name of validator Component/Routine to use to check the timing of this stimulus.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "interpolate": {
                "val": "linear",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": [],
                "allowedVals": [
                    "linear",
                    "nearest"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Interpolate",
                "hint": "How should the image be interpolated if/when rescaled",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            }
        }
    },
    "ParallelOutComponent": {
        "__class__": "psychopy.experiment.components.parallelOut:ParallelOutComponent",
        "__name__": "ParallelOutComponent",
        "categories": [
            "I/O",
            "EEG"
        ],
        "targets": [
            "PsychoPy"
        ],
        "plugin": null,
        "iconSVG": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 32 32\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:space=\"preserve\" xmlns:serif=\"http://www.serif.com/\" style=\"fill-rule:evenodd;clip-rule:evenodd;stroke-linecap:round;stroke-miterlimit:10;\">\n    <g id=\"light-components-ParallelOutComponent\" serif:id=\"light/components/ParallelOutComponent\" transform=\"matrix(0.451519,0,0,0.451519,0,0)\">\n        <rect x=\"0\" y=\"0\" width=\"70.872\" height=\"70.866\" style=\"fill:none;\"/>\n        <clipPath id=\"_clip1\">\n            <rect x=\"0\" y=\"0\" width=\"70.872\" height=\"70.866\"/>\n        </clipPath>\n        <g clip-path=\"url(#_clip1)\">\n            <g transform=\"matrix(0.973831,0,0,0.973831,-309.65,-231.987)\">\n                <path d=\"M381.997,263.3L326.712,263.3C323.981,263.3 321.967,266.54 322.656,269.865L325.131,281.96C325.604,284.284 327.28,285.913 329.2,285.913L379.523,285.913C381.443,285.913 383.106,284.284 383.592,281.96L386.067,269.865C386.743,266.54 384.742,263.3 381.997,263.3ZM376.09,278.916C375.22,278.916 374.514,278.21 374.514,277.352C374.514,276.482 375.22,275.776 376.09,275.776C376.948,275.776 377.654,276.482 377.654,277.352C377.654,278.21 376.948,278.916 376.09,278.916ZM372.468,278.916C371.598,278.916 370.893,278.21 370.893,277.352C370.893,276.482 371.598,275.776 372.468,275.776C373.327,275.776 374.032,276.482 374.032,277.352C374.032,278.21 373.327,278.916 372.468,278.916ZM368.847,278.916C367.977,278.916 367.271,278.21 367.271,277.352C367.271,276.482 367.977,275.776 368.847,275.776C369.705,275.776 370.411,276.482 370.411,277.352C370.411,278.21 369.705,278.916 368.847,278.916ZM365.226,278.916C364.355,278.916 363.65,278.21 363.65,277.352C363.65,276.482 364.355,275.776 365.226,275.776C366.084,275.776 366.789,276.482 366.789,277.352C366.789,278.21 366.084,278.916 365.226,278.916ZM361.604,278.916C360.734,278.916 360.029,278.21 360.029,277.352C360.029,276.482 360.734,275.776 361.604,275.776C362.462,275.776 363.168,276.482 363.168,277.352C363.168,278.21 362.462,278.916 361.604,278.916ZM357.983,278.916C357.113,278.916 356.407,278.21 356.407,277.352C356.407,276.482 357.113,275.776 357.983,275.776C358.841,275.776 359.546,276.482 359.546,277.352C359.546,278.21 358.841,278.916 357.983,278.916ZM354.361,278.916C353.491,278.916 352.786,278.21 352.786,277.352C352.786,276.482 353.491,275.776 354.361,275.776C355.22,275.776 355.925,276.482 355.925,277.352C355.925,278.21 355.22,278.916 354.361,278.916ZM350.74,278.916C349.87,278.916 349.176,278.21 349.176,277.352C349.176,276.482 349.87,275.776 350.74,275.776C351.598,275.776 352.304,276.482 352.304,277.352C352.304,278.21 351.598,278.916 350.74,278.916ZM347.118,278.916C346.248,278.916 345.555,278.21 345.555,277.352C345.555,276.482 346.248,275.776 347.118,275.776C347.977,275.776 348.682,276.482 348.682,277.352C348.682,278.21 347.977,278.916 347.118,278.916ZM343.497,278.916C342.627,278.916 341.933,278.21 341.933,277.352C341.933,276.482 342.627,275.776 343.497,275.776C344.367,275.776 345.061,276.482 345.061,277.352C345.061,278.21 344.367,278.916 343.497,278.916ZM339.876,278.916C339.005,278.916 338.312,278.21 338.312,277.352C338.312,276.482 339.005,275.776 339.876,275.776C340.746,275.776 341.439,276.482 341.439,277.352C341.439,278.21 340.746,278.916 339.876,278.916ZM336.254,278.916C335.384,278.916 334.69,278.21 334.69,277.352C334.69,276.482 335.384,275.776 336.254,275.776C337.124,275.776 337.818,276.482 337.818,277.352C337.818,278.21 337.124,278.916 336.254,278.916ZM332.633,278.916C331.763,278.916 331.069,278.21 331.069,277.352C331.069,276.482 331.763,275.776 332.633,275.776C333.503,275.776 334.196,276.482 334.196,277.352C334.196,278.21 333.503,278.916 332.633,278.916ZM377.971,273.213C377.113,273.213 376.407,272.519 376.407,271.649C376.407,270.779 377.113,270.085 377.971,270.085C378.841,270.085 379.547,270.779 379.547,271.649C379.547,272.519 378.841,273.213 377.971,273.213ZM372.786,271.649C372.786,270.779 373.491,270.085 374.35,270.085C375.22,270.085 375.925,270.779 375.925,271.649C375.925,272.519 375.22,273.213 374.35,273.213C373.491,273.213 372.786,272.519 372.786,271.649ZM369.164,271.649C369.164,270.779 369.87,270.085 370.728,270.085C371.598,270.085 372.304,270.779 372.304,271.649C372.304,272.519 371.598,273.213 370.728,273.213C369.87,273.213 369.164,272.519 369.164,271.649ZM365.543,271.649C365.543,270.779 366.248,270.085 367.107,270.085C367.977,270.085 368.682,270.779 368.682,271.649C368.682,272.519 367.977,273.213 367.107,273.213C366.248,273.213 365.543,272.519 365.543,271.649ZM361.922,271.649C361.922,270.779 362.627,270.085 363.497,270.085C364.355,270.085 365.061,270.779 365.061,271.649C365.061,272.519 364.355,273.213 363.497,273.213C362.627,273.213 361.922,272.519 361.922,271.649ZM358.3,271.649C358.3,270.779 359.006,270.085 359.876,270.085C360.734,270.085 361.439,270.779 361.439,271.649C361.439,272.519 360.734,273.213 359.876,273.213C359.006,273.213 358.3,272.519 358.3,271.649ZM354.679,271.649C354.679,270.779 355.384,270.085 356.254,270.085C357.113,270.085 357.818,270.779 357.818,271.649C357.818,272.519 357.113,273.213 356.254,273.213C355.384,273.213 354.679,272.519 354.679,271.649ZM351.057,271.649C351.057,270.779 351.763,270.085 352.633,270.085C353.491,270.085 354.197,270.779 354.197,271.649C354.197,272.519 353.491,273.213 352.633,273.213C351.763,273.213 351.057,272.519 351.057,271.649ZM347.436,271.649C347.436,270.779 348.141,270.085 349.011,270.085C349.87,270.085 350.575,270.779 350.575,271.649C350.575,272.519 349.87,273.213 349.011,273.213C348.141,273.213 347.436,272.519 347.436,271.649ZM343.814,271.649C343.814,270.779 344.52,270.085 345.39,270.085C346.248,270.085 346.954,270.779 346.954,271.649C346.954,272.519 346.248,273.213 345.39,273.213C344.52,273.213 343.814,272.519 343.814,271.649ZM340.193,271.649C340.193,270.779 340.898,270.085 341.769,270.085C342.627,270.085 343.332,270.779 343.332,271.649C343.332,272.519 342.627,273.213 341.769,273.213C340.898,273.213 340.193,272.519 340.193,271.649ZM336.572,271.649C336.572,270.779 337.277,270.085 338.147,270.085C339.005,270.085 339.711,270.779 339.711,271.649C339.711,272.519 339.005,273.213 338.147,273.213C337.277,273.213 336.572,272.519 336.572,271.649ZM332.95,271.649C332.95,270.779 333.656,270.085 334.526,270.085C335.384,270.085 336.089,270.779 336.089,271.649C336.089,272.519 335.384,273.213 334.526,273.213C333.656,273.213 332.95,272.519 332.95,271.649ZM329.329,271.649C329.329,270.779 330.034,270.085 330.904,270.085C331.763,270.085 332.468,270.779 332.468,271.649C332.468,272.519 331.763,273.213 330.904,273.213C330.034,273.213 329.329,272.519 329.329,271.649Z\" style=\"fill:rgb(242,84,91);fill-rule:nonzero;\"/>\n            </g>\n            <g transform=\"matrix(0.973831,0,0,0.973831,62.3502,46.4437)\">\n                <path d=\"M0,-22.613L-55.285,-22.613C-58.016,-22.613 -60.03,-19.373 -59.341,-16.048L-56.866,-3.953C-56.393,-1.629 -54.717,0 -52.797,0L-2.474,0C-0.554,0 1.109,-1.629 1.595,-3.953L4.07,-16.048C4.746,-19.373 2.745,-22.613 0,-22.613Z\" style=\"fill:none;fill-rule:nonzero;stroke:var(--outline);stroke-width:4.55px;\"/>\n            </g>\n        </g>\n    </g>\n</svg>\n",
        "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\parallelOut\\parallel.png",
        "tooltip": "Parallel out: send signals from the parallel port",
        "version": "0.0.0",
        "beta": false,
        "validatorClasses": [],
        "hidden": false,
        "params": {
            "name": {
                "val": "p_port",
                "valType": "code",
                "inputType": "name",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Name",
                "hint": "Name of this Component (alphanumeric or _, no spaces)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startVal": {
                "val": 0.0,
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Start",
                "hint": "When does the Component start?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startEstim": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Expected start (s)",
                "hint": "(Optional) expected start (s), purely for representing in the timeline",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startType": {
                "val": "time (s)",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "time (s)",
                    "frame N",
                    "condition"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Start type",
                "hint": "How do you want to define your start point?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "stopVal": {
                "val": 1.0,
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": [],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop",
                "hint": "When does the Component end? (blank is endless)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "durationEstim": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Expected duration (s)",
                "hint": "(Optional) expected duration (s), purely for representing in the timeline",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "stopType": {
                "val": "duration (s)",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "duration (s)",
                    "duration (frames)",
                    "time (s)",
                    "frame N",
                    "condition"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop type",
                "hint": "How do you want to define your end point?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startData": {
                "val": "1",
                "valType": "code",
                "inputType": "single",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Start data",
                "hint": "Data to be sent at 'start'",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "stopData": {
                "val": "0",
                "valType": "code",
                "inputType": "single",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop data",
                "hint": "Data to be sent at 'end'",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "address": {
                "val": "0x0378",
                "valType": "str",
                "inputType": "choice",
                "categ": "Device",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "0x0378",
                    "0x03BC",
                    "LabJack U3",
                    "USB2TTL8"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Port address",
                "hint": "Parallel port to be used (you can change these options in preferences>general)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "register": {
                "val": "EIO",
                "valType": "str",
                "inputType": "choice",
                "categ": "Device",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "EIO",
                    "FIO"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "U3 register",
                "hint": "U3 Register to write byte to",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "address",
                            "condition": "=='LabJack U3'"
                        }
                    ],
                    "enabled": []
                }
            },
            "saveStartStop": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Save onset/offset times",
                "hint": "Store the onset/offset times in the data file (as well as in the log file).",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "syncScreenRefresh": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Sync timing with screen refresh",
                "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "disabled": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Disable Component",
                "hint": "Disable this Component",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "syncScreen": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": "constant",
                "allowedUpdates": [],
                "allowedVals": [
                    true,
                    false
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Sync to screen",
                "hint": "If the parallel port data relates to visual stimuli then sync its pulse to the screen refresh",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            }
        }
    },
    "ProgressComponent": {
        "__class__": "psychopy.experiment.components.progress:ProgressComponent",
        "__name__": "ProgressComponent",
        "categories": [
            "Stimuli"
        ],
        "targets": [
            "PsychoPy",
            "PsychoJS"
        ],
        "plugin": null,
        "iconSVG": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 32 32\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:space=\"preserve\" xmlns:serif=\"http://www.serif.com/\" style=\"fill-rule:evenodd;clip-rule:evenodd;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:1.5;\">\n    <g id=\"light-components-ProgressComponent\" serif:id=\"light/components/ProgressComponent\" transform=\"matrix(0.451519,0,0,0.451519,0,0)\">\n        <rect x=\"0\" y=\"0\" width=\"70.872\" height=\"70.866\" style=\"fill:none;\"/>\n        <g transform=\"matrix(2.21475,0,0,2.12616,0,0.885899)\">\n            <path d=\"M30,13.125L30,19.375C30,21.1 28.656,22.5 27,22.5L5,22.5C3.344,22.5 2,21.1 2,19.375L2,13.125C2,11.4 3.344,10 5,10L27,10C28.656,10 30,11.4 30,13.125Z\" style=\"fill:none;\"/>\n            <clipPath id=\"_clip1\">\n                <path d=\"M30,13.125L30,19.375C30,21.1 28.656,22.5 27,22.5L5,22.5C3.344,22.5 2,21.1 2,19.375L2,13.125C2,11.4 3.344,10 5,10L27,10C28.656,10 30,11.4 30,13.125Z\"/>\n            </clipPath>\n            <g clip-path=\"url(#_clip1)\">\n                <g transform=\"matrix(0.75,0,0,0.735294,1.25,4.11765)\">\n                    <rect x=\"1\" y=\"8\" width=\"24\" height=\"17\" style=\"fill:rgb(37,169,234);\"/>\n                </g>\n            </g>\n            <path d=\"M30,13.125L30,19.375C30,21.1 28.656,22.5 27,22.5L5,22.5C3.344,22.5 2,21.1 2,19.375L2,13.125C2,11.4 3.344,10 5,10L27,10C28.656,10 30,11.4 30,13.125Z\" style=\"fill:none;stroke:var(--outline);stroke-width:2.04px;\"/>\n        </g>\n    </g>\n</svg>\n",
        "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\progress\\progress.png",
        "tooltip": "Progress: Present a progress bar, with values ranging from 0 to 1.",
        "version": "2023.2.0",
        "beta": true,
        "validatorClasses": [
            "VisualValidatorRoutine"
        ],
        "hidden": false,
        "params": {
            "name": {
                "val": "prog",
                "valType": "code",
                "inputType": "name",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Name",
                "hint": "Name of this Component (alphanumeric or _, no spaces)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startVal": {
                "val": 0,
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Start",
                "hint": "When does the Component start?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startEstim": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Expected start (s)",
                "hint": "(Optional) expected start (s), purely for representing in the timeline",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startType": {
                "val": "time (s)",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "time (s)",
                    "frame N",
                    "condition"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Start type",
                "hint": "How do you want to define your start point?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "stopVal": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": [],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop",
                "hint": "When does the Component end? (blank is endless)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "durationEstim": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Expected duration (s)",
                "hint": "(Optional) expected duration (s), purely for representing in the timeline",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "stopType": {
                "val": "duration (s)",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "duration (s)",
                    "duration (frames)",
                    "time (s)",
                    "frame N",
                    "condition"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop type",
                "hint": "How do you want to define your end point?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "color": {
                "val": "white",
                "valType": "color",
                "inputType": "color",
                "categ": "Appearance",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Bar color",
                "hint": "Color of the filled part of the progress bar.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "fillColor": {
                "val": "None",
                "valType": "color",
                "inputType": "color",
                "categ": "Appearance",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Back color",
                "hint": "Color of the empty part of the progress bar.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "borderColor": {
                "val": "white",
                "valType": "color",
                "inputType": "color",
                "categ": "Appearance",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Border color",
                "hint": "Color of the line around the progress bar.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "colorSpace": {
                "val": "rgb",
                "valType": "str",
                "inputType": "choice",
                "categ": "Appearance",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [
                    "rgb",
                    "dkl",
                    "lms",
                    "hsv"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Color space",
                "hint": "In what format (color space) have you specified the colors? (rgb, dkl, lms, hsv)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "opacity": {
                "val": 1,
                "valType": "num",
                "inputType": "single",
                "categ": "Appearance",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Opacity",
                "hint": "Opacity of the stimulus (1=opaque, 0=fully transparent, 0.5=translucent). Leave blank for each color to have its own opacity (recommended if any color is None).",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "size": {
                "val": [
                    0.5,
                    0.5
                ],
                "valType": "list",
                "inputType": "single",
                "categ": "Layout",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Size [w,h]",
                "hint": "Size of this stimulus (either a single value or x,y pair, e.g. 2.5, [1,2] ",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "pos": {
                "val": [
                    0,
                    0
                ],
                "valType": "list",
                "inputType": "single",
                "categ": "Layout",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Position [x,y]",
                "hint": "Position of this stimulus (e.g. [1,2] )",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "units": {
                "val": "height",
                "valType": "str",
                "inputType": "choice",
                "categ": "Layout",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "from exp settings",
                    "deg",
                    "cm",
                    "pix",
                    "norm",
                    "height",
                    "degFlatPos",
                    "degFlat"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Spatial units",
                "hint": "Units of dimensions for this stimulus",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "anchor": {
                "val": "center-left",
                "valType": "str",
                "inputType": "choice",
                "categ": "Layout",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [
                    "center",
                    "top-center",
                    "bottom-center",
                    "center-left",
                    "center-right",
                    "top-left",
                    "top-right",
                    "bottom-left",
                    "bottom-right"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Anchor",
                "hint": "Which point on the stimulus should be anchored to its exact position?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "ori": {
                "val": 0,
                "valType": "num",
                "inputType": "spin",
                "categ": "Layout",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [
                    -360,
                    360
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Orientation",
                "hint": "Orientation of this stimulus (in deg)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "saveStartStop": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Save onset/offset times",
                "hint": "Store the onset/offset times in the data file (as well as in the log file).",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "syncScreenRefresh": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Sync timing with screen refresh",
                "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "disabled": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Disable Component",
                "hint": "Disable this Component",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "contrast": {
                "val": 1,
                "valType": "num",
                "inputType": "single",
                "categ": "Appearance",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Contrast",
                "hint": "Contrast of the stimulus (1.0=unchanged contrast, 0.5=decrease contrast, 0.0=uniform/no contrast, -0.5=slightly inverted, -1.0=totally inverted)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "validator": {
                "val": "",
                "valType": "code",
                "inputType": "validator",
                "categ": "Testing",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "VisualValidatorRoutine"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Validate with...",
                "hint": "Name of validator Component/Routine to use to check the timing of this stimulus.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "progress": {
                "val": 0,
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Progress",
                "hint": "Value between 0 (not started) and 1 (complete) to set the progress bar to.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "lineWidth": {
                "val": 4,
                "valType": "num",
                "inputType": "single",
                "categ": "Appearance",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Line width",
                "hint": "Width of the shape's line (always in pixels - this does NOT use 'units')",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            }
        }
    },
    "ResourceManagerComponent": {
        "__class__": "psychopy.experiment.components.resourceManager:ResourceManagerComponent",
        "__name__": "ResourceManagerComponent",
        "categories": [
            "Custom"
        ],
        "targets": [
            "PsychoJS"
        ],
        "plugin": null,
        "iconSVG": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 48 48\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:space=\"preserve\" xmlns:serif=\"http://www.serif.com/\" style=\"fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2;\">\n    <rect id=\"ResourceManagerComponent\" x=\"0\" y=\"0\" width=\"48\" height=\"48\" style=\"fill:none;\"/>\n    <g id=\"ResourceManagerComponent1\" serif:id=\"ResourceManagerComponent\">\n        <g id=\"Resource-Manager-Component\" serif:id=\"Resource Manager Component\" transform=\"matrix(0.718622,0,0,0.718622,-3.04828,-2.6196)\">\n            <g id=\"Image-Component\" serif:id=\"Image Component\" transform=\"matrix(1,0,0,1,-5e-05,1.73019)\">\n                <g opacity=\"0.5\">\n                    <path id=\"Frame\" d=\"M14.46,10.135C10.354,10.135 7.025,13.464 7.025,17.571L7.025,53.295C7.025,57.402 10.354,60.731 14.46,60.731L56.411,60.731C60.518,60.731 63.847,57.402 63.847,53.295L63.847,17.571C63.847,13.464 60.518,10.135 56.411,10.135L14.46,10.135Z\" style=\"fill-rule:nonzero;\"/>\n                    <clipPath id=\"_clip1\">\n                        <path id=\"Frame1\" serif:id=\"Frame\" d=\"M14.46,10.135C10.354,10.135 7.025,13.464 7.025,17.571L7.025,53.295C7.025,57.402 10.354,60.731 14.46,60.731L56.411,60.731C60.518,60.731 63.847,57.402 63.847,53.295L63.847,17.571C63.847,13.464 60.518,10.135 56.411,10.135L14.46,10.135Z\" clip-rule=\"nonzero\"/>\n                    </clipPath>\n                    <g clip-path=\"url(#_clip1)\">\n                        <g id=\"Sky\" transform=\"matrix(-1,0,0,1,66.724,0.6631)\">\n                            <rect x=\"-6.532\" y=\"1.239\" width=\"79.788\" height=\"67.725\" style=\"fill:rgb(2,169,234);\"/>\n                        </g>\n                        <g id=\"Sun\" transform=\"matrix(0,1,1,0,27.8961,12.7452)\">\n                            <path d=\"M10.24,-10.24C4.585,-10.24 0.001,-5.656 0.001,-0.001C0.001,5.655 4.585,10.24 10.24,10.24C15.894,10.24 20.478,5.655 20.478,-0.001C20.478,-5.656 15.894,-10.24 10.24,-10.24\" style=\"fill:var(--mantle);fill-rule:nonzero;\"/>\n                        </g>\n                        <g id=\"Mountains\" transform=\"matrix(1,0,0,1,-478.385,0)\">\n                            <path d=\"M484,41.774L496.338,27.38C497.941,25.509 500.887,25.688 502.253,27.737L510.432,40.01L527.58,20.004C528.661,18.742 530.648,18.862 531.57,20.245L544,38.899L544,65L484,65L484,41.774Z\" style=\"fill:var(--outline);\"/>\n                        </g>\n                    </g>\n                </g>\n            </g>\n            <g id=\"Completed\" transform=\"matrix(1.08559,0,0,1.08515,0.400674,3.41515)\">\n                <path d=\"M12.955,7.803C9.169,7.803 6.102,10.87 6.102,14.656L6.102,47.56C6.102,51.345 9.169,54.413 12.955,54.413L25.777,54.397L25.777,7.787L12.955,7.803Z\" style=\"fill:none;fill-rule:nonzero;\"/>\n                <clipPath id=\"_clip2\">\n                    <path d=\"M12.955,7.803C9.169,7.803 6.102,10.87 6.102,14.656L6.102,47.56C6.102,51.345 9.169,54.413 12.955,54.413L25.777,54.397L25.777,7.787L12.955,7.803Z\" clip-rule=\"nonzero\"/>\n                </clipPath>\n                <g clip-path=\"url(#_clip2)\">\n                    <g id=\"Image-Component1\" serif:id=\"Image Component\" transform=\"matrix(0.921157,0,0,0.921535,-0.36913,-1.55275)\">\n                        <path id=\"Frame2\" serif:id=\"Frame\" d=\"M14.46,10.135C10.354,10.135 7.025,13.464 7.025,17.571L7.025,53.295C7.025,57.402 10.354,60.731 14.46,60.731L56.411,60.731C60.518,60.731 63.847,57.402 63.847,53.295L63.847,17.571C63.847,13.464 60.518,10.135 56.411,10.135L14.46,10.135Z\" style=\"fill:none;fill-rule:nonzero;\"/>\n                        <clipPath id=\"_clip3\">\n                            <path id=\"Frame3\" serif:id=\"Frame\" d=\"M14.46,10.135C10.354,10.135 7.025,13.464 7.025,17.571L7.025,53.295C7.025,57.402 10.354,60.731 14.46,60.731L56.411,60.731C60.518,60.731 63.847,57.402 63.847,53.295L63.847,17.571C63.847,13.464 60.518,10.135 56.411,10.135L14.46,10.135Z\" clip-rule=\"nonzero\"/>\n                        </clipPath>\n                        <g clip-path=\"url(#_clip3)\">\n                            <g id=\"Sky1\" serif:id=\"Sky\" transform=\"matrix(-1,0,0,1,66.724,0.6631)\">\n                                <rect x=\"-6.532\" y=\"1.239\" width=\"79.788\" height=\"67.725\" style=\"fill:rgb(2,169,234);\"/>\n                            </g>\n                            <g id=\"Sun1\" serif:id=\"Sun\" transform=\"matrix(0,1,1,0,27.8961,12.7452)\">\n                                <path d=\"M10.24,-10.24C4.585,-10.24 0.001,-5.656 0.001,-0.001C0.001,5.655 4.585,10.24 10.24,10.24C15.894,10.24 20.478,5.655 20.478,-0.001C20.478,-5.656 15.894,-10.24 10.24,-10.24\" style=\"fill:var(--mantle);fill-rule:nonzero;\"/>\n                            </g>\n                            <g id=\"Mountains1\" serif:id=\"Mountains\" transform=\"matrix(1,0,0,1,-478.385,0)\">\n                                <path d=\"M484,41.774L496.338,27.38C497.941,25.509 500.887,25.688 502.253,27.737L510.432,40.01L527.58,20.004C528.661,18.742 530.648,18.862 531.57,20.245L544,38.899L544,65L484,65L484,41.774Z\" style=\"fill:var(--outline);\"/>\n                            </g>\n                        </g>\n                    </g>\n                </g>\n            </g>\n            <g id=\"Trackline\" transform=\"matrix(2.28571,0,0,1,-947.33,-318.897)\">\n                <rect x=\"426.663\" y=\"330.763\" width=\"1.75\" height=\"50.596\" style=\"fill:rgb(242,84,91);\"/>\n            </g>\n            <g transform=\"matrix(1.24449,0,0,1.25348,-14.3667,-53.0676)\">\n                <g transform=\"matrix(0,1.60136,1.60136,0,57.2431,45.2444)\">\n                    <path d=\"M7.025,-7.025C3.145,-7.025 0,-3.88 0,-0C0,3.88 3.145,7.025 7.025,7.025C10.905,7.025 14.05,3.88 14.05,-0C14.05,-3.88 10.905,-7.025 7.025,-7.025\" style=\"fill:rgb(242,84,91);fill-rule:nonzero;\"/>\n                </g>\n                <g transform=\"matrix(0.459975,0,0,0.449911,35.4572,46.8929)\">\n                    <g transform=\"matrix(0.758911,0,0,0.758911,56.914,13.3445)\">\n                        <path d=\"M0,10.79L-10.653,21.443C-11.724,22.514 -13.453,22.514 -14.524,21.443L-25.164,10.79C-26.894,9.073 -25.675,6.135 -23.235,6.135L-17.822,6.135L-17.822,-6.484C-17.822,-9.371 -15.482,-11.724 -12.582,-11.724C-9.682,-11.724 -7.343,-9.371 -7.343,-6.484L-7.343,6.135L-1.929,6.135C0.51,6.135 1.717,9.073 0,10.79\" style=\"fill:var(--mantle);fill-rule:nonzero;\"/>\n                    </g>\n                    <g transform=\"matrix(0.963472,0,0,0.720322,-309.493,-226.374)\">\n                        <path d=\"M383.776,363.131C383.776,360.804 382.386,358.917 380.672,358.917C375.518,358.917 365.252,358.917 360.098,358.917C358.384,358.917 356.995,360.804 356.995,363.131C356.995,363.131 356.995,363.132 356.995,363.132C356.995,365.459 358.384,367.346 360.098,367.346C365.252,367.346 375.518,367.346 380.672,367.346C382.386,367.346 383.776,365.459 383.776,363.132C383.776,363.132 383.776,363.131 383.776,363.131Z\" style=\"fill:var(--mantle);\"/>\n                    </g>\n                </g>\n            </g>\n        </g>\n    </g>\n</svg>\n",
        "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\resourceManager\\resource_manager.png",
        "tooltip": "Pre-load some resources into memory so that components using them can start without having to load first",
        "version": "0.0.0",
        "beta": true,
        "validatorClasses": [],
        "hidden": false,
        "params": {
            "name": {
                "val": "resources",
                "valType": "code",
                "inputType": "name",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Name",
                "hint": "Name of this Component (alphanumeric or _, no spaces)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startVal": {
                "val": 0,
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Start",
                "hint": "When does the Component start?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startEstim": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Expected start (s)",
                "hint": "(Optional) expected start (s), purely for representing in the timeline",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startType": {
                "val": "time (s)",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "time (s)",
                    "frame N",
                    "condition"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Start type",
                "hint": "How do you want to define your start point?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "stopVal": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": [],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Check",
                "hint": "When does the Component end? (blank is endless)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "durationEstim": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Expected duration (s)",
                "hint": "(Optional) expected duration (s), purely for representing in the timeline",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "stopType": {
                "val": "duration (s)",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "duration (s)",
                    "duration (frames)",
                    "time (s)",
                    "frame N",
                    "condition"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop type",
                "hint": "How do you want to define your end point?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "disabled": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Disable Component",
                "hint": "Disable this Component",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "resources": {
                "val": [],
                "valType": "list",
                "inputType": "fileList",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Resources",
                "hint": "Resources to download/check",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "checkAll": {
                "val": [],
                "valType": "bool",
                "inputType": "bool",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Check all",
                "hint": "When checking these resources, also check for all currently downloading?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "actionType": {
                "val": "Start and Check",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "Start and Check",
                    "Start Only",
                    "Check Only"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Preload actions",
                "hint": "Should this Component start an / or check resource preloading?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "forceEndRoutine": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Force end Routine",
                "hint": "Should we end the Routine when the resource download is complete?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            }
        }
    },
    "RegionOfInterestComponent": {
        "__class__": "psychopy.experiment.components.roi:RegionOfInterestComponent",
        "__name__": "RegionOfInterestComponent",
        "categories": [
            "Eyetracking"
        ],
        "targets": [
            "PsychoPy"
        ],
        "plugin": null,
        "iconSVG": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 32 32\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:space=\"preserve\" xmlns:serif=\"http://www.serif.com/\" style=\"fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2;\">\n    <g id=\"RegionOfInterestComponent\" transform=\"matrix(0.451519,0,0,0.451519,0,0)\">\n        <rect x=\"0\" y=\"0\" width=\"70.872\" height=\"70.866\" style=\"fill:none;\"/>\n        <g transform=\"matrix(0,0.997716,0.997716,0,35.4361,18.5967)\">\n            <path d=\"M16.875,-16.875C7.555,-16.875 0,-9.32 0,0C0,9.32 7.555,16.875 16.875,16.875C26.195,16.875 33.75,9.32 33.75,0C33.75,-9.32 26.195,-16.875 16.875,-16.875\" style=\"fill:rgb(2,169,234);fill-rule:nonzero;\"/>\n        </g>\n        <g transform=\"matrix(0,-0.997716,-0.997716,0,33.3437,8.27124)\">\n            <path d=\"M-26.768,-32.1C-39.941,-24.322 -48.465,-13.622 -48.465,-2.097C-48.465,9.428 -39.941,20.128 -26.768,27.906L-24.948,28.98L-23.235,27.741C-11.846,19.499 -5.983,9.1 -5.983,-2.097C-5.983,-13.294 -11.846,-23.693 -23.235,-31.935L-24.948,-33.174L-26.768,-32.1ZM-25.318,-25.422C-16.953,-18.817 -12.437,-10.816 -12.437,-2.097C-12.437,6.622 -16.952,14.623 -25.318,21.228C-35.241,14.938 -42.011,6.906 -42.011,-2.097C-42.011,-11.1 -35.241,-19.132 -25.318,-25.422ZM-21.749,-2.25C-21.412,-3.135 -21.227,-4.094 -21.227,-5.097C-21.227,-9.514 -24.807,-13.094 -29.224,-13.094C-33.641,-13.094 -37.221,-9.514 -37.221,-5.097C-37.221,-0.68 -33.641,2.9 -29.224,2.9C-28.876,2.9 -28.534,2.878 -28.198,2.835C-28.609,2.194 -28.847,1.432 -28.847,0.614C-28.847,-1.665 -26.999,-3.513 -24.72,-3.513C-23.553,-3.513 -22.499,-3.029 -21.749,-2.25Z\" style=\"fill:var(--outline);\"/>\n        </g>\n        <g id=\"ROI\" transform=\"matrix(1.23588,0,0,1.23588,54.425,38.36)\">\n            <path d=\"M0,20.835C-3.963,17.706 -9.545,17.671 -13.547,20.751L-15.261,22.071C-16.943,23.365 -19.373,22.647 -20.135,20.666C-20.69,19.225 -21.02,17.667 -21.077,16.036C-21.249,11.221 -19.038,6.881 -15.487,4.149C-13.205,2.392 -10.13,-2.247 -7.027,-2.363C-2.221,-2.53 -0.331,4.433 2.404,7.969C4.16,10.251 9.611,10.288 9.719,13.397C9.863,17.411 6.744,19.009 3.65,21.009C2.522,21.738 1.054,21.667 0,20.835\" style=\"fill:rgb(242,84,91);fill-rule:nonzero;\"/>\n        </g>\n    </g>\n</svg>\n",
        "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\roi\\eyetracker_roi.png",
        "tooltip": "Region Of Interest: Define a region of interest for use with eyetrackers",
        "version": "2021.2.0",
        "beta": false,
        "validatorClasses": [
            "VisualValidatorRoutine"
        ],
        "hidden": false,
        "params": {
            "name": {
                "val": "roi",
                "valType": "code",
                "inputType": "name",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Name",
                "hint": "Name of this Component (alphanumeric or _, no spaces)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startVal": {
                "val": 0.0,
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Start",
                "hint": "When does the Component start?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startEstim": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Expected start (s)",
                "hint": "(Optional) expected start (s), purely for representing in the timeline",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startType": {
                "val": "time (s)",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "time (s)",
                    "frame N",
                    "condition"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Start type",
                "hint": "How do you want to define your start point?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "stopVal": {
                "val": 1.0,
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": [],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop",
                "hint": "When does the Component end? (blank is endless)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "durationEstim": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Expected duration (s)",
                "hint": "(Optional) expected duration (s), purely for representing in the timeline",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "stopType": {
                "val": "duration (s)",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "duration (s)",
                    "duration (frames)",
                    "time (s)",
                    "frame N",
                    "condition"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop type",
                "hint": "How do you want to define your end point?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "size": {
                "val": [
                    0.5,
                    0.5
                ],
                "valType": "list",
                "inputType": "single",
                "categ": "Layout",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Size [w,h]",
                "hint": "Size of this stimulus [w,h]. Note that for a line only the first value is used, for triangle and rect the [w,h] is as expected,\n but for higher-order polygons it represents the [w,h] of the ellipse that the polygon sits on!! ",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "pos": {
                "val": [
                    0,
                    0
                ],
                "valType": "list",
                "inputType": "single",
                "categ": "Layout",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Position [x,y]",
                "hint": "Position of this stimulus (e.g. [1,2] )",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "units": {
                "val": "from exp settings",
                "valType": "str",
                "inputType": "choice",
                "categ": "Layout",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "from exp settings"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Spatial units",
                "hint": "Units of dimensions for this stimulus",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "anchor": {
                "val": "center",
                "valType": "str",
                "inputType": "choice",
                "categ": "Layout",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [
                    "center",
                    "top-center",
                    "bottom-center",
                    "center-left",
                    "center-right",
                    "top-left",
                    "top-right",
                    "bottom-left",
                    "bottom-right"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Anchor",
                "hint": "Which point on the stimulus should be anchored to its exact position?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "ori": {
                "val": 0,
                "valType": "num",
                "inputType": "spin",
                "categ": "Layout",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [
                    -360,
                    360
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Orientation",
                "hint": "Orientation of this stimulus (in deg)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "shape": {
                "val": "triangle",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "line",
                    "triangle",
                    "rectangle",
                    "circle",
                    "cross",
                    "star7",
                    "arrow",
                    "regular polygon...",
                    "custom polygon..."
                ],
                "allowedLabels": [
                    "Line",
                    "Triangle",
                    "Rectangle",
                    "Circle",
                    "Cross",
                    "Star",
                    "Arrow",
                    "Regular polygon...",
                    "Custom polygon..."
                ],
                "ctrlParams": {},
                "label": "Shape",
                "hint": "What shape is this? With 'regular polygon...' you can set number of vertices and with 'custom polygon...' you can set vertices",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "nVertices": {
                "val": 4,
                "valType": "int",
                "inputType": "single",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Num. vertices",
                "hint": "How many vertices in your regular polygon?",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "shape",
                            "condition": "=='regular polygon...'"
                        }
                    ],
                    "enabled": []
                }
            },
            "saveStartStop": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Save onset/offset times",
                "hint": "Store the onset/offset times in the data file (as well as in the log file).",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "syncScreenRefresh": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Sync timing with screen refresh",
                "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "disabled": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Disable Component",
                "hint": "Disable this Component",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "validator": {
                "val": "",
                "valType": "code",
                "inputType": "validator",
                "categ": "Testing",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "VisualValidatorRoutine"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Validate with...",
                "hint": "Name of validator Component/Routine to use to check the timing of this stimulus.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "vertices": {
                "val": "",
                "valType": "list",
                "inputType": "single",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Vertices",
                "hint": "What are the vertices of your polygon? Should be an nx2 array or a list of [x, y] lists",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "shape",
                            "condition": "=='custom polygon...'"
                        }
                    ],
                    "enabled": []
                }
            },
            "draggable": {
                "val": false,
                "valType": "code",
                "inputType": "bool",
                "categ": "Layout",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Draggable?",
                "hint": "Should this stimulus be moveble by clicking and dragging?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "endRoutineOn": {
                "val": "none",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "look at",
                    "look away",
                    "none"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "End Routine on...",
                "hint": "Under what condition should this ROI end the Routine?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "lookDur": {
                "val": 0.1,
                "valType": "num",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Min. look time",
                "hint": "Minimum dwell time within roi (look at) or outside roi (look away).",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "endRoutineOn",
                            "condition": "!='none'"
                        }
                    ],
                    "enabled": []
                }
            },
            "debug": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Testing",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Debug mode",
                "hint": "In debug mode, the ROI is drawn in red. Use this to see what area of the screen is in the ROI.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "save": {
                "val": "every look",
                "valType": "str",
                "inputType": "choice",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "first look",
                    "last look",
                    "every look",
                    "none"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Save...",
                "hint": "What looks on this ROI should be saved to the data output?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "timeRelativeTo": {
                "val": "roi onset",
                "valType": "str",
                "inputType": "choice",
                "categ": "Data",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [
                    "roi onset",
                    "experiment",
                    "routine"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Time relative to...",
                "hint": "What should the values of roi.time should be relative to?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            }
        }
    },
    "RoutineSettingsComponent": {
        "__class__": "psychopy.experiment.components.routineSettings:RoutineSettingsComponent",
        "__name__": "RoutineSettingsComponent",
        "categories": [
            "Other"
        ],
        "targets": [
            "PsychoPy",
            "PsychoJS"
        ],
        "plugin": null,
        "iconSVG": null,
        "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\routineSettings\\routineSettings.png",
        "tooltip": "Settings for this Routine.",
        "version": "2023.2.0",
        "beta": false,
        "validatorClasses": [],
        "hidden": true,
        "params": {
            "name": {
                "val": "",
                "valType": "code",
                "inputType": "name",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Name",
                "hint": "Name of this Component (alphanumeric or _, no spaces)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "stopVal": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Flow",
                "updates": "constant",
                "allowedUpdates": [],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Timeout",
                "hint": "When should this Routine end, if not already ended by a Component? Leave blank for endless.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "durationEstim": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Flow",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Expected duration (s)",
                "hint": "(Optional) expected duration (s), purely for representing in the timeline",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "stopType": {
                "val": "duration (s)",
                "valType": "str",
                "inputType": "choice",
                "categ": "Flow",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "duration (s)",
                    "frame N",
                    "condition"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop type",
                "hint": "When should this Routine end, if not already ended by a Component?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "forceNonSlip": {
                "val": false,
                "valType": "code",
                "inputType": "bool",
                "categ": "Flow",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Non-slip timing",
                "hint": "If this Routine ended by hitting its max duration, reset the timer by subtracting the max duration rather than resetting to 0. Only tick this if you're sure you know how long the Routine is going to take, otherwise you'll get incorrect timestamps in the next Routine!",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "skipIf": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Flow",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Skip if...",
                "hint": "Skip this Routine if the value in this contorl evaluates to True. Leave blank to not skip.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "useWindowParams": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Window",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Different window settings?",
                "hint": "Should the appearance of the window change while this Routine is running?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "color": {
                "val": "$[0,0,0]",
                "valType": "color",
                "inputType": "color",
                "categ": "Window",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Background color",
                "hint": "Color of the screen this Routine (e.g. black, $[1.0,1.0,1.0], $variable. Right-click to bring up a color-picker.)",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "useWindowParams",
                            "condition": ""
                        }
                    ],
                    "enabled": []
                }
            },
            "colorSpace": {
                "val": "rgb",
                "valType": "str",
                "inputType": "choice",
                "categ": "Window",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "rgb",
                    "dkl",
                    "lms",
                    "hsv",
                    "hex"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Color space",
                "hint": "Needed if color is defined numerically (see PsychoPy documentation on color spaces)",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "useWindowParams",
                            "condition": ""
                        }
                    ],
                    "enabled": []
                }
            },
            "backgroundImg": {
                "val": "",
                "valType": "str",
                "inputType": "file",
                "categ": "Window",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Background image",
                "hint": "Image file to use as a background (leave blank for no image)",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "useWindowParams",
                            "condition": ""
                        }
                    ],
                    "enabled": []
                }
            },
            "backgroundFit": {
                "val": "none",
                "valType": "str",
                "inputType": "choice",
                "categ": "Window",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "none",
                    "cover",
                    "contain",
                    "fill",
                    "scale-down"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Background fit",
                "hint": "How should the background image scale to fit the window size?",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "useWindowParams",
                            "condition": ""
                        }
                    ],
                    "enabled": []
                }
            },
            "saveStartStop": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Save onset/offset times",
                "hint": "Save the start and stop times of this Routine (according to the global clock) to the data file.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "disabled": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Disable Routine",
                "hint": "Disable this Component",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "desc": {
                "val": "",
                "valType": "str",
                "inputType": "multi",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Description",
                "hint": "Some descriptive text to give information about this Routine. This won't affect how it runs, it's purely for your own reference!",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            }
        }
    },
    "SerialOutComponent": {
        "__class__": "psychopy.experiment.components.serialOut:SerialOutComponent",
        "__name__": "SerialOutComponent",
        "categories": [
            "I/O",
            "EEG"
        ],
        "targets": [
            "PsychoPy"
        ],
        "plugin": null,
        "iconSVG": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 32 32\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:space=\"preserve\" xmlns:serif=\"http://www.serif.com/\" style=\"fill-rule:evenodd;clip-rule:evenodd;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:1;\">\n    <g id=\"light-components-SerialOutComponent\" serif:id=\"light/components/SerialOutComponent\" transform=\"matrix(0.451519,0,0,0.451519,0,0)\">\n        <rect x=\"0\" y=\"0\" width=\"70.872\" height=\"70.866\" style=\"fill:none;\"/>\n        <clipPath id=\"_clip1\">\n            <rect x=\"0\" y=\"0\" width=\"70.872\" height=\"70.866\"/>\n        </clipPath>\n        <g clip-path=\"url(#_clip1)\">\n            <g transform=\"matrix(0.910099,0,0,0.339546,-69.626,-101.979)\">\n                <rect x=\"92.801\" y=\"439.678\" width=\"45.205\" height=\"21.205\" style=\"fill:rgb(37,169,234);\"/>\n            </g>\n            <g transform=\"matrix(0.910099,0,0,0.679091,-69.626,-251.27)\">\n                <rect x=\"92.801\" y=\"439.678\" width=\"45.205\" height=\"21.205\" style=\"fill:none;stroke:var(--outline);stroke-width:5.52px;\"/>\n            </g>\n            <g transform=\"matrix(1.2847,0,0,1.2847,-112.555,-523.398)\">\n                <path d=\"M135.348,412.582L94.983,412.582C92.989,412.582 91.518,415.822 92.021,419.147L93.828,431.242C94.174,433.566 95.397,435.195 96.799,435.195L133.542,435.195C134.944,435.195 136.158,433.566 136.513,431.242L138.32,419.147C138.813,415.822 137.352,412.582 135.348,412.582ZM126.212,429.751C125.057,429.751 124.135,428.814 124.135,427.675C124.135,426.52 125.057,425.582 126.212,425.582C127.367,425.582 128.288,426.52 128.288,427.675C128.288,428.814 127.367,429.751 126.212,429.751ZM103.923,429.751C102.768,429.751 101.847,428.814 101.847,427.675C101.847,426.52 102.768,425.582 103.923,425.582C105.078,425.582 105.998,426.52 105.998,427.675C105.998,428.814 105.078,429.751 103.923,429.751ZM118.783,429.751C117.626,429.751 116.706,428.814 116.706,427.675C116.706,426.52 117.626,425.582 118.783,425.582C119.938,425.582 120.858,426.52 120.858,427.675C120.858,428.814 119.938,429.751 118.783,429.751ZM111.352,429.751C110.197,429.751 109.276,428.814 109.276,427.675C109.276,426.52 110.197,425.582 111.352,425.582C112.507,425.582 113.429,426.52 113.429,427.675C113.429,428.814 112.507,429.751 111.352,429.751ZM119.859,420.103C119.859,418.948 120.795,418.026 121.951,418.026C123.09,418.026 124.026,418.948 124.026,420.103C124.026,421.258 123.09,422.179 121.951,422.179C120.795,422.179 119.859,421.258 119.859,420.103ZM113.085,420.103C113.085,418.948 114.021,418.026 115.176,418.026C116.315,418.026 117.252,418.948 117.252,420.103C117.252,421.258 116.315,422.179 115.176,422.179C114.021,422.179 113.085,421.258 113.085,420.103ZM106.311,420.103C106.311,418.948 107.248,418.026 108.403,418.026C109.542,418.026 110.478,418.948 110.478,420.103C110.478,421.258 109.542,422.179 108.403,422.179C107.248,422.179 106.311,421.258 106.311,420.103ZM99.537,420.103C99.537,418.948 100.473,418.026 101.628,418.026C102.768,418.026 103.704,418.948 103.704,420.103C103.704,421.258 102.768,422.179 101.628,422.179C100.473,422.179 99.537,421.258 99.537,420.103ZM126.633,420.103C126.633,418.948 127.57,418.026 128.725,418.026C129.864,418.026 130.801,418.948 130.801,420.103C130.801,421.258 129.864,422.179 128.725,422.179C127.57,422.179 126.633,421.258 126.633,420.103Z\" style=\"fill:rgb(2,169,234);fill-rule:nonzero;\"/>\n            </g>\n            <g transform=\"matrix(0.937998,0,0,1.2847,61.3263,35.6951)\">\n                <path d=\"M0,-22.613L-55.285,-22.613C-58.016,-22.613 -60.03,-19.373 -59.341,-16.048L-56.866,-3.953C-56.393,-1.629 -54.717,0 -52.797,0L-2.474,0C-0.554,0 1.109,-1.629 1.595,-3.953L4.07,-16.048C4.746,-19.373 2.745,-22.613 0,-22.613Z\" style=\"fill:none;fill-rule:nonzero;stroke:var(--outline);stroke-width:3.94px;stroke-linejoin:miter;stroke-miterlimit:10;\"/>\n            </g>\n        </g>\n    </g>\n</svg>\n",
        "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\serialOut\\serial.png",
        "tooltip": "Serial out: send signals from a serial port",
        "version": "2022.2.0",
        "beta": false,
        "validatorClasses": [],
        "hidden": false,
        "params": {
            "name": {
                "val": "serialPort",
                "valType": "code",
                "inputType": "name",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Name",
                "hint": "Name of this Component (alphanumeric or _, no spaces)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startVal": {
                "val": 0.0,
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Start",
                "hint": "When does the Component start?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startEstim": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Expected start (s)",
                "hint": "(Optional) expected start (s), purely for representing in the timeline",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startType": {
                "val": "time (s)",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "time (s)",
                    "frame N",
                    "condition"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Start type",
                "hint": "How do you want to define your start point?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "stopVal": {
                "val": 1.0,
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": [],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop",
                "hint": "When does the Component end? (blank is endless)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "durationEstim": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Expected duration (s)",
                "hint": "(Optional) expected duration (s), purely for representing in the timeline",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "stopType": {
                "val": "duration (s)",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "duration (s)",
                    "duration (frames)",
                    "time (s)",
                    "frame N",
                    "condition"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop type",
                "hint": "How do you want to define your end point?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "deviceLabel": {
                "val": "",
                "valType": "device",
                "inputType": "device",
                "categ": "Device",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "python:///psychopy.experiment.components.serialOut:SerialDeviceBackend"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Device",
                "hint": "The named device from Device Manager to use for this Component.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "saveStartStop": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Save onset/offset times",
                "hint": "Store the onset/offset times in the data file (as well as in the log file).",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "syncScreenRefresh": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Sync timing with screen refresh",
                "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "disabled": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Disable Component",
                "hint": "Disable this Component",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startDataType": {
                "val": "str",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "str",
                    "num",
                    "binary",
                    "char",
                    "code"
                ],
                "allowedLabels": [
                    "String",
                    "Numeric (0-255)",
                    "Binary",
                    "Character (Byte)",
                    "Code"
                ],
                "ctrlParams": {},
                "label": "Start data type",
                "hint": "Type of data to be sent: A number, a binary sequence, a character byte, or custom code ($)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startDataStr": {
                "val": "r",
                "valType": "str",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Start data (string)",
                "hint": "Send a regular string (which will be converted to binary) on start",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "startDataType",
                            "condition": "== 'str'"
                        }
                    ],
                    "enabled": []
                }
            },
            "startDataNumeric": {
                "val": 114,
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Start data (numeric)",
                "hint": "Send a number between 0-255 on start",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "startDataType",
                            "condition": "== 'num'"
                        }
                    ],
                    "enabled": []
                }
            },
            "startDataBinary": {
                "val": "1110010",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Start data (binary)",
                "hint": "Send a binary sequence (1s and 0s) on start",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "startDataType",
                            "condition": "== 'binary'"
                        }
                    ],
                    "enabled": []
                }
            },
            "startDataChar": {
                "val": "\\x72",
                "valType": "str",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Start data (char)",
                "hint": "Send a character byte (e.g. \\x73) on start",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "startDataType",
                            "condition": "== 'char'"
                        }
                    ],
                    "enabled": []
                }
            },
            "startDataCode": {
                "val": "b'r'",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Start data (code)",
                "hint": "Send custom code (e.g. from a variable) on start",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "startDataType",
                            "condition": "== 'code'"
                        }
                    ],
                    "enabled": []
                }
            },
            "stopDataType": {
                "val": "str",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "str",
                    "num",
                    "binary",
                    "char",
                    "code"
                ],
                "allowedLabels": [
                    "String",
                    "Numeric (0-255)",
                    "Binary",
                    "Character (Byte)",
                    "Code"
                ],
                "ctrlParams": {},
                "label": "Stop data type",
                "hint": "Type of data to be sent: A number, a binary sequence, a character byte, or custom code ($)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "stopDataStr": {
                "val": "x",
                "valType": "str",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop data (string)",
                "hint": "Send a regular string (which will be converted to binary) on stop",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "stopDataType",
                            "condition": "== 'str'"
                        }
                    ],
                    "enabled": []
                }
            },
            "stopDataNumeric": {
                "val": 120,
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop data (numeric)",
                "hint": "Send a number between 0-255 on stop",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "stopDataType",
                            "condition": "== 'num'"
                        }
                    ],
                    "enabled": []
                }
            },
            "stopDataBinary": {
                "val": "1111000",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop data (binary)",
                "hint": "Send a binary sequence (1s and 0s) on stop",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "stopDataType",
                            "condition": "== 'binary'"
                        }
                    ],
                    "enabled": []
                }
            },
            "stopDataChar": {
                "val": "\\x78",
                "valType": "str",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop data (char)",
                "hint": "Send a character byte (e.g. \\x73) on stop",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "stopDataType",
                            "condition": "== 'char'"
                        }
                    ],
                    "enabled": []
                }
            },
            "stopDataCode": {
                "val": "b'x'",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop data (code)",
                "hint": "Send custom code (e.g. from a variable) on stop",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "stopDataType",
                            "condition": "== 'code'"
                        }
                    ],
                    "enabled": []
                }
            },
            "getResponse": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Get response?",
                "hint": "After sending a signal, should PsychoPy read and record a response from the port?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            }
        }
    },
    "SettingsComponent": {
        "__class__": "psychopy.experiment.components.settings:SettingsComponent",
        "__name__": "SettingsComponent",
        "categories": [
            "Custom"
        ],
        "targets": [
            "PsychoPy",
            "PsychoJS"
        ],
        "plugin": null,
        "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\settings\\settings.png",
        "tooltip": "Edit settings for this experiment",
        "version": "0.0.0",
        "beta": false,
        "hidden": true,
        "params": {
            "expName": {
                "val": "",
                "valType": "str",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Experiment name",
                "hint": "Name of the entire experiment (taken by default from the filename on save)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "expVersion": {
                "val": "",
                "valType": "str",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Experiment version",
                "hint": "Version number of the experiment (a string). Just for your records if it's useful to store",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "Audio lib": {
                "val": "ptb",
                "valType": "str",
                "inputType": "choice",
                "categ": "Audio",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": "python:///psychopy.experiment.components.settings:getSoundBackends",
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Audio library",
                "hint": "Which Python sound engine do you want to play your sounds?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "Force stereo": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Audio",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Force stereo",
                "hint": "Force audio to stereo (2-channel) output",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "HTML path": {
                "val": "",
                "valType": "str",
                "inputType": "single",
                "categ": "Online",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Output path",
                "hint": "Place the HTML files will be saved locally ",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "exportHTML": {
                "val": "on Sync",
                "valType": "str",
                "inputType": "choice",
                "categ": "Online",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "on Save",
                    "on Sync",
                    "manually"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Export HTML",
                "hint": "When to export experiment to the HTML folder.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "Completed URL": {
                "val": "",
                "valType": "str",
                "inputType": "single",
                "categ": "Online",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Completed URL",
                "hint": "Where should participants be redirected after the experiment on completion, e.g.\nhttps://pavlovia.org/surveys/XXXXXX-XXXX-XXXXXXX?tab=0",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "Incomplete URL": {
                "val": "",
                "valType": "str",
                "inputType": "single",
                "categ": "Online",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Incomplete URL",
                "hint": "Where participants are redirected if they do not complete the task, e.g.\nhttps://pavlovia.org/surveys/XXXXXX-XXXX-XXXXXXX?tab=0",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "End Message": {
                "val": "Thank you for your patience.",
                "valType": "str",
                "inputType": "single",
                "categ": "Online",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "End message",
                "hint": "Message to display to participants upon completing the experiment",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "Resources": {
                "val": [],
                "valType": "list",
                "inputType": "fileList",
                "categ": "Online",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Additional resources",
                "hint": "Any additional resources needed",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "runMode": {
                "val": 0,
                "valType": "code",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    0,
                    1
                ],
                "allowedLabels": [
                    "Piloting",
                    "Running"
                ],
                "ctrlParams": {},
                "label": "Run mode",
                "hint": "In piloting mode, all of the settings from prefs->piloting are applied. This is recommended while the experiment is a work in progress.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "Use version": {
                "val": "",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": "python:///psychopy.experiment.components.settings:getVersions",
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Use PsychoPy version",
                "hint": "The version of PsychoPy to use when running the experiment.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "Enable Escape": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Enable escape key",
                "hint": "Enable the <esc> key, to allow subjects to quit / break out of the experiment",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "rush": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Enable 'rush' mode",
                "hint": "Enable 'rush' mode, which will raise CPU priority while the experiment is running",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "Show info dlg": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Show info dialog",
                "hint": "Start the experiment with a dialog to set info (e.g.participant or condition)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "Experiment info": {
                "val": "{'participant':'f\"{randint(0, 999999):06.0f}\"', 'session':'001'}",
                "valType": "code",
                "inputType": "dict",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [
                    "Field",
                    "Default"
                ],
                "ctrlParams": {},
                "label": "Experiment info",
                "hint": "The info to present in a dialog box. Right-click to check syntax and preview the dialog box.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": [
                        {
                            "param": "Show info dlg",
                            "condition": "==True"
                        }
                    ]
                }
            },
            "Monitor": {
                "val": "testMonitor",
                "valType": "str",
                "inputType": "single",
                "categ": "Screen",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Monitor",
                "hint": "Name of the monitor (from Monitor Center). Right-click to go there, then copy & paste a monitor name here.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "winBackend": {
                "val": "pyglet",
                "valType": "str",
                "inputType": "choice",
                "categ": "Screen",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": {
                    "pyglet": ".pygletbackend.PygletBackend",
                    "glfw": ".glfwbackend.GLFWBackend",
                    "pygame": ".pygamebackend.PygameBackend"
                },
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Window backend",
                "hint": "What Python package should be used behind the scenes for drawing to the window?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "Screen": {
                "val": 1,
                "valType": "num",
                "inputType": "spin",
                "categ": "Screen",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Screen",
                "hint": "Which physical screen to run on (1 or 2)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "Full-screen window": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Screen",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Full-screen window",
                "hint": "Run the experiment full-screen (recommended)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "Window size (pixels)": {
                "val": [
                    1024,
                    768
                ],
                "valType": "list",
                "inputType": "single",
                "categ": "Screen",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Window size (pixels)",
                "hint": "Size of window (if not fullscreen)",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "Full-screen window",
                            "condition": "==False"
                        }
                    ],
                    "enabled": []
                }
            },
            "Show mouse": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Screen",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Show mouse",
                "hint": "Should the mouse be visible on screen? Only applicable for fullscreen experiments.",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "Full-screen window",
                            "condition": ""
                        }
                    ],
                    "enabled": []
                }
            },
            "Units": {
                "val": "height",
                "valType": "str",
                "inputType": "choice",
                "categ": "Screen",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "use prefs",
                    "deg",
                    "pix",
                    "cm",
                    "norm",
                    "height",
                    "degFlatPos",
                    "degFlat"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Units",
                "hint": "Units to use for window/stimulus coordinates (e.g. cm, pix, deg)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "color": {
                "val": "$[0,0,0]",
                "valType": "color",
                "inputType": "color",
                "categ": "Screen",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Background color",
                "hint": "Color of the screen (e.g. black, $[1.0,1.0,1.0], $variable. Right-click to bring up a color-picker.)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "blendMode": {
                "val": "avg",
                "valType": "str",
                "inputType": "choice",
                "categ": "Screen",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "add",
                    "avg",
                    "nofbo"
                ],
                "allowedLabels": [
                    "add",
                    "average",
                    "average (no FBO)"
                ],
                "ctrlParams": {},
                "label": "Blend mode",
                "hint": "Should new stimuli be added or averaged with the stimuli that have been drawn already",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "colorSpace": {
                "val": "rgb",
                "valType": "str",
                "inputType": "choice",
                "categ": "Screen",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "rgb",
                    "dkl",
                    "lms",
                    "hsv",
                    "hex"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Color space",
                "hint": "Needed if color is defined numerically (see PsychoPy documentation on color spaces)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "backgroundImg": {
                "val": "",
                "valType": "str",
                "inputType": "file",
                "categ": "Screen",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Background image",
                "hint": "Image file to use as a background (leave blank for no image)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "backgroundFit": {
                "val": "none",
                "valType": "str",
                "inputType": "choice",
                "categ": "Screen",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "none",
                    "cover",
                    "contain",
                    "fill",
                    "scale-down"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Background fit",
                "hint": "How should the background image scale to fit the window size?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "measureFrameRate": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Screen",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Measure frame rate?",
                "hint": "Should we measure your frame rate at the start of the experiment? This is highly recommended for precise timing.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "frameRate": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Screen",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Frame rate",
                "hint": "Frame rate to store instead of measuring at the start of the experiment. Leave blank to store no frame rate, but be wary: This will lead to errors if frame rate isn't supplied by other means.",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "measureFrameRate",
                            "condition": "==False"
                        }
                    ],
                    "enabled": []
                }
            },
            "frameRateMsg": {
                "val": "Attempting to measure frame rate of screen, please wait...",
                "valType": "str",
                "inputType": "single",
                "categ": "Screen",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Frame rate message",
                "hint": "Message to display while frame rate is measured. Leave blank for no message.",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "measureFrameRate",
                            "condition": ""
                        }
                    ],
                    "enabled": []
                }
            },
            "Data filename": {
                "val": "u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])",
                "valType": "code",
                "inputType": "single",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Data filename",
                "hint": "Code to create your custom file name base. Don't give a file extension - this will be added.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "Data file delimiter": {
                "val": "auto",
                "valType": "str",
                "inputType": "choice",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "auto",
                    "comma",
                    "semicolon",
                    "tab"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Data file delimiter",
                "hint": "What symbol should the data file use to separate columns? Auto will select a delimiter automatically from the filename.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "sortColumns": {
                "val": "time",
                "valType": "str",
                "inputType": "choice",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "alphabetical",
                    "priority",
                    "time"
                ],
                "allowedLabels": [
                    "Alphabetical",
                    "Priority",
                    "First added"
                ],
                "ctrlParams": {},
                "label": "Sort columns by...",
                "hint": "How should data file columns be sorted? Alphabetically, by priority, or simply in the order they were added?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "colPriority": {
                "val": {
                    "thisRow.t": "priority.CRITICAL",
                    "expName": "priority.LOW"
                },
                "valType": "dict",
                "inputType": "dict",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [
                    "Column",
                    "Priority"
                ],
                "ctrlParams": {},
                "label": "Column priority",
                "hint": "Assign priority values to certain columns. To use predefined values, you can do $priority.HIGH, $priority.MEDIUM, etc.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "Save excel file": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Save Excel file",
                "hint": "Save data from loops in Excel (.xlsx) format",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "Save log file": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Save log file",
                "hint": "Save a detailed log (more detailed than the Excel/csv files) of the entire experiment",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "Save csv file": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Save csv file (summaries)",
                "hint": "Save data from loops in comma-separated-value (.csv) format for maximum portability",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "Save wide csv file": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Save csv file (trial-by-trial)",
                "hint": "Save data from loops in comma-separated-value (.csv) format for maximum portability",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "Save psydat file": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    true
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Save psydat file",
                "hint": "Save data from loops in psydat format. This is useful for Python programmers to generate analysis scripts.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "Save hdf5 file": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Save hdf5 file",
                "hint": "Save data from eyetrackers in hdf5 format. This is useful for viewing and analyzing complex data in structures.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": [
                        {
                            "param": "eyetracker",
                            "condition": " in ['MouseGaze', 'GazePoint', 'SR Research Ltd', 'Tobii Technology', 'Pupil Labs', 'Pupil Labs (Neon)', 'EyeLogic']"
                        }
                    ]
                }
            },
            "logging level": {
                "val": "info",
                "valType": "code",
                "inputType": "choice",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "error",
                    "warning",
                    "data",
                    "exp",
                    "info",
                    "debug"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "File logging level",
                "hint": "How much output do you want in the log files? ('error' is fewest messages, 'debug' is most)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "consoleLoggingLevel": {
                "val": "warning",
                "valType": "code",
                "inputType": "choice",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "error",
                    "warning",
                    "data",
                    "exp",
                    "info",
                    "debug"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Console / app logging level",
                "hint": "How much output do you want displayed in the console / app? ('error' is fewest messages, 'debug' is most)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "clockFormat": {
                "val": "float",
                "valType": "str",
                "inputType": "choice",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "iso",
                    "float"
                ],
                "allowedLabels": [
                    "Wall clock",
                    "Experiment start"
                ],
                "ctrlParams": {},
                "label": "Clock format",
                "hint": "Format to use for Routine start timestamps; either wall clock time (in ISO 8601 format) or seconds since experiment start (as a float).",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "eyetracker": {
                "val": "None",
                "valType": "str",
                "inputType": "choice",
                "categ": "Eyetracking",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "None",
                    "eyetracker.hw.mouse.EyeTracker"
                ],
                "allowedLabels": [
                    "None",
                    "MouseGaze"
                ],
                "ctrlParams": {},
                "label": "Eyetracker device",
                "hint": "What kind of eye tracker should PsychoPy use? Select 'MouseGaze' to use the mouse to simulate eye movement (for debugging without a tracker connected)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "gpAddress": {
                "val": "127.0.0.1",
                "valType": "str",
                "inputType": "single",
                "categ": "Eyetracking",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "GazePoint IP address",
                "hint": "IP Address of the computer running GazePoint Control.",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "eyetracker",
                            "condition": "=='GazePoint'"
                        }
                    ],
                    "enabled": []
                }
            },
            "gpPort": {
                "val": 4242,
                "valType": "num",
                "inputType": "single",
                "categ": "Eyetracking",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "GazePoint port",
                "hint": "Port of the GazePoint Control server. Usually 4242.",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "eyetracker",
                            "condition": "=='GazePoint'"
                        }
                    ],
                    "enabled": []
                }
            },
            "elModel": {
                "val": "EYELINK 1000 DESKTOP",
                "valType": "str",
                "inputType": "choice",
                "categ": "Eyetracking",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "EYELINK 1000 DESKTOP",
                    "EYELINK 1000 TOWER",
                    "EYELINK 1000 REMOTE",
                    "EYELINK 1000 LONG RANGE"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Model name",
                "hint": "Eye tracker model.",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "eyetracker",
                            "condition": "=='SR Research Ltd'"
                        }
                    ],
                    "enabled": []
                }
            },
            "elAddress": {
                "val": "100.1.1.1",
                "valType": "str",
                "inputType": "single",
                "categ": "Eyetracking",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "EyeLink IP address",
                "hint": "IP Address of the EyeLink *Host* computer.",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "eyetracker",
                            "condition": "=='SR Research Ltd'"
                        }
                    ],
                    "enabled": []
                }
            },
            "elSimMode": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Eyetracking",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Mouse simulation mode",
                "hint": "Set the EyeLink to run in mouse simulation mode.",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "eyetracker",
                            "condition": "=='SR Research Ltd'"
                        }
                    ],
                    "enabled": []
                }
            },
            "mgMove": {
                "val": "CONTINUOUS",
                "valType": "str",
                "inputType": "choice",
                "categ": "Eyetracking",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "CONTINUOUS",
                    "LEFT_BUTTON",
                    "MIDDLE_BUTTON",
                    "RIGHT_BUTTON"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Move button",
                "hint": "Mouse button to press for eye movement.",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "eyetracker",
                            "condition": "=='MouseGaze'"
                        },
                        {
                            "param": "eyetracker",
                            "condition": "== 'eyetracker.hw.mouse.EyeTracker'"
                        }
                    ],
                    "enabled": []
                }
            },
            "mgBlink": {
                "val": "MIDDLE_BUTTON",
                "valType": "list",
                "inputType": "multiChoice",
                "categ": "Eyetracking",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "LEFT_BUTTON",
                    "MIDDLE_BUTTON",
                    "RIGHT_BUTTON"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Blink button",
                "hint": "Mouse button to press for a blink.",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "eyetracker",
                            "condition": "=='MouseGaze'"
                        },
                        {
                            "param": "eyetracker",
                            "condition": "== 'eyetracker.hw.mouse.EyeTracker'"
                        }
                    ],
                    "enabled": []
                }
            },
            "mgSaccade": {
                "val": 0.5,
                "valType": "num",
                "inputType": "single",
                "categ": "Eyetracking",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Saccade threshold",
                "hint": "Visual degree threshold for Saccade event creation.",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "eyetracker",
                            "condition": "=='MouseGaze'"
                        },
                        {
                            "param": "eyetracker",
                            "condition": "== 'eyetracker.hw.mouse.EyeTracker'"
                        }
                    ],
                    "enabled": []
                }
            },
            "elSampleRate": {
                "val": 1000,
                "valType": "num",
                "inputType": "choice",
                "categ": "Eyetracking",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "250",
                    "500",
                    "1000",
                    "2000"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Sampling rate",
                "hint": "Eye tracker sampling rate.",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "eyetracker",
                            "condition": "=='SR Research Ltd'"
                        }
                    ],
                    "enabled": []
                }
            },
            "elTrackEyes": {
                "val": "RIGHT_EYE",
                "valType": "str",
                "inputType": "choice",
                "categ": "Eyetracking",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "LEFT_EYE",
                    "RIGHT_EYE",
                    "BOTH"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Track eyes",
                "hint": "Select with eye(s) to track.",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "eyetracker",
                            "condition": "=='SR Research Ltd'"
                        }
                    ],
                    "enabled": []
                }
            },
            "elLiveFiltering": {
                "val": "FILTER_LEVEL_OFF",
                "valType": "str",
                "inputType": "choice",
                "categ": "Eyetracking",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "FILTER_LEVEL_OFF",
                    "FILTER_LEVEL_1",
                    "FILTER_LEVEL_2"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Live sample filtering",
                "hint": "Filter eye sample data live, as it is streamed to the driving device. This may reduce the sampling speed.",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "eyetracker",
                            "condition": "=='SR Research Ltd'"
                        }
                    ],
                    "enabled": []
                }
            },
            "elDataFiltering": {
                "val": "FILTER_LEVEL_2",
                "valType": "str",
                "inputType": "choice",
                "categ": "Eyetracking",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "FILTER_LEVEL_OFF",
                    "FILTER_LEVEL_1",
                    "FILTER_LEVEL_2"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Saved sample filtering",
                "hint": "Filter eye sample data when it is saved to the output file. This will not affect the sampling speed.",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "eyetracker",
                            "condition": "=='SR Research Ltd'"
                        }
                    ],
                    "enabled": []
                }
            },
            "elTrackingMode": {
                "val": "PUPIL_CR_TRACKING",
                "valType": "str",
                "inputType": "choice",
                "categ": "Eyetracking",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "PUPIL_CR_TRACKING",
                    "PUPIL_ONLY_TRACKING"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Pupil tracking mode",
                "hint": "Track Pupil-CR or Pupil only.",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "eyetracker",
                            "condition": "=='SR Research Ltd'"
                        }
                    ],
                    "enabled": []
                }
            },
            "elPupilAlgorithm": {
                "val": "ELLIPSE_FIT",
                "valType": "str",
                "inputType": "choice",
                "categ": "Eyetracking",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "ELLIPSE_FIT",
                    "CENTROID_FIT"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Pupil center algorithm",
                "hint": "Algorithm used to detect the pupil center.",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "eyetracker",
                            "condition": "=='SR Research Ltd'"
                        }
                    ],
                    "enabled": []
                }
            },
            "elPupilMeasure": {
                "val": "PUPIL_AREA",
                "valType": "str",
                "inputType": "choice",
                "categ": "Eyetracking",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "PUPIL_AREA",
                    "PUPIL_DIAMETER",
                    "NEITHER"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Pupil data type",
                "hint": "Type of pupil data to record.",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "eyetracker",
                            "condition": "=='SR Research Ltd'"
                        }
                    ],
                    "enabled": []
                }
            },
            "tbModel": {
                "val": "",
                "valType": "str",
                "inputType": "single",
                "categ": "Eyetracking",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Model name",
                "hint": "Eye tracker model.",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "eyetracker",
                            "condition": "=='Tobii Technology'"
                        }
                    ],
                    "enabled": []
                }
            },
            "tbLicenseFile": {
                "val": "",
                "valType": "str",
                "inputType": "file",
                "categ": "Eyetracking",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "License file",
                "hint": "Eye tracker license file (optional).",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "eyetracker",
                            "condition": "=='Tobii Technology'"
                        }
                    ],
                    "enabled": []
                }
            },
            "tbSerialNo": {
                "val": "",
                "valType": "str",
                "inputType": "single",
                "categ": "Eyetracking",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Serial number",
                "hint": "Eye tracker serial number (optional).",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "eyetracker",
                            "condition": "=='Tobii Technology'"
                        }
                    ],
                    "enabled": []
                }
            },
            "tbSampleRate": {
                "val": 60,
                "valType": "num",
                "inputType": "single",
                "categ": "Eyetracking",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Sampling rate",
                "hint": "Eye tracker sampling rate.",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "eyetracker",
                            "condition": "=='Tobii Technology'"
                        }
                    ],
                    "enabled": []
                }
            },
            "plPupillometryOnly": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Eyetracking",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Pupillometry only",
                "hint": "Subscribe to pupil data only, does not require calibration or surface setup",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "eyetracker",
                            "condition": "=='Pupil Labs'"
                        }
                    ],
                    "enabled": []
                }
            },
            "plSurfaceName": {
                "val": "psychopy_iohub_surface",
                "valType": "str",
                "inputType": "single",
                "categ": "Eyetracking",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Surface name",
                "hint": "Name of the Pupil Capture surface",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "eyetracker",
                            "condition": "=='Pupil Labs'"
                        }
                    ],
                    "enabled": []
                }
            },
            "plConfidenceThreshold": {
                "val": 0.6,
                "valType": "num",
                "inputType": "single",
                "categ": "Eyetracking",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Gaze confidence threshold",
                "hint": "Gaze confidence threshold",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "eyetracker",
                            "condition": "=='Pupil Labs'"
                        }
                    ],
                    "enabled": []
                }
            },
            "plPupilRemoteAddress": {
                "val": "127.0.0.1",
                "valType": "str",
                "inputType": "single",
                "categ": "Eyetracking",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Pupil remote address",
                "hint": "Pupil remote address",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "eyetracker",
                            "condition": "=='Pupil Labs'"
                        }
                    ],
                    "enabled": []
                }
            },
            "plPupilRemotePort": {
                "val": 50020,
                "valType": "num",
                "inputType": "single",
                "categ": "Eyetracking",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Pupil remote port",
                "hint": "Pupil remote port",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "eyetracker",
                            "condition": "=='Pupil Labs'"
                        }
                    ],
                    "enabled": []
                }
            },
            "plPupilRemoteTimeoutMs": {
                "val": 1000,
                "valType": "num",
                "inputType": "single",
                "categ": "Eyetracking",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Pupil remote timeout (ms)",
                "hint": "Pupil remote timeout (ms)",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "eyetracker",
                            "condition": "=='Pupil Labs'"
                        }
                    ],
                    "enabled": []
                }
            },
            "plPupilCaptureRecordingLocation": {
                "val": "",
                "valType": "str",
                "inputType": "single",
                "categ": "Eyetracking",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Pupil capture recording location",
                "hint": "Pupil capture recording location",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "eyetracker",
                            "condition": "=='Pupil Labs'"
                        }
                    ],
                    "enabled": []
                }
            },
            "plCompanionAddress": {
                "val": "neon.local",
                "valType": "str",
                "inputType": "single",
                "categ": "Eyetracking",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Companion address",
                "hint": "Companion address",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "eyetracker",
                            "condition": "=='Pupil Labs (Neon)'"
                        }
                    ],
                    "enabled": []
                }
            },
            "plCompanionPort": {
                "val": 8080,
                "valType": "num",
                "inputType": "single",
                "categ": "Eyetracking",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Companion port",
                "hint": "Companion port",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "eyetracker",
                            "condition": "=='Pupil Labs (Neon)'"
                        }
                    ],
                    "enabled": []
                }
            },
            "ecSampleRate": {
                "val": "default",
                "valType": "str",
                "inputType": "single",
                "categ": "Eyetracking",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Sampling rate",
                "hint": "Eyetracker sampling rate: 'default' or <integer>[Hz]. Defaults to tracking mode '0'.",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "eyetracker",
                            "condition": "=='EyeLogic'"
                        }
                    ],
                    "enabled": []
                }
            },
            "keyboardBackend": {
                "val": "PsychToolbox",
                "valType": "str",
                "inputType": "choice",
                "categ": "Input",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "ioHub",
                    "PsychToolbox",
                    "Pyglet"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Keyboard backend",
                "hint": "What Python package should PsychoPy use to get keyboard input?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            }
        }
    },
    "SliderComponent": {
        "__class__": "psychopy.experiment.components.slider:SliderComponent",
        "__name__": "SliderComponent",
        "categories": [
            "Responses"
        ],
        "targets": [
            "PsychoPy",
            "PsychoJS"
        ],
        "plugin": null,
        "iconSVG": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 32 32\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:space=\"preserve\" xmlns:serif=\"http://www.serif.com/\" style=\"fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2;\">\n    <g id=\"light-components-SliderComponent\" serif:id=\"light/components/SliderComponent\" transform=\"matrix(0.451519,0,0,0.451519,0,0)\">\n        <rect x=\"0\" y=\"0\" width=\"70.872\" height=\"70.866\" style=\"fill:none;\"/>\n        <g id=\"Slider-Component\" serif:id=\"Slider Component\" transform=\"matrix(0.952665,0,0,0.952665,1.51375,1.67724)\">\n            <g id=\"Bar3\">\n                <g transform=\"matrix(1,0,0,1,60.6732,60.4903)\">\n                    <path d=\"M0,-9.459L-50.131,-9.459C-51.695,-9.459 -52.963,-8.191 -52.963,-6.627L-52.963,-2.832C-52.963,-1.268 -51.695,0 -50.131,0L0,0C1.564,0 2.832,-1.268 2.832,-2.832L2.832,-6.627C2.832,-8.191 1.564,-9.459 0,-9.459\" style=\"fill:var(--outline);fill-rule:nonzero;\"/>\n                </g>\n                <g transform=\"matrix(1,0,0,1,48.8422,55.171)\">\n                    <path d=\"M0,-8.279L-8.279,0L-16.557,-8.279L0,-8.279Z\" style=\"fill:rgb(2,169,234);fill-rule:nonzero;\"/>\n                </g>\n            </g>\n            <g id=\"Bar2\">\n                <g transform=\"matrix(1,0,0,1,60.6732,42.2322)\">\n                    <path d=\"M0,-9.459L-50.131,-9.459C-51.695,-9.459 -52.963,-8.191 -52.963,-6.627L-52.963,-2.832C-52.963,-1.268 -51.695,0 -50.131,0L0,0C1.564,0 2.832,-1.268 2.832,-2.832L2.832,-6.627C2.832,-8.191 1.564,-9.459 0,-9.459\" style=\"fill:var(--outline);fill-rule:nonzero;\"/>\n                </g>\n                <g transform=\"matrix(1,0,0,1,61.8792,36.9129)\">\n                    <path d=\"M0,-8.279L-8.279,0L-16.557,-8.279L0,-8.279Z\" style=\"fill:rgb(2,169,234);fill-rule:nonzero;\"/>\n                </g>\n            </g>\n            <g id=\"Bar1\">\n                <g transform=\"matrix(1,0,0,1,60.6732,23.9741)\">\n                    <path d=\"M0,-9.459L-50.131,-9.459C-51.695,-9.459 -52.963,-8.191 -52.963,-6.627L-52.963,-2.832C-52.963,-1.268 -51.695,0 -50.131,0L0,0C1.564,0 2.832,-1.268 2.832,-2.832L2.832,-6.627C2.832,-8.191 1.564,-9.459 0,-9.459\" style=\"fill:var(--outline);fill-rule:nonzero;\"/>\n                </g>\n                <g transform=\"matrix(1,0,0,1,25.1656,18.6548)\">\n                    <path d=\"M0,-8.279L-8.279,0L-16.557,-8.279L0,-8.279Z\" style=\"fill:rgb(2,169,234);fill-rule:nonzero;\"/>\n                </g>\n            </g>\n        </g>\n    </g>\n</svg>\n",
        "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\slider\\slider.png",
        "tooltip": "Slider: A simple, flexible object for getting ratings",
        "version": "0.0.0",
        "beta": false,
        "validatorClasses": [
            "VisualValidatorRoutine"
        ],
        "hidden": false,
        "params": {
            "name": {
                "val": "slider",
                "valType": "code",
                "inputType": "name",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Name",
                "hint": "Name of this Component (alphanumeric or _, no spaces)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startVal": {
                "val": "0.0",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Start",
                "hint": "When does the Component start?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startEstim": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Expected start (s)",
                "hint": "(Optional) expected start (s), purely for representing in the timeline",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startType": {
                "val": "time (s)",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "time (s)",
                    "frame N",
                    "condition"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Start type",
                "hint": "How do you want to define your start point?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "stopVal": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": [],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop",
                "hint": "When does the Component end? (blank is endless)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "durationEstim": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Expected duration (s)",
                "hint": "(Optional) expected duration (s), purely for representing in the timeline",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "stopType": {
                "val": "condition",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "duration (s)",
                    "duration (frames)",
                    "time (s)",
                    "frame N",
                    "condition"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop type",
                "hint": "How do you want to define your end point?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "color": {
                "val": "LightGray",
                "valType": "color",
                "inputType": "color",
                "categ": "Appearance",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Label color",
                "hint": "Color of all labels on this slider (might be overridden by the style setting)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "fillColor": {
                "val": "Red",
                "valType": "color",
                "inputType": "color",
                "categ": "Appearance",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Marker color",
                "hint": "Color of the marker on this slider (might be overridden by the style setting)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "borderColor": {
                "val": "White",
                "valType": "color",
                "inputType": "color",
                "categ": "Appearance",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Line color",
                "hint": "Color of all lines on this slider (might be overridden by the style setting)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "colorSpace": {
                "val": "rgb",
                "valType": "str",
                "inputType": "choice",
                "categ": "Appearance",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [
                    "rgb",
                    "dkl",
                    "lms",
                    "hsv"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Color space",
                "hint": "In what format (color space) have you specified the colors? (rgb, dkl, lms, hsv)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "opacity": {
                "val": "",
                "valType": "num",
                "inputType": "single",
                "categ": "Appearance",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Opacity",
                "hint": "Opacity of the stimulus (1=opaque, 0=fully transparent, 0.5=translucent). Leave blank for each color to have its own opacity (recommended if any color is None).",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "size": {
                "val": "(1.0, 0.1)",
                "valType": "list",
                "inputType": "single",
                "categ": "Layout",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Size [w,h]",
                "hint": "Size of this stimulus (either a single value or x,y pair, e.g. 2.5, [1,2] ",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "pos": {
                "val": "(0, -0.4)",
                "valType": "list",
                "inputType": "single",
                "categ": "Layout",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Position [x,y]",
                "hint": "Position of this stimulus (e.g. [1,2] )",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "units": {
                "val": "from exp settings",
                "valType": "str",
                "inputType": "choice",
                "categ": "Layout",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "from exp settings",
                    "deg",
                    "cm",
                    "pix",
                    "norm",
                    "height",
                    "degFlatPos",
                    "degFlat"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Spatial units",
                "hint": "Units of dimensions for this stimulus",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "ori": {
                "val": 0,
                "valType": "num",
                "inputType": "spin",
                "categ": "Layout",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [
                    -360,
                    360
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Orientation",
                "hint": "Orientation of this stimulus (in deg)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "forceEndRoutine": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": [],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Force end of Routine",
                "hint": "Should setting a rating (releasing the mouse) cause the end of the Routine (e.g. trial)?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "contrast": {
                "val": 1,
                "valType": "num",
                "inputType": "single",
                "categ": "Appearance",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Contrast",
                "hint": "Contrast of the stimulus (1.0=unchanged contrast, 0.5=decrease contrast, 0.0=uniform/no contrast, -0.5=slightly inverted, -1.0=totally inverted)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "styles": {
                "val": "rating",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [
                    "slider",
                    "rating",
                    "radio",
                    "scrollbar",
                    "choice"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Styles",
                "hint": "Discrete styles to control the overall appearance of the slider.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "styleTweaks": {
                "val": [],
                "valType": "list",
                "inputType": "multiChoice",
                "categ": "Appearance",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [
                    "labels45",
                    "triangleMarker"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Style tweaks",
                "hint": "Tweaks to change the appearance of the slider beyond its style.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "font": {
                "val": "Noto Sans",
                "valType": "str",
                "inputType": "font",
                "categ": "Formatting",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Font",
                "hint": "Font for the labels",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "flip": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Layout",
                "updates": "constant",
                "allowedUpdates": [],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Flip",
                "hint": "By default the labels will be on the bottom or left of the scale, but this can be flipped to the other side.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "ticks": {
                "val": "(1, 2, 3, 4, 5)",
                "valType": "list",
                "inputType": "single",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": [
                    "constant"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Ticks",
                "hint": "Tick positions (numerical) on the scale, separated by commas",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "labels": {
                "val": "",
                "valType": "list",
                "inputType": "single",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": [
                    "constant"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Labels",
                "hint": "Labels for the tick marks on the scale, separated by commas",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "granularity": {
                "val": 0,
                "valType": "num",
                "inputType": "single",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": [
                    "constant"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Granularity",
                "hint": "Specifies the minimum step size (0 for a continuous scale, 1 for integer rating scale)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "readOnly": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": "constant",
                "allowedUpdates": [],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Read only",
                "hint": "Should participant be able to change the rating on the Slider?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "saveStartStop": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Save onset/offset times",
                "hint": "Store the onset/offset times in the data file (as well as in the log file).",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "syncScreenRefresh": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Sync timing with screen refresh",
                "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "disabled": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Disable Component",
                "hint": "Disable this Component",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "validator": {
                "val": "",
                "valType": "code",
                "inputType": "validator",
                "categ": "Testing",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "VisualValidatorRoutine"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Validate with...",
                "hint": "Name of validator Component/Routine to use to check the timing of this stimulus.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "initVal": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Starting value",
                "hint": "Value of the slider befre any response, leave blank to hide the marker until clicked on",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "letterHeight": {
                "val": 0.05,
                "valType": "num",
                "inputType": "single",
                "categ": "Formatting",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Letter height",
                "hint": "Letter height for text in labels",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "storeRating": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": "constant",
                "allowedUpdates": [],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Store rating",
                "hint": "store the rating",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "storeRatingTime": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": "constant",
                "allowedUpdates": [],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Store rating time",
                "hint": "Store the time taken to make the choice (in seconds)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "storeHistory": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": "constant",
                "allowedUpdates": [],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Store history",
                "hint": "store the history of (selection, time)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            }
        }
    },
    "SoundComponent": {
        "__class__": "psychopy.experiment.components.sound:SoundComponent",
        "__name__": "SoundComponent",
        "categories": [
            "Stimuli"
        ],
        "targets": [
            "PsychoPy",
            "PsychoJS"
        ],
        "plugin": null,
        "iconSVG": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 32 32\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:space=\"preserve\" xmlns:serif=\"http://www.serif.com/\" style=\"fill-rule:evenodd;clip-rule:evenodd;stroke-linecap:round;stroke-linejoin:bevel;stroke-miterlimit:10;\">\n    <g id=\"light-components-SoundComponent\" serif:id=\"light/components/SoundComponent\" transform=\"matrix(0.451519,0,0,0.451519,0,0)\">\n        <rect x=\"0\" y=\"0\" width=\"70.872\" height=\"70.866\" style=\"fill:none;\"/>\n        <g id=\"Sound-Component\" serif:id=\"Sound Component\" transform=\"matrix(0.99163,0,0,0.99163,3.44776,0.125764)\">\n            <g transform=\"matrix(0.00116851,0.999999,0.999999,-0.00116851,63.8912,32.149)\">\n                <path d=\"M-8.976,-15.831C-2.107,-8.979 9.004,-8.979 15.842,-15.831\" style=\"fill:none;fill-rule:nonzero;stroke:rgb(242,84,91);stroke-width:3px;\"/>\n            </g>\n            <g transform=\"matrix(0.00114852,0.999999,0.999999,-0.00114852,73.2983,31.0041)\">\n                <path d=\"M-11.966,-21.106C-2.809,-11.97 12.004,-11.97 21.12,-21.106\" style=\"fill:none;fill-rule:nonzero;stroke:rgb(242,84,91);stroke-width:3px;\"/>\n            </g>\n            <g transform=\"matrix(1,0,0,1,36.2474,59.7733)\">\n                <path d=\"M0,-48.336C-1.408,-48.336 -2.732,-47.833 -3.829,-46.881C-4.966,-45.895 -6.105,-44.912 -7.245,-43.928L-8.182,-43.12L-10.096,-41.471C-11.713,-40.078 -13.331,-38.685 -14.939,-37.281C-16.5,-37.288 -18.066,-37.29 -19.631,-37.29C-21.289,-37.29 -22.947,-37.288 -24.605,-37.284C-28.235,-37.275 -30.773,-34.734 -30.777,-31.103C-30.779,-29.864 -30.778,-28.626 -30.778,-27.388L-30.778,-25.878L-30.777,-23.567C-30.776,-21.469 -30.775,-19.372 -30.781,-17.274C-30.785,-15.489 -30.1,-13.923 -28.8,-12.746C-27.152,-11.255 -25.277,-11.254 -24.66,-11.254L-22.535,-11.253L-19.572,-11.252C-18.108,-11.252 -16.642,-11.253 -15.178,-11.258C-14.937,-11.047 -14.7,-10.847 -14.467,-10.65C-14.303,-10.511 -14.139,-10.372 -13.976,-10.232L-12.001,-8.526L-8.235,-5.272L-6.841,-4.064C-5.82,-3.178 -4.798,-2.291 -3.769,-1.414C-2.699,-0.503 -1.352,0 0.024,0C1.616,0 3.12,-0.647 4.259,-1.821C5.363,-2.959 5.922,-4.428 5.92,-6.187C5.917,-10.905 5.917,-15.623 5.918,-20.341L5.918,-42.023C5.92,-42.257 5.918,-42.492 5.903,-42.725C5.746,-45.153 4.361,-47.096 2.196,-47.921C1.475,-48.196 0.736,-48.336 0,-48.336M0,-44.336C0.251,-44.336 0.509,-44.284 0.771,-44.184C1.541,-43.89 1.861,-43.256 1.912,-42.466C1.923,-42.285 1.918,-42.102 1.918,-41.919L1.918,-24.143C1.918,-18.157 1.916,-12.171 1.92,-6.185C1.921,-5.593 1.82,-5.051 1.388,-4.607C1.001,-4.208 0.514,-4 0.024,-4C-0.393,-4 -0.812,-4.15 -1.175,-4.459C-2.665,-5.729 -4.138,-7.018 -5.619,-8.298C-7.533,-9.952 -9.447,-11.605 -11.361,-13.259C-11.95,-13.767 -12.558,-14.256 -13.12,-14.793C-13.47,-15.128 -13.841,-15.261 -14.319,-15.261L-14.329,-15.261C-16.077,-15.254 -17.825,-15.252 -19.572,-15.252C-21.268,-15.252 -22.963,-15.254 -24.659,-15.254C-25.191,-15.254 -25.691,-15.327 -26.115,-15.712C-26.583,-16.135 -26.782,-16.642 -26.781,-17.264C-26.773,-20.136 -26.778,-23.007 -26.778,-25.878C-26.778,-27.618 -26.779,-29.358 -26.777,-31.098C-26.775,-32.548 -26.055,-33.28 -24.596,-33.284C-22.941,-33.288 -21.286,-33.29 -19.631,-33.29C-17.831,-33.29 -16.03,-33.287 -14.229,-33.278L-14.215,-33.278C-13.675,-33.278 -13.263,-33.432 -12.852,-33.792C-10.437,-35.907 -7.998,-37.995 -5.568,-40.092C-4.114,-41.347 -2.658,-42.601 -1.207,-43.86C-0.832,-44.186 -0.425,-44.336 0,-44.336\" style=\"fill:var(--outline);fill-rule:nonzero;\"/>\n            </g>\n        </g>\n    </g>\n</svg>\n",
        "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\sound\\sound.png",
        "tooltip": "Sound: play recorded files or generated sounds",
        "version": "0.0.0",
        "beta": false,
        "validatorClasses": [
            "AudioValidatorRoutine"
        ],
        "hidden": false,
        "params": {
            "name": {
                "val": "sound_1",
                "valType": "code",
                "inputType": "name",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Name",
                "hint": "Name of this Component (alphanumeric or _, no spaces)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startVal": {
                "val": "0.0",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Start",
                "hint": "When does the Component start?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startEstim": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Expected start (s)",
                "hint": "(Optional) expected start (s), purely for representing in the timeline",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startType": {
                "val": "time (s)",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "time (s)",
                    "frame N",
                    "condition"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Start type",
                "hint": "How do you want to define your start point?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "stopVal": {
                "val": "1.0",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": [],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop",
                "hint": "When does the Component end? (blank to use the duration of the media)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "durationEstim": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Expected duration (s)",
                "hint": "(Optional) expected duration (s), purely for representing in the timeline",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "stopType": {
                "val": "duration (s)",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "duration (s)",
                    "duration (frames)",
                    "time (s)",
                    "frame N",
                    "condition"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop type",
                "hint": "How do you want to define your end point?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "deviceLabel": {
                "val": "",
                "valType": "device",
                "inputType": "device",
                "categ": "Device",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "python:///psychopy.experiment.components.sound:SpeakerDeviceBackend"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Device",
                "hint": "The named device from Device Manager to use for this Component.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "sound": {
                "val": "A",
                "valType": "str",
                "inputType": "soundFile",
                "categ": "Basic",
                "updates": "set every repeat",
                "allowedUpdates": [
                    "set every repeat"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Sound",
                "hint": "A sound can be a note name (e.g. A or Bf), a number to specify Hz (e.g. 440) or a filename",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "syncScreenRefresh": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Sync start with screen",
                "hint": "A reaction time to a sound stimulus should be based on when the screen flipped",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "volume": {
                "val": 1,
                "valType": "num",
                "inputType": "single",
                "categ": "Playback",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Volume",
                "hint": "The volume (in range 0 to 1)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "hamming": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Playback",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Hamming window",
                "hint": "For tones we can apply a hamming window to prevent 'clicks' that are caused by a sudden onset. This delays onset by roughly 1ms.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "stopWithRoutine": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Playback",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop with Routine?",
                "hint": "Should playback cease when the Routine ends? Untick to continue playing after the Routine has finished.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "forceEndRoutine": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Playback",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Force end of Routine",
                "hint": "Should the end of the sound cause the end of the Routine (e.g. trial)?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "saveStartStop": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Save onset/offset times",
                "hint": "Store the onset/offset times in the data file (as well as in the log file).",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "disabled": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Disable Component",
                "hint": "Disable this Component",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "validator": {
                "val": "",
                "valType": "code",
                "inputType": "validator",
                "categ": "Testing",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "AudioValidatorRoutine"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Validate with...",
                "hint": "Name of validator Component/Routine to use to check the timing of this stimulus.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            }
        }
    },
    "SoundSensorComponent": {
        "__class__": "psychopy.experiment.components.soundsensor:SoundSensorComponent",
        "__name__": "SoundSensorComponent",
        "categories": [
            "Responses"
        ],
        "targets": [
            "PsychoPy"
        ],
        "plugin": null,
        "iconSVG": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 32 32\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:space=\"preserve\" xmlns:serif=\"http://www.serif.com/\" style=\"fill-rule:evenodd;clip-rule:evenodd;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:1.5;\">\n    <g id=\"light-components-SoundSensorComponent\" serif:id=\"light/components/SoundSensorComponent\" transform=\"matrix(0.451519,0,0,0.451519,0,0)\">\n        <rect x=\"0\" y=\"0\" width=\"70.872\" height=\"70.866\" style=\"fill:none;\"/>\n        <g transform=\"matrix(1.5098,0,0,1.5098,-0.743616,-3.10055)\">\n            <g transform=\"matrix(1,0,0,1,-1.5,6.5)\">\n                <path d=\"M22,5C18.5,4.492 11.5,3.475 11.5,8.5C11.5,14.5 36.5,14.5 36.5,22.5C36.5,28.5 23.5,29.167 17,29.5\" style=\"fill:none;stroke:var(--outline);stroke-width:2.93px;\"/>\n            </g>\n            <g id=\"box\" transform=\"matrix(1,0,0,1,12,-26)\">\n                <g transform=\"matrix(0.952381,0,0,1.16667,5.64286,-7.5)\">\n                    <path d=\"M25.099,33C26.812,33 28.2,34.133 28.2,35.531C28.2,37.572 28.2,40.428 28.2,42.469C28.2,43.867 26.812,45 25.099,45C20.255,45 10.945,45 6.101,45C4.388,45 3,43.867 3,42.469C3,40.428 3,37.572 3,35.531C3,34.133 4.388,33 6.101,33C10.945,33 20.255,33 25.099,33Z\" style=\"fill:none;stroke:var(--outline);stroke-width:2.75px;\"/>\n                </g>\n                <g transform=\"matrix(2,0,0,2,-18.5,-40)\">\n                    <circle cx=\"17\" cy=\"39\" r=\"2\" style=\"fill:var(--outline);fill-opacity:0.5;\"/>\n                </g>\n                <g transform=\"matrix(2,0,0,2,-8.5,-40)\">\n                    <circle cx=\"17\" cy=\"39\" r=\"2\" style=\"fill:rgb(37,169,234);\"/>\n                </g>\n            </g>\n            <g id=\"Microphone-Component\" serif:id=\"Microphone Component\" transform=\"matrix(0.435842,0,0,0.435842,-2.53378,17.0846)\">\n                <g transform=\"matrix(1,0,0,1,57.8779,20.598)\">\n                    <path d=\"M0,9.902L-11.564,21.466C-11.343,19.753 -11.208,17.99 -11.174,16.193C-11.14,14.328 -12.632,12.768 -14.497,12.734C-16.311,12.683 -17.922,14.192 -17.956,16.057C-18.041,20.499 -18.787,24.823 -20.059,28.265C-23.568,29.333 -27.536,28.468 -30.3,25.705L-31.317,24.687L-41.202,14.802C-44.95,11.055 -45.187,5.137 -41.914,1.119L-29.045,13.988C-28.367,14.65 -27.502,14.989 -26.637,14.989C-25.773,14.989 -24.908,14.65 -24.247,13.988C-22.924,12.666 -22.924,10.512 -24.247,9.19L-37.167,-3.73L-35.302,-5.595L-22.788,6.901C-22.127,7.562 -21.262,7.901 -20.398,7.901C-19.533,7.901 -18.668,7.562 -18.007,6.901C-16.667,5.578 -16.667,3.442 -18.007,2.102L-30.503,-10.394L-28.638,-12.259L-16.549,-0.187C-15.887,0.475 -15.023,0.814 -14.158,0.814C-13.293,0.814 -12.412,0.475 -11.75,-0.187C-10.428,-1.509 -10.428,-3.646 -11.75,-4.968L-23.67,-16.888C-19.702,-19.431 -14.362,-18.956 -10.902,-15.498L0,-4.595C4.002,-0.594 4.002,5.9 0,9.902\" style=\"fill:rgb(242,84,91);fill-rule:nonzero;\"/>\n                </g>\n                <g transform=\"matrix(1,0,0,1,48.62,37.9944)\">\n                    <path d=\"M0,23.738C0,26.332 -7.054,28.452 -15.769,28.452C-24.467,28.452 -31.521,26.332 -31.521,23.738C-31.521,22.042 -28.57,20.567 -24.128,19.736C-27.434,15.362 -29.554,8.19 -29.622,-0.271L-22.059,7.291C-20.788,13.632 -18.126,17.515 -16.125,17.549L-16.091,17.549C-14.785,17.549 -13.073,15.786 -11.716,13.022C-11.377,12.361 -11.089,11.632 -10.801,10.869C-9.529,7.427 -8.783,3.103 -8.698,-1.34C-8.664,-3.205 -7.054,-4.714 -5.239,-4.663C-3.374,-4.629 -1.882,-3.069 -1.916,-1.204C-1.95,0.593 -2.086,2.357 -2.306,4.069C-2.849,8.546 -3.985,12.666 -5.629,16.006C-6.29,17.38 -7.037,18.6 -7.85,19.652C-3.154,20.465 0,21.992 0,23.738\" style=\"fill:var(--outline);fill-rule:nonzero;\"/>\n                </g>\n            </g>\n        </g>\n    </g>\n</svg>\n",
        "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\soundsensor\\soundsensor.png",
        "tooltip": "Voice Key: Get input from a microphone as simple true/false values",
        "version": "0.0.0",
        "beta": true,
        "validatorClasses": [],
        "hidden": false,
        "params": {
            "name": {
                "val": "soundSensor",
                "valType": "code",
                "inputType": "name",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Name",
                "hint": "Name of this Component (alphanumeric or _, no spaces)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startVal": {
                "val": 0.0,
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Start",
                "hint": "When does the Component start?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startEstim": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Expected start (s)",
                "hint": "(Optional) expected start (s), purely for representing in the timeline",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startType": {
                "val": "time (s)",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "time (s)",
                    "frame N",
                    "condition"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Start type",
                "hint": "How do you want to define your start point?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "stopVal": {
                "val": 1.0,
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": [],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop",
                "hint": "When does the Component end? (blank is endless)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "durationEstim": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Expected duration (s)",
                "hint": "(Optional) expected duration (s), purely for representing in the timeline",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "stopType": {
                "val": "duration (s)",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "duration (s)",
                    "duration (frames)",
                    "time (s)",
                    "frame N",
                    "condition"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop type",
                "hint": "How do you want to define your end point?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "deviceLabel": {
                "val": "",
                "valType": "device",
                "inputType": "device",
                "categ": "Device",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "python:///psychopy.experiment.components.soundsensor:MicrophoneSoundSensorBackend"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Device",
                "hint": "The named device from Device Manager to use for this Component.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "forceEndRoutine": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Force end of Routine",
                "hint": "Should a response force the end of the Routine (e.g end the trial)?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "registerOn": {
                "val": true,
                "valType": "code",
                "inputType": "choice",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    true,
                    false
                ],
                "allowedLabels": [
                    "Press",
                    "Release"
                ],
                "ctrlParams": {},
                "label": "Register button press on...",
                "hint": "When should the response be registered? When the sound starts, or when it stops?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "store": {
                "val": "first",
                "valType": "str",
                "inputType": "choice",
                "categ": "Data",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [
                    "last",
                    "first",
                    "all",
                    "nothing"
                ],
                "allowedLabels": [
                    "Last response",
                    "First response",
                    "All responses",
                    "Nothing"
                ],
                "ctrlParams": {},
                "label": "Store",
                "hint": "Choose which (if any) responses to store at the end of a trial",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "storeCorrect": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Store correct",
                "hint": "Do you want to save the response as correct/incorrect?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "correctAns": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Correct answer",
                "hint": "What is the 'correct' response (True/False)? Might be helpful to add a correctAns column and use $correctAns to compare to the response. ",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "storeCorrect",
                            "condition": "== True"
                        }
                    ],
                    "enabled": []
                }
            },
            "saveStartStop": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Save onset/offset times",
                "hint": "Store the onset/offset times in the data file (as well as in the log file).",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "syncScreenRefresh": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Sync timing with screen refresh",
                "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "disabled": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Disable Component",
                "hint": "Disable this Component",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            }
        }
    },
    "StaticComponent": {
        "__class__": "psychopy.experiment.components.static:StaticComponent",
        "__name__": "StaticComponent",
        "categories": [
            "Custom"
        ],
        "targets": [
            "PsychoPy",
            "PsychoJS"
        ],
        "plugin": null,
        "iconSVG": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 48 48\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:space=\"preserve\" xmlns:serif=\"http://www.serif.com/\" style=\"fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2;\">\n    <rect id=\"StaticComponent\" x=\"0\" y=\"0\" width=\"48\" height=\"48\" style=\"fill:none;\"/>\n    <g id=\"StaticComponent1\" serif:id=\"StaticComponent\">\n        <g transform=\"matrix(1,0,0,1,0,-1)\">\n            <path d=\"M42.977,11C43.778,11 44.547,11.319 45.114,11.886C45.681,12.453 46,13.222 46,14.023C46,15.275 46,16.725 46,17.977C46,18.778 45.681,19.547 45.114,20.114C44.547,20.681 43.778,21 42.977,21C34.932,21 13.068,21 5.023,21C4.222,21 3.453,20.681 2.886,20.114C2.319,19.547 2,18.778 2,17.977C2,16.725 2,15.275 2,14.023C2,13.222 2.319,12.453 2.886,11.886C3.453,11.319 4.222,11 5.023,11C13.068,11 34.932,11 42.977,11Z\" style=\"fill:rgb(242,84,91);\"/>\n        </g>\n        <g transform=\"matrix(0.788601,0,0,0.788601,24.2831,14.1839)\">\n            <path d=\"M0,25.1L-4.98,25.1L-4.98,22.86L-3.7,22.86L-3.7,18.87L-4.98,18.87L-4.98,16.63L-1.18,16.63L-1.18,22.86L0,22.86L0,25.1ZM-6.72,23.66C-6.95,24.03 -7.25,24.33 -7.61,24.57C-7.98,24.82 -8.4,25 -8.86,25.12C-9.32,25.24 -9.78,25.31 -10.25,25.31C-10.56,25.31 -10.83,25.29 -11.08,25.25C-11.33,25.21 -11.55,25.16 -11.75,25.09C-11.95,25.03 -12.13,24.95 -12.28,24.86C-12.44,24.77 -12.58,24.67 -12.71,24.56L-14.19,24.56L-14.19,22.29L-11.88,22.29L-11.88,22.34C-11.87,22.5 -11.82,22.63 -11.73,22.75C-11.64,22.87 -11.52,22.97 -11.37,23.05C-11.22,23.13 -11.05,23.19 -10.86,23.23C-10.67,23.27 -10.46,23.29 -10.25,23.29C-9.76,23.29 -9.4,23.23 -9.18,23.1C-8.96,22.97 -8.85,22.81 -8.85,22.61C-8.85,22.45 -8.9,22.31 -9.01,22.2C-9.12,22.09 -9.31,22 -9.59,21.94L-11.16,21.6C-12.14,21.41 -12.89,21.09 -13.39,20.65C-13.89,20.21 -14.14,19.64 -14.14,18.94C-14.14,18.53 -14.05,18.16 -13.86,17.82C-13.67,17.49 -13.41,17.2 -13.08,16.96C-12.75,16.73 -12.37,16.54 -11.93,16.41C-11.49,16.28 -11.02,16.21 -10.52,16.21C-10.18,16.21 -9.87,16.23 -9.61,16.28C-9.34,16.32 -9.1,16.37 -8.89,16.44C-8.67,16.5 -8.49,16.58 -8.33,16.67C-8.16,16.76 -8.02,16.85 -7.9,16.95L-6.47,16.95L-6.47,19.22L-8.58,19.22C-8.58,19.09 -8.63,18.97 -8.71,18.85C-8.79,18.73 -8.92,18.62 -9.08,18.53C-9.25,18.44 -9.45,18.37 -9.68,18.32C-9.92,18.26 -10.19,18.23 -10.49,18.23C-10.6,18.23 -10.72,18.24 -10.86,18.26C-10.99,18.28 -11.11,18.32 -11.22,18.36C-11.33,18.41 -11.42,18.48 -11.5,18.56C-11.57,18.65 -11.61,18.76 -11.61,18.89C-11.61,18.95 -11.6,19.02 -11.58,19.08C-11.56,19.14 -11.52,19.19 -11.47,19.25C-11.41,19.3 -11.34,19.35 -11.24,19.4C-11.15,19.45 -11.02,19.48 -10.87,19.51L-9.34,19.81C-8.78,19.92 -8.31,20.06 -7.94,20.22C-7.56,20.38 -7.26,20.57 -7.03,20.79C-6.8,21.01 -6.64,21.25 -6.54,21.52C-6.43,21.79 -6.38,22.08 -6.38,22.39C-6.38,22.87 -6.5,23.3 -6.72,23.66M-15.47,25.1L-20.45,25.1L-20.45,22.86L-19.17,22.86L-19.17,18.87L-20.45,18.87L-20.45,16.63L-16.64,16.63L-16.64,22.86L-15.47,22.86L-15.47,25.1ZM-19.19,13.33C-19.12,13.16 -19.01,13 -18.88,12.87C-18.75,12.74 -18.6,12.64 -18.42,12.56C-18.24,12.48 -18.05,12.45 -17.85,12.45C-17.65,12.45 -17.46,12.48 -17.29,12.56C-17.12,12.64 -16.96,12.74 -16.83,12.87C-16.7,13 -16.6,13.16 -16.52,13.33C-16.45,13.51 -16.41,13.7 -16.41,13.9C-16.41,14.1 -16.45,14.29 -16.52,14.47C-16.6,14.65 -16.7,14.8 -16.83,14.93C-16.96,15.06 -17.12,15.17 -17.29,15.24C-17.46,15.32 -17.65,15.36 -17.85,15.36C-18.05,15.36 -18.24,15.32 -18.42,15.24C-18.6,15.17 -18.75,15.06 -18.88,14.93C-19.01,14.8 -19.12,14.65 -19.19,14.47C-19.26,14.29 -19.3,14.1 -19.3,13.9C-19.3,13.7 -19.26,13.51 -19.19,13.33M-3.72,13.33C-3.65,13.16 -3.55,13 -3.42,12.87C-3.29,12.74 -3.13,12.64 -2.95,12.56C-2.78,12.48 -2.59,12.45 -2.38,12.45C-2.18,12.45 -2,12.48 -1.82,12.56C-1.65,12.64 -1.5,12.74 -1.36,12.87C-1.23,13 -1.13,13.16 -1.05,13.33C-0.98,13.51 -0.94,13.7 -0.94,13.9C-0.94,14.1 -0.98,14.29 -1.05,14.47C-1.13,14.65 -1.23,14.8 -1.36,14.93C-1.5,15.06 -1.65,15.17 -1.82,15.24C-2,15.32 -2.18,15.36 -2.38,15.36C-2.59,15.36 -2.78,15.32 -2.95,15.24C-3.13,15.17 -3.29,15.06 -3.42,14.93C-3.55,14.8 -3.65,14.65 -3.72,14.47C-3.8,14.29 -3.83,14.1 -3.83,13.9C-3.83,13.7 -3.8,13.51 -3.72,13.33M-24.36,40.55L4.09,40.55L4.09,-15.45L-24.36,-15.45L-24.36,40.55Z\" style=\"fill:rgb(242,84,91);fill-opacity:0.5;fill-rule:nonzero;\"/>\n        </g>\n    </g>\n</svg>\n",
        "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\static\\static.png",
        "tooltip": "Static: Static screen period (e.g. an ISI). Useful for pre-loading stimuli.",
        "version": "0.0.0",
        "beta": false,
        "validatorClasses": [],
        "hidden": false,
        "params": {
            "name": {
                "val": "ISI",
                "valType": "code",
                "inputType": "name",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Name",
                "hint": "Name of this Component (alphanumeric or _, no spaces)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startVal": {
                "val": 0.0,
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Start",
                "hint": "When does the Component start?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startEstim": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Expected start (s)",
                "hint": "(Optional) expected start (s), purely for representing in the timeline",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startType": {
                "val": "time (s)",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "time (s)",
                    "frame N",
                    "condition"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Start type",
                "hint": "How do you want to define your start point?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "stopVal": {
                "val": 0.5,
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": [],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop",
                "hint": "When does the Component end? (blank is endless)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "durationEstim": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Expected duration (s)",
                "hint": "(Optional) expected duration (s), purely for representing in the timeline",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "stopType": {
                "val": "duration (s)",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "duration (s)",
                    "duration (frames)",
                    "time (s)",
                    "frame N",
                    "condition"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop type",
                "hint": "How do you want to define your end point?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "code": {
                "val": "",
                "valType": "code",
                "inputType": "multi",
                "categ": "Custom",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Custom code",
                "hint": "Custom code to be run during the static period (after updates)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "saveData": {
                "val": false,
                "valType": "code",
                "inputType": "bool",
                "categ": "Custom",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Save data during",
                "hint": "While the frame loop is paused, should we take the opportunity to save data now? This is only relevant locally, online data saving is either periodic or on close.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "saveStartStop": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Save onset/offset times",
                "hint": "Store the onset/offset times in the data file (as well as in the log file).",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "syncScreenRefresh": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Sync timing with screen refresh",
                "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "disabled": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Disable Component",
                "hint": "Disable this Component",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            }
        }
    },
    "TextComponent": {
        "__class__": "psychopy.experiment.components.text:TextComponent",
        "__name__": "TextComponent",
        "categories": [
            "Stimuli"
        ],
        "targets": [
            "PsychoPy",
            "PsychoJS"
        ],
        "plugin": null,
        "iconSVG": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 32 32\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:space=\"preserve\" xmlns:serif=\"http://www.serif.com/\" style=\"fill-rule:evenodd;clip-rule:evenodd;stroke-miterlimit:10;\">\n    <g id=\"light-components-TextComponent\" serif:id=\"light/components/TextComponent\" transform=\"matrix(0.451519,0,0,0.451519,0,0)\">\n        <rect x=\"0\" y=\"0\" width=\"70.872\" height=\"70.866\" style=\"fill:none;\"/>\n        <clipPath id=\"_clip1\">\n            <rect x=\"0\" y=\"0\" width=\"70.872\" height=\"70.866\"/>\n        </clipPath>\n        <g clip-path=\"url(#_clip1)\">\n            <g id=\"Text-Component\" serif:id=\"Text Component\" transform=\"matrix(1.326,0,0,1.326,-11.5519,-11.1756)\">\n                <path d=\"M27.42,44.216L31.1,44.216L31.1,21.318L26.787,21.318L26.787,25.912L19.146,25.912L19.146,15.107L51.467,15.107L51.467,25.912L43.779,25.912L43.779,21.318L38.881,21.318L38.881,44.216L42.631,44.216L42.631,50.638L27.42,50.638L27.42,44.216Z\" style=\"fill:rgb(242,84,91);fill-rule:nonzero;\"/>\n                <g transform=\"matrix(1,0,0,1,18.2053,55.1928)\">\n                    <path d=\"M0,0L34.461,0\" style=\"fill:none;fill-rule:nonzero;stroke:var(--outline);stroke-width:4px;\"/>\n                </g>\n            </g>\n        </g>\n    </g>\n</svg>\n",
        "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\text\\text.png",
        "tooltip": "Text: present text stimuli",
        "version": "0.0.0",
        "beta": false,
        "validatorClasses": [
            "VisualValidatorRoutine"
        ],
        "hidden": false,
        "params": {
            "name": {
                "val": "text",
                "valType": "code",
                "inputType": "name",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Name",
                "hint": "Name of this Component (alphanumeric or _, no spaces)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startVal": {
                "val": 0.0,
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Start",
                "hint": "When does the Component start?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startEstim": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Expected start (s)",
                "hint": "(Optional) expected start (s), purely for representing in the timeline",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startType": {
                "val": "time (s)",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "time (s)",
                    "frame N",
                    "condition"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Start type",
                "hint": "How do you want to define your start point?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "stopVal": {
                "val": 1.0,
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": [],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop",
                "hint": "When does the Component end? (blank is endless)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "durationEstim": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Expected duration (s)",
                "hint": "(Optional) expected duration (s), purely for representing in the timeline",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "stopType": {
                "val": "duration (s)",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "duration (s)",
                    "duration (frames)",
                    "time (s)",
                    "frame N",
                    "condition"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop type",
                "hint": "How do you want to define your end point?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "color": {
                "val": "white",
                "valType": "color",
                "inputType": "color",
                "categ": "Appearance",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Foreground color",
                "hint": "Foreground color of this stimulus (e.g. $[1,1,0], red )",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "colorSpace": {
                "val": "rgb",
                "valType": "str",
                "inputType": "choice",
                "categ": "Appearance",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [
                    "rgb",
                    "dkl",
                    "lms",
                    "hsv"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Color space",
                "hint": "In what format (color space) have you specified the colors? (rgb, dkl, lms, hsv)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "opacity": {
                "val": "",
                "valType": "num",
                "inputType": "single",
                "categ": "Appearance",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Opacity",
                "hint": "Opacity of the stimulus (1=opaque, 0=fully transparent, 0.5=translucent). Leave blank for each color to have its own opacity (recommended if any color is None).",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "pos": {
                "val": [
                    0,
                    0
                ],
                "valType": "list",
                "inputType": "single",
                "categ": "Layout",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Position [x,y]",
                "hint": "Position of this stimulus (e.g. [1,2] )",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "units": {
                "val": "from exp settings",
                "valType": "str",
                "inputType": "choice",
                "categ": "Layout",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "from exp settings",
                    "deg",
                    "cm",
                    "pix",
                    "norm",
                    "height",
                    "degFlatPos",
                    "degFlat"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Spatial units",
                "hint": "Units of dimensions for this stimulus",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "ori": {
                "val": 0,
                "valType": "num",
                "inputType": "spin",
                "categ": "Layout",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [
                    -360,
                    360
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Orientation",
                "hint": "Orientation of this stimulus (in deg)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "saveStartStop": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Save onset/offset times",
                "hint": "Store the onset/offset times in the data file (as well as in the log file).",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "syncScreenRefresh": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Sync timing with screen refresh",
                "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "disabled": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Disable Component",
                "hint": "Disable this Component",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "contrast": {
                "val": 1,
                "valType": "num",
                "inputType": "single",
                "categ": "Appearance",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Contrast",
                "hint": "Contrast of the stimulus (1.0=unchanged contrast, 0.5=decrease contrast, 0.0=uniform/no contrast, -0.5=slightly inverted, -1.0=totally inverted)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "validator": {
                "val": "",
                "valType": "code",
                "inputType": "validator",
                "categ": "Testing",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "VisualValidatorRoutine"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Validate with...",
                "hint": "Name of validator Component/Routine to use to check the timing of this stimulus.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "text": {
                "val": "Any text\n\nincluding line breaks",
                "valType": "str",
                "inputType": "multi",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Text",
                "hint": "The text to be displayed",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "font": {
                "val": "Arial",
                "valType": "str",
                "inputType": "font",
                "categ": "Formatting",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Font",
                "hint": "The font name (e.g. Comic Sans)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "draggable": {
                "val": false,
                "valType": "code",
                "inputType": "bool",
                "categ": "Layout",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Draggable?",
                "hint": "Should this stimulus be moveble by clicking and dragging?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "letterHeight": {
                "val": 0.05,
                "valType": "num",
                "inputType": "single",
                "categ": "Formatting",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Letter height",
                "hint": "Specifies the height of the letter (the width is then determined by the font)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "wrapWidth": {
                "val": "",
                "valType": "num",
                "inputType": "single",
                "categ": "Layout",
                "updates": "constant",
                "allowedUpdates": [
                    "constant"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Wrap width",
                "hint": "How wide should the text get when it wraps? (in the specified units)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "flip": {
                "val": "None",
                "valType": "str",
                "inputType": "single",
                "categ": "Layout",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [
                    "horiz",
                    "vert",
                    "None"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Flip (mirror)",
                "hint": "horiz = left-right reversed; vert = up-down reversed; $var = variable",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "languageStyle": {
                "val": "LTR",
                "valType": "str",
                "inputType": "choice",
                "categ": "Formatting",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "LTR",
                    "RTL",
                    "Arabic"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Language style",
                "hint": "Handle right-to-left (RTL) languages and Arabic reshaping",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            }
        }
    },
    "TextboxComponent": {
        "__class__": "psychopy.experiment.components.textbox:TextboxComponent",
        "__name__": "TextboxComponent",
        "categories": [
            "Stimuli",
            "Responses"
        ],
        "targets": [
            "PsychoPy",
            "PsychoJS"
        ],
        "plugin": null,
        "iconSVG": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 32 32\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:space=\"preserve\" xmlns:serif=\"http://www.serif.com/\" style=\"fill-rule:evenodd;clip-rule:evenodd;stroke-miterlimit:10;\">\n    <g id=\"light-components-TextboxComponent\" serif:id=\"light/components/TextboxComponent\" transform=\"matrix(0.451519,0,0,0.451519,0,0)\">\n        <rect x=\"0\" y=\"0\" width=\"70.872\" height=\"70.866\" style=\"fill:none;\"/>\n        <clipPath id=\"_clip1\">\n            <rect x=\"0\" y=\"0\" width=\"70.872\" height=\"70.866\"/>\n        </clipPath>\n        <g clip-path=\"url(#_clip1)\">\n            <g id=\"Textbox-Component\" serif:id=\"Textbox Component\" transform=\"matrix(1.04844,0,0,1.04844,-1.94521,-1.71651)\">\n                <g transform=\"matrix(1,0,0,1,-1.72088,-0.429335)\">\n                    <path d=\"M26.343,41.622L28.953,41.622L28.953,25.382L25.895,25.382L25.895,28.64L20.476,28.64L20.476,20.977L43.398,20.977L43.398,28.64L37.946,28.64L37.946,25.382L34.472,25.382L34.472,41.622L37.131,41.622L37.131,46.177L26.343,46.177L26.343,41.622Z\" style=\"fill:rgb(242,84,91);fill-rule:nonzero;\"/>\n                </g>\n                <g transform=\"matrix(0,-1,-1,0,63.7342,33.1474)\">\n                    <path d=\"M-14.963,14.963L14.963,14.963\" style=\"fill:none;fill-rule:nonzero;stroke:var(--outline);stroke-width:4px;\"/>\n                </g>\n                <g transform=\"matrix(1,0,0,1,0,0.0001)\">\n                    <rect x=\"10.305\" y=\"10.084\" width=\"50.698\" height=\"50.698\" style=\"fill:none;stroke:var(--outline);stroke-width:4px;\"/>\n                </g>\n            </g>\n        </g>\n    </g>\n</svg>\n",
        "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\textbox\\textbox.png",
        "tooltip": "Textbox: present text stimuli but cooler",
        "version": "2020.2.0",
        "beta": false,
        "validatorClasses": [
            "VisualValidatorRoutine"
        ],
        "hidden": false,
        "params": {
            "name": {
                "val": "textbox",
                "valType": "code",
                "inputType": "name",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Name",
                "hint": "Name of this Component (alphanumeric or _, no spaces)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startVal": {
                "val": 0.0,
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Start",
                "hint": "When does the Component start?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startEstim": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Expected start (s)",
                "hint": "(Optional) expected start (s), purely for representing in the timeline",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startType": {
                "val": "time (s)",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "time (s)",
                    "frame N",
                    "condition"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Start type",
                "hint": "How do you want to define your start point?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "stopVal": {
                "val": 1.0,
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": [],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop",
                "hint": "When does the Component end? (blank is endless)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "durationEstim": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Expected duration (s)",
                "hint": "(Optional) expected duration (s), purely for representing in the timeline",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "stopType": {
                "val": "duration (s)",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "duration (s)",
                    "duration (frames)",
                    "time (s)",
                    "frame N",
                    "condition"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop type",
                "hint": "How do you want to define your end point?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "color": {
                "val": "white",
                "valType": "color",
                "inputType": "color",
                "categ": "Appearance",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Text color",
                "hint": "Foreground color of this stimulus (e.g. $[1,1,0], red )",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "fillColor": {
                "val": "None",
                "valType": "color",
                "inputType": "color",
                "categ": "Appearance",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Fill color",
                "hint": "Fill color of this stimulus (e.g. $[1,1,0], red )",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "borderColor": {
                "val": "None",
                "valType": "color",
                "inputType": "color",
                "categ": "Appearance",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Border color",
                "hint": "Border color of this stimulus (e.g. $[1,1,0], red )",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "colorSpace": {
                "val": "rgb",
                "valType": "str",
                "inputType": "choice",
                "categ": "Appearance",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [
                    "rgb",
                    "dkl",
                    "lms",
                    "hsv"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Color space",
                "hint": "In what format (color space) have you specified the colors? (rgb, dkl, lms, hsv)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "opacity": {
                "val": "",
                "valType": "num",
                "inputType": "single",
                "categ": "Appearance",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Opacity",
                "hint": "Opacity of the stimulus (1=opaque, 0=fully transparent, 0.5=translucent). Leave blank for each color to have its own opacity (recommended if any color is None).",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "size": {
                "val": [
                    0.5,
                    0.5
                ],
                "valType": "list",
                "inputType": "single",
                "categ": "Layout",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Size [w,h]",
                "hint": "Size of this stimulus (either a single value or x,y pair, e.g. 2.5, [1,2] ",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "pos": {
                "val": [
                    0,
                    0
                ],
                "valType": "list",
                "inputType": "single",
                "categ": "Layout",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Position [x,y]",
                "hint": "Position of this stimulus (e.g. [1,2] )",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "padding": {
                "val": 0,
                "valType": "num",
                "inputType": "single",
                "categ": "Layout",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Padding",
                "hint": "Defines the space between text and the textbox border",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "units": {
                "val": "from exp settings",
                "valType": "str",
                "inputType": "choice",
                "categ": "Layout",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "from exp settings",
                    "deg",
                    "cm",
                    "pix",
                    "norm",
                    "height",
                    "degFlatPos",
                    "degFlat"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Spatial units",
                "hint": "Units of dimensions for this stimulus",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "anchor": {
                "val": "center",
                "valType": "str",
                "inputType": "choice",
                "categ": "Layout",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [
                    "center",
                    "top-center",
                    "bottom-center",
                    "center-left",
                    "center-right",
                    "top-left",
                    "top-right",
                    "bottom-left",
                    "bottom-right"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Anchor",
                "hint": "Which point on the stimulus should be anchored to its exact position?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "ori": {
                "val": 0,
                "valType": "num",
                "inputType": "spin",
                "categ": "Layout",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [
                    -360,
                    360
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Orientation",
                "hint": "Orientation of this stimulus (in deg)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "editable": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Editable?",
                "hint": "Should textbox be editable?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "text": {
                "val": "Any text\n\nincluding line breaks",
                "valType": "str",
                "inputType": "multi",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Text",
                "hint": "The text to be displayed",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "placeholder": {
                "val": "Type here...",
                "valType": "str",
                "inputType": "single",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Placeholder text",
                "hint": "Placeholder text to show when there is no text contents.",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "editable",
                            "condition": "==True"
                        }
                    ],
                    "enabled": []
                }
            },
            "borderWidth": {
                "val": 2,
                "valType": "num",
                "inputType": "single",
                "categ": "Appearance",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Border width",
                "hint": "Textbox border width",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "font": {
                "val": "Arial",
                "valType": "str",
                "inputType": "font",
                "categ": "Formatting",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Font",
                "hint": "The font name (e.g. Comic Sans)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "letterHeight": {
                "val": 0.05,
                "valType": "num",
                "inputType": "single",
                "categ": "Formatting",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Letter height",
                "hint": "Specifies the height of the letter (the width is then determined by the font)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "lineSpacing": {
                "val": 1.0,
                "valType": "num",
                "inputType": "single",
                "categ": "Formatting",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Line spacing",
                "hint": "Defines the space between lines",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "bold": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Formatting",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Bold",
                "hint": "Should text be bold?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "italic": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Formatting",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Italic",
                "hint": "Should text be italic?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "saveStartStop": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Save onset/offset times",
                "hint": "Store the onset/offset times in the data file (as well as in the log file).",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "syncScreenRefresh": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Sync timing with screen refresh",
                "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "disabled": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Disable Component",
                "hint": "Disable this Component",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "contrast": {
                "val": 1,
                "valType": "num",
                "inputType": "single",
                "categ": "Appearance",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Contrast",
                "hint": "Contrast of the stimulus (1.0=unchanged contrast, 0.5=decrease contrast, 0.0=uniform/no contrast, -0.5=slightly inverted, -1.0=totally inverted)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "validator": {
                "val": "",
                "valType": "code",
                "inputType": "validator",
                "categ": "Testing",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "VisualValidatorRoutine"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Validate with...",
                "hint": "Name of validator Component/Routine to use to check the timing of this stimulus.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "flipHoriz": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Layout",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Flip horizontal",
                "hint": "horiz = left-right reversed; vert = up-down reversed; $var = variable",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "flipVert": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Layout",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Flip vertical",
                "hint": "horiz = left-right reversed; vert = up-down reversed; $var = variable",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "draggable": {
                "val": false,
                "valType": "code",
                "inputType": "bool",
                "categ": "Layout",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Draggable?",
                "hint": "Should this stimulus be moveble by clicking and dragging?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "languageStyle": {
                "val": "LTR",
                "valType": "str",
                "inputType": "choice",
                "categ": "Formatting",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "LTR",
                    "RTL",
                    "Arabic"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Language style",
                "hint": "Handle right-to-left (RTL) languages and Arabic reshaping",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "alignment": {
                "val": "center",
                "valType": "str",
                "inputType": "choice",
                "categ": "Formatting",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [
                    "center",
                    "top-center",
                    "bottom-center",
                    "center-left",
                    "center-right",
                    "top-left",
                    "top-right",
                    "bottom-left",
                    "bottom-right"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Alignment",
                "hint": "How should text be laid out within the box?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "overflow": {
                "val": "visible",
                "valType": "str",
                "inputType": "choice",
                "categ": "Layout",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [
                    "visible",
                    "scroll",
                    "hidden"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Overflow",
                "hint": "If the text is bigger than the textbox, how should it behave?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "speechPoint": {
                "val": "",
                "valType": "list",
                "inputType": "single",
                "categ": "Appearance",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Speech point [x,y]",
                "hint": "If specified, adds a speech bubble tail going to that point on screen.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "autoLog": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Auto log",
                "hint": "Automatically record all changes to this in the log file",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            }
        }
    },
    "UnknownComponent": {
        "__class__": "psychopy.experiment.components.unknown:UnknownComponent",
        "__name__": "UnknownComponent",
        "categories": [
            "Other"
        ],
        "targets": [
            "PsychoPy"
        ],
        "plugin": null,
        "iconSVG": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 32 32\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:space=\"preserve\" xmlns:serif=\"http://www.serif.com/\" style=\"fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2;\">\n    <g id=\"UnknownComponent\" transform=\"matrix(0.451519,0,0,0.451519,0,0)\">\n        <rect x=\"0\" y=\"0\" width=\"70.872\" height=\"70.866\" style=\"fill:none;\"/>\n        <g id=\"Box\" transform=\"matrix(1.00961,0,0,1.00961,-80.8375,0.953946)\">\n            <path d=\"M87.781,16.595L87.772,16.601C86.844,17.137 86.272,18.127 86.272,19.199L86.272,49.099C86.272,50.17 86.843,51.161 87.771,51.696L113.663,66.652L113.672,66.657C114.601,67.193 115.745,67.193 116.673,66.656L142.563,51.696C143.49,51.16 144.062,50.17 144.062,49.099L144.062,19.199C144.062,19.182 144.062,19.165 144.061,19.149L144.06,19.099L144.058,19.049L144.055,18.999L144.051,18.949L144.047,18.9L144.042,18.851L144.035,18.801L144.028,18.752L144.021,18.704L144.012,18.655L144.003,18.607L143.993,18.559L143.982,18.511L143.97,18.463L143.958,18.416L143.945,18.369L143.931,18.322L143.916,18.275L143.901,18.229L143.885,18.183L143.868,18.137L143.85,18.092L143.832,18.047L143.813,18.002L143.793,17.958L143.773,17.914L143.751,17.87L143.73,17.827L143.707,17.784L143.684,17.741L143.66,17.699L143.635,17.657L143.61,17.615L143.584,17.574L143.557,17.534L143.53,17.494L143.502,17.454L143.473,17.414L143.444,17.376L143.414,17.337L143.384,17.299L143.353,17.262L143.321,17.225L143.289,17.188L143.256,17.152L143.222,17.117L143.188,17.082L143.153,17.048L143.117,17.014L143.081,16.98L143.045,16.948L143.008,16.915L142.97,16.884L142.932,16.853L142.893,16.822L142.853,16.792L142.813,16.763L142.773,16.734L142.732,16.706L142.69,16.679L142.648,16.652L142.605,16.626L142.562,16.601L116.672,1.651C115.744,1.115 114.6,1.115 113.672,1.651L87.781,16.595ZM92.272,24.394L112.172,35.881L112.172,58.861C112.172,58.861 92.272,47.367 92.272,47.367L92.272,24.394ZM118.172,35.881L138.062,24.395L138.062,47.367C138.062,47.367 118.172,58.86 118.172,58.86L118.172,35.881ZM95.273,19.199L115.172,30.685L135.063,19.199L115.171,7.713L95.273,19.199Z\" style=\"fill:rgb(102,102,110);\"/>\n        </g>\n        <g transform=\"matrix(0.874349,0.504802,0.504802,1.45724,-0.340474,0.953946)\">\n            <g transform=\"matrix(1.33333,0,-0.577347,1,19.268,0)\">\n                <text x=\"-0.719px\" y=\"32.958px\" style=\"font-family:'Arvo-Bold', 'Arvo';font-weight:700;font-size:20.324px;fill:rgb(242,84,91);\">?</text>\n            </g>\n        </g>\n        <g transform=\"matrix(0.874349,0.504802,-0.371957,0.951047,35.8573,-9.7475)\">\n            <g transform=\"matrix(1.33333,0,-0.577347,1,19.268,0)\">\n                <text x=\"-0.719px\" y=\"32.958px\" style=\"font-family:'Arvo-Bold', 'Arvo';font-weight:700;font-size:20.324px;fill:rgb(242,84,91);\">?</text>\n            </g>\n        </g>\n        <g transform=\"matrix(0.874348,-0.504805,0.511639,0.870402,27.0951,25.7299)\">\n            <g transform=\"matrix(1.33333,0,-0.577347,1,19.268,0)\">\n                <text x=\"-0.719px\" y=\"32.958px\" style=\"font-family:'Arvo-Bold', 'Arvo';font-weight:700;font-size:20.324px;fill:rgb(242,84,91);\">?</text>\n            </g>\n        </g>\n    </g>\n</svg>\n",
        "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\unknown\\unknown.png",
        "tooltip": "Unknown: A component that is not known by the current installed version of PsychoPy\n(most likely from the future)",
        "version": "0.0.0",
        "beta": false,
        "validatorClasses": [],
        "hidden": true,
        "params": {
            "name": {
                "val": "",
                "valType": "code",
                "inputType": "name",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Name",
                "hint": "Name of this Component (alphanumeric or _, no spaces)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startVal": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Start",
                "hint": "When does the Component start?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startEstim": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Expected start (s)",
                "hint": "(Optional) expected start (s), purely for representing in the timeline",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startType": {
                "val": "time (s)",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "time (s)",
                    "frame N",
                    "condition"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Start type",
                "hint": "How do you want to define your start point?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "stopVal": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": [],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop",
                "hint": "When does the Component end? (blank is endless)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "durationEstim": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Expected duration (s)",
                "hint": "(Optional) expected duration (s), purely for representing in the timeline",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "stopType": {
                "val": "duration (s)",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "duration (s)",
                    "duration (frames)",
                    "time (s)",
                    "frame N",
                    "condition"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop type",
                "hint": "How do you want to define your end point?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "saveStartStop": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Save onset/offset times",
                "hint": "Store the onset/offset times in the data file (as well as in the log file).",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "syncScreenRefresh": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Sync timing with screen refresh",
                "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "disabled": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Disable Component",
                "hint": "Disable this Component",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            }
        }
    },
    "UnknownPluginComponent": {
        "__class__": "psychopy.experiment.components.unknownPlugin:UnknownPluginComponent",
        "__name__": "UnknownPluginComponent",
        "categories": [
            "Other"
        ],
        "targets": [
            "PsychoPy"
        ],
        "plugin": null,
        "iconSVG": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 32 32\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:space=\"preserve\" xmlns:serif=\"http://www.serif.com/\" style=\"fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2;\">\n    <g id=\"UnknownPluginComponent\" transform=\"matrix(0.451519,0,0,0.451519,0,0)\">\n        <rect x=\"0\" y=\"0\" width=\"70.872\" height=\"70.866\" style=\"fill:none;\"/>\n        <g transform=\"matrix(3.09249,0,0,3.09249,-1064.78,-1309.28)\">\n            <path d=\"M356.56,440.594C356.56,440.449 356.586,440.314 356.639,440.187C356.692,440.06 356.765,439.949 356.859,439.853C356.953,439.757 357.063,439.682 357.19,439.627C357.317,439.573 357.455,439.545 357.603,439.545C357.744,439.545 357.876,439.573 358.001,439.627C358.126,439.682 358.236,439.757 358.33,439.853C358.423,439.949 358.498,440.06 358.552,440.187C358.607,440.314 358.634,440.449 358.634,440.594C358.634,440.739 358.607,440.874 358.552,441.001C358.498,441.128 358.423,441.239 358.33,441.332C358.236,441.426 358.126,441.5 358.001,441.555C357.876,441.61 357.744,441.637 357.603,441.637C357.455,441.637 357.317,441.61 357.19,441.555C357.063,441.5 356.953,441.426 356.859,441.332C356.765,441.239 356.692,441.128 356.639,441.001C356.586,440.874 356.56,440.739 356.56,440.594ZM356.695,439.153C356.695,438.879 356.699,438.639 356.707,438.432C356.714,438.225 356.731,438.04 356.756,437.878C356.782,437.716 356.819,437.572 356.868,437.445C356.916,437.318 356.981,437.199 357.061,437.09C357.141,436.981 357.24,436.874 357.357,436.771C357.474,436.667 357.617,436.557 357.785,436.44C357.964,436.291 358.113,436.156 358.23,436.032C358.347,435.909 358.439,435.787 358.505,435.666C358.572,435.545 358.619,435.42 358.646,435.291C358.673,435.162 358.687,435.018 358.687,434.858C358.687,434.627 358.629,434.44 358.514,434.295C358.399,434.151 358.244,434.078 358.048,434.078C357.927,434.078 357.815,434.092 357.711,434.119C357.608,434.147 357.517,434.198 357.439,434.272C357.361,434.346 357.299,434.448 357.254,434.576C357.209,434.705 357.187,434.871 357.187,435.074L355.324,434.893C355.332,434.463 355.407,434.089 355.549,433.771C355.692,433.452 355.887,433.188 356.135,432.977C356.383,432.766 356.676,432.609 357.014,432.505C357.352,432.402 357.72,432.35 358.119,432.35C358.49,432.35 358.837,432.405 359.162,432.514C359.486,432.623 359.768,432.785 360.008,433C360.249,433.215 360.438,433.479 360.577,433.791C360.715,434.104 360.785,434.463 360.785,434.869C360.785,435.295 360.687,435.686 360.492,436.041C360.296,436.397 359.998,436.733 359.595,437.049C359.388,437.198 359.216,437.336 359.08,437.465C358.943,437.594 358.833,437.735 358.751,437.887C358.669,438.039 358.612,438.215 358.579,438.414C358.545,438.614 358.529,438.86 358.529,439.153L356.695,439.153Z\" style=\"fill:rgb(242,84,91);fill-rule:nonzero;\"/>\n        </g>\n        <g transform=\"matrix(1.0654,0,0,1.0654,-334.767,-419.5)\">\n            <path d=\"M329.872,418.972L329.936,418.338L330.528,416.43L331.462,414.71L332.692,413.219L334.184,411.988L335.904,411.054L337.811,410.462L339.842,410.257L339.866,410.257C339.819,409.717 339.795,409.137 339.795,408.506L340.085,406.106L340.883,403.939L342.041,402.106L343.43,400.61C345.824,398.433 349.621,396.824 353.977,396.824C358.333,396.824 362.13,398.433 364.524,400.61L365.913,402.106L367.071,403.939L367.869,406.106L368.159,408.506C368.159,409.137 368.135,409.717 368.088,410.257L368.548,410.257L370.529,410.453L372.417,411.027L374.157,411.956L375.697,413.219L376.96,414.759L377.889,416.499L378.463,418.386L378.659,420.368L378.659,447.077L378.463,449.059L377.889,450.946L376.96,452.686L375.697,454.226L374.157,455.489L372.417,456.418L370.53,456.992L368.548,457.188L339.842,457.188L337.86,456.992L335.973,456.418L334.232,455.489L332.692,454.226L331.43,452.686L330.501,450.946L329.927,449.059L329.731,447.077L329.731,446.893L327.977,447.188L325.577,446.898L323.41,446.1L321.577,444.942L320.081,443.553C317.904,441.159 316.295,437.362 316.295,433.006C316.295,428.65 317.904,424.853 320.081,422.459L321.577,421.07L323.41,419.912L325.577,419.114L327.977,418.824C328.659,418.824 329.287,418.877 329.872,418.972ZM347.977,413.326L347.979,413.327C348.447,414.046 348.484,414.963 348.075,415.716C347.666,416.47 346.878,416.939 346.02,416.939L339.842,416.939C337.948,416.939 336.413,418.474 336.413,420.368L336.413,425.388C336.413,426.273 335.938,427.089 335.17,427.528C334.401,427.966 333.457,427.958 332.695,427.508L332.692,427.506C331.286,426.673 330.152,425.506 327.977,425.506C325.217,425.506 322.977,428.867 322.977,433.006C322.977,437.145 325.217,440.506 327.977,440.506C330.394,440.506 331.471,438.505 332.877,437.505C333.56,437.02 334.457,436.956 335.201,437.34C335.946,437.724 336.413,438.492 336.413,439.33L336.413,447.077C336.413,447.986 336.774,448.858 337.417,449.502C338.06,450.145 338.932,450.506 339.842,450.506L368.548,450.506C369.457,450.506 370.329,450.145 370.972,449.502C371.616,448.858 371.977,447.986 371.977,447.077L371.977,420.368C371.977,419.459 371.616,418.586 370.972,417.943C370.329,417.3 369.457,416.939 368.548,416.939L361.934,416.939C361.076,416.939 360.288,416.47 359.88,415.716C359.471,414.963 359.508,414.046 359.976,413.328L359.977,413.326C360.894,411.92 361.477,410.804 361.477,408.506C361.477,405.746 358.116,403.506 353.977,403.506C349.837,403.506 346.477,405.746 346.477,408.506C346.477,410.804 347.06,411.92 347.977,413.326Z\" style=\"fill:rgb(102,102,110);\"/>\n        </g>\n    </g>\n</svg>\n",
        "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\unknownPlugin\\unknownPlugin.png",
        "tooltip": "Unknown: A component which comes from a plugin which you do not have installed & activated.",
        "version": "0.0.0",
        "beta": false,
        "validatorClasses": [],
        "hidden": true,
        "params": {
            "name": {
                "val": "",
                "valType": "code",
                "inputType": "name",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Name",
                "hint": "Name of this Component (alphanumeric or _, no spaces)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startVal": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Start",
                "hint": "When does the Component start?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startEstim": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Expected start (s)",
                "hint": "(Optional) expected start (s), purely for representing in the timeline",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startType": {
                "val": "time (s)",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "time (s)",
                    "frame N",
                    "condition"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Start type",
                "hint": "How do you want to define your start point?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "stopVal": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": [],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop",
                "hint": "When does the Component end? (blank is endless)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "durationEstim": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Expected duration (s)",
                "hint": "(Optional) expected duration (s), purely for representing in the timeline",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "stopType": {
                "val": "duration (s)",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "duration (s)",
                    "duration (frames)",
                    "time (s)",
                    "frame N",
                    "condition"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop type",
                "hint": "How do you want to define your end point?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "saveStartStop": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Save onset/offset times",
                "hint": "Store the onset/offset times in the data file (as well as in the log file).",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "syncScreenRefresh": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Sync timing with screen refresh",
                "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "disabled": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Disable Component",
                "hint": "Disable this Component",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            }
        }
    },
    "VariableComponent": {
        "__class__": "psychopy.experiment.components.variable:VariableComponent",
        "__name__": "VariableComponent",
        "categories": [
            "Custom"
        ],
        "targets": [
            "PsychoPy"
        ],
        "plugin": null,
        "iconSVG": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 48 48\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:space=\"preserve\" xmlns:serif=\"http://www.serif.com/\" style=\"fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2;\">\n    <rect id=\"VariableComponent\" x=\"0\" y=\"0\" width=\"48\" height=\"48\" style=\"fill:none;\"/>\n    <g id=\"VariableComponent1\" serif:id=\"VariableComponent\">\n        <g transform=\"matrix(0.871126,0,0,0.871126,-6.05811,-6.74154)\">\n            <path d=\"M9.323,32.547L22.594,27.731L22.594,32.231L14.719,34.586L22.594,37.118L22.594,41.512L9.323,36.467L9.323,32.547Z\" style=\"fill:rgb(242,84,91);fill-rule:nonzero;\"/>\n        </g>\n        <g transform=\"matrix(0.871126,0,0,0.871126,-6.05811,-6.74154)\">\n            <path d=\"M36.097,39.578L37.134,39.578L34.866,37.416L32.511,39.578L33.689,39.578L33.689,44.395L25.11,44.395L25.11,39.578L26.921,39.578L31.439,35.149L27.255,31L25.11,31L25.11,26.184L33.689,26.184L33.689,31L32.862,31L34.989,32.881L37.028,31L36.062,31L36.062,26.184L44.622,26.184L44.622,31L42.618,31L38.417,35.166L42.864,39.578L44.675,39.578L44.675,44.395L36.097,44.395L36.097,39.578Z\" style=\"fill:var(--outline);fill-rule:nonzero;\"/>\n        </g>\n        <g transform=\"matrix(0.871126,0,0,0.871126,-6.05811,-6.74154)\">\n            <path d=\"M59.76,36.467L46.471,41.512L46.471,37.118L54.346,34.586L46.471,32.231L46.471,27.731L59.76,32.547L59.76,36.467Z\" style=\"fill:rgb(242,84,91);fill-rule:nonzero;\"/>\n        </g>\n    </g>\n</svg>\n",
        "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\variable\\variable.png",
        "tooltip": "Variable: create a new variable",
        "version": "0.0.0",
        "beta": false,
        "validatorClasses": [],
        "hidden": false,
        "params": {
            "name": {
                "val": "var1",
                "valType": "code",
                "inputType": "name",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Name",
                "hint": "Name of this Component (alphanumeric or _, no spaces)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startVal": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Start",
                "hint": "When does the Component start?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startEstim": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Expected start (s)",
                "hint": "(Optional) expected start (s), purely for representing in the timeline",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startType": {
                "val": "time (s)",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "time (s)",
                    "frame N",
                    "condition"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Start type",
                "hint": "How do you want to define your start point?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "stopVal": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": [],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop",
                "hint": "When does the Component end? (blank is endless)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "durationEstim": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Expected duration (s)",
                "hint": "(Optional) expected duration (s), purely for representing in the timeline",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "stopType": {
                "val": "duration (s)",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "duration (s)",
                    "duration (frames)",
                    "time (s)",
                    "frame N",
                    "condition"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop type",
                "hint": "How do you want to define your end point?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startExpValue": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Experiment start value",
                "hint": "The start value. A variable can be set to any value.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "saveStartExp": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Save exp start value",
                "hint": "Save the experiment start value in data file.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startRoutineValue": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Routine start value",
                "hint": "Set the value for the beginning of each Routine.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "saveStartRoutine": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Save Routine start value",
                "hint": "Save the Routine start value in data file.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "startFrameValue": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Frame start value",
                "hint": "Set the value for the beginning of every screen refresh.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "saveFrameValue": {
                "val": "never",
                "valType": "str",
                "inputType": "choice",
                "categ": "Data",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [
                    "first",
                    "last",
                    "all",
                    "never"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Save frame value",
                "hint": "Save choice of frame value in data file.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "saveEndRoutine": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Save Routine end value",
                "hint": "Save the Routine end value in data file.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "saveEndExp": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": "constant",
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Save exp end value",
                "hint": "Save the experiment end value in data file.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "saveStartStop": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Save onset/offset times",
                "hint": "Store the onset/offset times in the data file (as well as in the log file).",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "syncScreenRefresh": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Sync timing with screen refresh",
                "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "disabled": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Disable Component",
                "hint": "Disable this Component",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            }
        }
    },
    "BaseStandaloneRoutine": {
        "__class__": "psychopy.experiment.routines._base:BaseStandaloneRoutine",
        "__name__": "BaseStandaloneRoutine",
        "categories": [
            "Custom"
        ],
        "targets": [],
        "plugin": null,
        "iconSVG": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 32 32\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:space=\"preserve\" xmlns:serif=\"http://www.serif.com/\" style=\"fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2;\">\n    <g id=\"BaseComponent\" transform=\"matrix(0.451519,0,0,0.451519,0,0)\">\n        <rect x=\"0\" y=\"0\" width=\"70.872\" height=\"70.866\" style=\"fill:none;\"/>\n        <g id=\"Box\" transform=\"matrix(1.00961,0,0,1.00961,-80.8375,0.953946)\">\n            <path d=\"M87.781,16.595L87.772,16.601C86.844,17.137 86.272,18.127 86.272,19.199L86.272,49.099C86.272,50.17 86.843,51.161 87.771,51.696L113.663,66.652L113.672,66.657C114.601,67.193 115.745,67.193 116.673,66.656L142.563,51.696C143.49,51.16 144.062,50.17 144.062,49.099L144.062,19.199C144.062,19.182 144.062,19.165 144.061,19.149L144.06,19.099L144.058,19.049L144.055,18.999L144.051,18.949L144.047,18.9L144.042,18.851L144.035,18.801L144.028,18.752L144.021,18.704L144.012,18.655L144.003,18.607L143.993,18.559L143.982,18.511L143.97,18.463L143.958,18.416L143.945,18.369L143.931,18.322L143.916,18.275L143.901,18.229L143.885,18.183L143.868,18.137L143.85,18.092L143.832,18.047L143.813,18.002L143.793,17.958L143.773,17.914L143.751,17.87L143.73,17.827L143.707,17.784L143.684,17.741L143.66,17.699L143.635,17.657L143.61,17.615L143.584,17.574L143.557,17.534L143.53,17.494L143.502,17.454L143.473,17.414L143.444,17.376L143.414,17.337L143.384,17.299L143.353,17.262L143.321,17.225L143.289,17.188L143.256,17.152L143.222,17.117L143.188,17.082L143.153,17.048L143.117,17.014L143.081,16.98L143.045,16.948L143.008,16.915L142.97,16.884L142.932,16.853L142.893,16.822L142.853,16.792L142.813,16.763L142.773,16.734L142.732,16.706L142.69,16.679L142.648,16.652L142.605,16.626L142.562,16.601L116.672,1.651C115.744,1.115 114.6,1.115 113.672,1.651L87.781,16.595ZM92.272,24.394L112.172,35.881L112.172,58.861C112.172,58.861 92.272,47.367 92.272,47.367L92.272,24.394ZM118.172,35.881L138.062,24.395L138.062,47.367C138.062,47.367 118.172,58.86 118.172,58.86L118.172,35.881ZM95.273,19.199L115.172,30.685L135.063,19.199L115.171,7.713L95.273,19.199Z\" style=\"fill:var(--outline);\"/>\n        </g>\n    </g>\n</svg>\n",
        "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\routines\\unknown\\unknown.png",
        "tooltip": "",
        "version": "0.0.0",
        "beta": false,
        "hidden": false,
        "params": {
            "stopVal": {
                "val": "",
                "valType": "num",
                "inputType": "single",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": [],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop",
                "hint": "When does the Routine end? (blank is endless)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "stopType": {
                "val": "duration (s)",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "duration (s)",
                    "duration (frames)",
                    "condition"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop type...",
                "hint": "How do you want to define your end point?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "name": {
                "val": "",
                "valType": "code",
                "inputType": "name",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Name",
                "hint": "Name of this Routine (alphanumeric or _, no spaces)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "disabled": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Disable Routine",
                "hint": "Disable this Routine",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            }
        }
    },
    "BaseDeviceRoutine": {
        "__class__": "psychopy.experiment.routines._base:BaseDeviceRoutine",
        "__name__": "BaseDeviceRoutine",
        "categories": [
            "Custom"
        ],
        "targets": [],
        "plugin": null,
        "iconSVG": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 32 32\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:space=\"preserve\" xmlns:serif=\"http://www.serif.com/\" style=\"fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2;\">\n    <g id=\"BaseComponent\" transform=\"matrix(0.451519,0,0,0.451519,0,0)\">\n        <rect x=\"0\" y=\"0\" width=\"70.872\" height=\"70.866\" style=\"fill:none;\"/>\n        <g id=\"Box\" transform=\"matrix(1.00961,0,0,1.00961,-80.8375,0.953946)\">\n            <path d=\"M87.781,16.595L87.772,16.601C86.844,17.137 86.272,18.127 86.272,19.199L86.272,49.099C86.272,50.17 86.843,51.161 87.771,51.696L113.663,66.652L113.672,66.657C114.601,67.193 115.745,67.193 116.673,66.656L142.563,51.696C143.49,51.16 144.062,50.17 144.062,49.099L144.062,19.199C144.062,19.182 144.062,19.165 144.061,19.149L144.06,19.099L144.058,19.049L144.055,18.999L144.051,18.949L144.047,18.9L144.042,18.851L144.035,18.801L144.028,18.752L144.021,18.704L144.012,18.655L144.003,18.607L143.993,18.559L143.982,18.511L143.97,18.463L143.958,18.416L143.945,18.369L143.931,18.322L143.916,18.275L143.901,18.229L143.885,18.183L143.868,18.137L143.85,18.092L143.832,18.047L143.813,18.002L143.793,17.958L143.773,17.914L143.751,17.87L143.73,17.827L143.707,17.784L143.684,17.741L143.66,17.699L143.635,17.657L143.61,17.615L143.584,17.574L143.557,17.534L143.53,17.494L143.502,17.454L143.473,17.414L143.444,17.376L143.414,17.337L143.384,17.299L143.353,17.262L143.321,17.225L143.289,17.188L143.256,17.152L143.222,17.117L143.188,17.082L143.153,17.048L143.117,17.014L143.081,16.98L143.045,16.948L143.008,16.915L142.97,16.884L142.932,16.853L142.893,16.822L142.853,16.792L142.813,16.763L142.773,16.734L142.732,16.706L142.69,16.679L142.648,16.652L142.605,16.626L142.562,16.601L116.672,1.651C115.744,1.115 114.6,1.115 113.672,1.651L87.781,16.595ZM92.272,24.394L112.172,35.881L112.172,58.861C112.172,58.861 92.272,47.367 92.272,47.367L92.272,24.394ZM118.172,35.881L138.062,24.395L138.062,47.367C138.062,47.367 118.172,58.86 118.172,58.86L118.172,35.881ZM95.273,19.199L115.172,30.685L135.063,19.199L115.171,7.713L95.273,19.199Z\" style=\"fill:var(--outline);\"/>\n        </g>\n    </g>\n</svg>\n",
        "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\routines\\unknown\\unknown.png",
        "tooltip": "",
        "version": "0.0.0",
        "beta": false,
        "hidden": false,
        "params": {
            "stopVal": {
                "val": "",
                "valType": "num",
                "inputType": "single",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": [],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop",
                "hint": "When does the Routine end? (blank is endless)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "stopType": {
                "val": "duration (s)",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "duration (s)",
                    "duration (frames)",
                    "condition"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop type...",
                "hint": "How do you want to define your end point?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "name": {
                "val": "",
                "valType": "code",
                "inputType": "name",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Name",
                "hint": "Name of this Routine (alphanumeric or _, no spaces)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "deviceLabel": {
                "val": "",
                "valType": "device",
                "inputType": "device",
                "categ": "Device",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Device",
                "hint": "The named device from Device Manager to use for this Component.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "disabled": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Disable Routine",
                "hint": "Disable this Routine",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            }
        }
    },
    "BaseValidatorRoutine": {
        "__class__": "psychopy.experiment.routines._base:BaseValidatorRoutine",
        "__name__": "BaseValidatorRoutine",
        "categories": [
            "Custom"
        ],
        "targets": [],
        "plugin": null,
        "iconSVG": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 32 32\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:space=\"preserve\" xmlns:serif=\"http://www.serif.com/\" style=\"fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2;\">\n    <g id=\"BaseComponent\" transform=\"matrix(0.451519,0,0,0.451519,0,0)\">\n        <rect x=\"0\" y=\"0\" width=\"70.872\" height=\"70.866\" style=\"fill:none;\"/>\n        <g id=\"Box\" transform=\"matrix(1.00961,0,0,1.00961,-80.8375,0.953946)\">\n            <path d=\"M87.781,16.595L87.772,16.601C86.844,17.137 86.272,18.127 86.272,19.199L86.272,49.099C86.272,50.17 86.843,51.161 87.771,51.696L113.663,66.652L113.672,66.657C114.601,67.193 115.745,67.193 116.673,66.656L142.563,51.696C143.49,51.16 144.062,50.17 144.062,49.099L144.062,19.199C144.062,19.182 144.062,19.165 144.061,19.149L144.06,19.099L144.058,19.049L144.055,18.999L144.051,18.949L144.047,18.9L144.042,18.851L144.035,18.801L144.028,18.752L144.021,18.704L144.012,18.655L144.003,18.607L143.993,18.559L143.982,18.511L143.97,18.463L143.958,18.416L143.945,18.369L143.931,18.322L143.916,18.275L143.901,18.229L143.885,18.183L143.868,18.137L143.85,18.092L143.832,18.047L143.813,18.002L143.793,17.958L143.773,17.914L143.751,17.87L143.73,17.827L143.707,17.784L143.684,17.741L143.66,17.699L143.635,17.657L143.61,17.615L143.584,17.574L143.557,17.534L143.53,17.494L143.502,17.454L143.473,17.414L143.444,17.376L143.414,17.337L143.384,17.299L143.353,17.262L143.321,17.225L143.289,17.188L143.256,17.152L143.222,17.117L143.188,17.082L143.153,17.048L143.117,17.014L143.081,16.98L143.045,16.948L143.008,16.915L142.97,16.884L142.932,16.853L142.893,16.822L142.853,16.792L142.813,16.763L142.773,16.734L142.732,16.706L142.69,16.679L142.648,16.652L142.605,16.626L142.562,16.601L116.672,1.651C115.744,1.115 114.6,1.115 113.672,1.651L87.781,16.595ZM92.272,24.394L112.172,35.881L112.172,58.861C112.172,58.861 92.272,47.367 92.272,47.367L92.272,24.394ZM118.172,35.881L138.062,24.395L138.062,47.367C138.062,47.367 118.172,58.86 118.172,58.86L118.172,35.881ZM95.273,19.199L115.172,30.685L135.063,19.199L115.171,7.713L95.273,19.199Z\" style=\"fill:var(--outline);\"/>\n        </g>\n    </g>\n</svg>\n",
        "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\routines\\unknown\\unknown.png",
        "tooltip": "",
        "version": "0.0.0",
        "beta": false,
        "hidden": false,
        "params": {
            "stopVal": {
                "val": "",
                "valType": "num",
                "inputType": "single",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": [],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop",
                "hint": "When does the Routine end? (blank is endless)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "stopType": {
                "val": "duration (s)",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "duration (s)",
                    "duration (frames)",
                    "condition"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop type...",
                "hint": "How do you want to define your end point?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "name": {
                "val": "",
                "valType": "code",
                "inputType": "name",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Name",
                "hint": "Name of this Routine (alphanumeric or _, no spaces)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "deviceLabel": {
                "val": "",
                "valType": "device",
                "inputType": "device",
                "categ": "Device",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Device",
                "hint": "The named device from Device Manager to use for this Component.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "disabled": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Disable Routine",
                "hint": "Disable this Routine",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            }
        }
    },
    "VisualValidatorRoutine": {
        "__class__": "psychopy.experiment.routines.visualValidator:VisualValidatorRoutine",
        "__name__": "VisualValidatorRoutine",
        "categories": [
            "Validation"
        ],
        "targets": [
            "PsychoPy"
        ],
        "plugin": null,
        "iconSVG": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 48 48\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:space=\"preserve\" xmlns:serif=\"http://www.serif.com/\" style=\"fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2;\">\n    <rect id=\"components-VisualValidatorRoutine\" serif:id=\"components/VisualValidatorRoutine\" x=\"0\" y=\"0\" width=\"48\" height=\"48\" style=\"fill:none;\"/>\n    <g id=\"components-VisualValidatorRoutine1\" serif:id=\"components/VisualValidatorRoutine\">\n        <g id=\"window\" transform=\"matrix(0.852941,0,0,0.852941,0.294118,1.47059)\">\n            <g id=\"Frame\" transform=\"matrix(0.754028,0,0,0.754028,1.39261,6.2647)\">\n                <g id=\"Image-Component\" serif:id=\"Image Component\">\n                    <path id=\"Frame1\" serif:id=\"Frame\" d=\"M14.46,10.135C10.354,10.135 7.025,9.201 7.025,13.308L7.025,44.085C7.025,48.192 10.354,47.625 14.46,47.625L56.411,47.625C60.518,47.625 63.847,48.192 63.847,44.085L63.847,13.308C63.847,9.201 60.518,10.135 56.411,10.135L14.46,10.135Z\" style=\"fill-rule:nonzero;\"/>\n                    <clipPath id=\"_clip1\">\n                        <path id=\"Frame2\" serif:id=\"Frame\" d=\"M14.46,10.135C10.354,10.135 7.025,9.201 7.025,13.308L7.025,44.085C7.025,48.192 10.354,47.625 14.46,47.625L56.411,47.625C60.518,47.625 63.847,48.192 63.847,44.085L63.847,13.308C63.847,9.201 60.518,10.135 56.411,10.135L14.46,10.135Z\" clip-rule=\"nonzero\"/>\n                    </clipPath>\n                    <g clip-path=\"url(#_clip1)\">\n                        <g id=\"Sky\" transform=\"matrix(-1,0,0,1,66.724,0.6631)\">\n                            <rect x=\"-6.532\" y=\"1.239\" width=\"79.788\" height=\"67.725\" style=\"fill:rgb(2,169,234);\"/>\n                        </g>\n                        <g id=\"Sun\" transform=\"matrix(0,0.762067,0.762067,0,23.6885,20.7612)\">\n                            <path d=\"M14.163,-9.461C12.955,-9.963 11.63,-10.24 10.24,-10.24C4.585,-10.24 0.001,-5.656 0.001,-0.001C0.001,5.654 4.585,10.24 10.24,10.24C15.895,10.24 20.478,5.654 20.478,-0.001C20.478,-0.126 20.476,-0.252 20.472,-0.376L14.992,-4.028C13.134,-5.266 12.814,-7.803 14.163,-9.461Z\" style=\"fill:var(--mantle);\"/>\n                        </g>\n                        <g id=\"Mountains\" transform=\"matrix(0.762067,0,0,0.762067,-362.132,11.0485)\">\n                            <path d=\"M484,41.774L496.338,27.38C497.941,25.509 500.887,25.688 502.253,27.737L510.432,40.01L527.58,20.004C528.661,18.742 530.648,18.862 531.57,20.245L544,38.899L544,65L484,65L484,41.774Z\" style=\"fill:var(--outline);\"/>\n                        </g>\n                    </g>\n                </g>\n            </g>\n            <g transform=\"matrix(1.32272,0,0,0.929481,-1000.62,-1123.28)\">\n                <path d=\"M797,1222.25L797,1250.75C797,1253.1 795.663,1255 794.015,1255L760.985,1255C759.337,1255 758,1253.1 758,1250.75L758,1222.25C758,1219.9 759.337,1218 760.985,1218L794.015,1218C795.663,1218 797,1219.9 797,1222.25ZM761.545,1227.67L761.545,1249.95L793.455,1249.95L793.455,1227.67L761.545,1227.67Z\" style=\"fill:var(--outline);\"/>\n            </g>\n            <g transform=\"matrix(2.63649,0,0,2.63649,-2043.89,-3210.86)\">\n                <circle cx=\"793.166\" cy=\"1222.83\" r=\"0.834\" style=\"fill:rgb(242,84,91);\"/>\n            </g>\n            <g transform=\"matrix(2.63649,0,0,2.63649,-2050.49,-3210.86)\">\n                <circle cx=\"793.166\" cy=\"1222.83\" r=\"0.834\" style=\"fill:rgb(107,204,116);\"/>\n            </g>\n            <g transform=\"matrix(2.63649,0,0,2.63649,-2057.08,-3210.86)\">\n                <circle cx=\"793.166\" cy=\"1222.83\" r=\"0.834\" style=\"fill:rgb(37,169,234);\"/>\n            </g>\n        </g>\n        <g id=\"stopwatch\" transform=\"matrix(1.1,0,0,1.1,-4.6,-4.85)\">\n            <g transform=\"matrix(1.1,0,0,1.1,-6.35,-4.65)\">\n                <path d=\"M46.248,32.2C47.1,33.583 47.591,35.212 47.591,36.955C47.591,41.972 43.517,46.045 38.5,46.045C33.483,46.045 29.409,41.972 29.409,36.955C29.409,35.212 29.9,33.583 30.752,32.2C30.579,32.167 30.415,32.083 30.281,31.95C29.927,31.595 29.927,31.019 30.281,30.664L32.21,28.736C32.565,28.381 33.141,28.381 33.495,28.736C33.629,28.869 33.712,29.034 33.745,29.206C34.428,28.786 35.171,28.454 35.957,28.225C35.45,28.026 35.091,27.532 35.091,26.955C35.091,26.202 35.702,25.591 36.455,25.591L40.545,25.591C41.298,25.591 41.909,26.202 41.909,26.955C41.909,27.532 41.55,28.026 41.043,28.225C41.829,28.454 42.572,28.786 43.255,29.206C43.288,29.034 43.371,28.869 43.505,28.736C43.859,28.381 44.435,28.381 44.79,28.736L46.719,30.664C47.073,31.019 47.073,31.595 46.719,31.95C46.585,32.083 46.421,32.167 46.248,32.2ZM38.5,30.343C34.851,30.343 31.888,33.306 31.888,36.955C31.888,40.604 34.851,43.566 38.5,43.566C42.149,43.566 45.112,40.604 45.112,36.955C45.112,33.306 42.149,30.343 38.5,30.343Z\" style=\"fill:rgb(107,204,116);\"/>\n            </g>\n            <g transform=\"matrix(1.33333,0,0,1.33333,-15.3333,-12.6667)\">\n                <circle cx=\"38.5\" cy=\"36.5\" r=\"5.455\" style=\"fill:rgb(241,242,242);\"/>\n            </g>\n            <g transform=\"matrix(2.93391,0,0,2.93391,-71.0083,-77.0349)\">\n                <path d=\"M34.884,39.634C35.017,39.501 35.233,39.501 35.366,39.634C35.499,39.767 35.499,39.983 35.366,40.116C35.233,40.249 35.017,40.249 34.884,40.116C34.751,39.983 34.751,39.767 34.884,39.634ZM36.473,36.203C36.661,36.203 36.814,36.356 36.814,36.544C36.814,36.732 36.661,36.885 36.473,36.885C36.285,36.885 36.132,36.732 36.132,36.544C36.132,36.356 36.285,36.203 36.473,36.203ZM38.456,38.186C38.644,38.186 38.797,38.339 38.797,38.527C38.797,38.715 38.644,38.868 38.456,38.868C38.268,38.868 38.115,38.715 38.115,38.527C38.115,38.339 38.268,38.186 38.456,38.186ZM34.49,38.186C34.678,38.186 34.831,38.339 34.831,38.527C34.831,38.715 34.678,38.868 34.49,38.868C34.302,38.868 34.149,38.715 34.149,38.527C34.149,38.339 34.302,38.186 34.49,38.186ZM37.58,36.938C37.713,36.805 37.929,36.805 38.062,36.938C38.195,37.071 38.195,37.287 38.062,37.42C37.929,37.553 37.713,37.553 37.58,37.42C37.447,37.287 37.447,37.071 37.58,36.938ZM36.473,40.169C36.661,40.169 36.814,40.322 36.814,40.51C36.814,40.698 36.661,40.851 36.473,40.851C36.285,40.851 36.132,40.698 36.132,40.51C36.132,40.322 36.285,40.169 36.473,40.169ZM34.884,36.938C35.017,36.805 35.233,36.805 35.366,36.938C35.499,37.071 35.499,37.287 35.366,37.42C35.233,37.553 35.017,37.553 34.884,37.42C34.751,37.287 34.751,37.071 34.884,36.938ZM37.58,39.634C37.713,39.501 37.929,39.501 38.062,39.634C38.195,39.767 38.195,39.983 38.062,40.116C37.929,40.249 37.713,40.249 37.58,40.116C37.447,39.983 37.447,39.767 37.58,39.634Z\" style=\"fill:rgb(107,204,116);\"/>\n            </g>\n            <g transform=\"matrix(0.663712,0,0,0.663712,13.0695,12.4707)\">\n                <path d=\"M36.414,36.414C35.748,37.081 34.366,37.195 33.586,36.414C32.805,35.634 32.919,34.252 33.586,33.586C34.488,32.683 39,31 39,31C39,31 37.317,35.512 36.414,36.414Z\" style=\"fill:rgb(107,204,116);\"/>\n            </g>\n        </g>\n    </g>\n</svg>\n",
        "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\routines\\visualValidator\\visual_validator.png",
        "tooltip": "Use a light sensor to confirm that visual stimuli are presented when they should be.",
        "version": "2025.1.0",
        "beta": false,
        "hidden": false,
        "params": {
            "name": {
                "val": "visualVal",
                "valType": "code",
                "inputType": "name",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Name",
                "hint": "Name of this Routine (alphanumeric or _, no spaces)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "deviceLabel": {
                "val": "",
                "valType": "device",
                "inputType": "device",
                "categ": "Device",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "python:///psychopy.experiment.routines.visualValidator:ScreenBufferVisualValidatorBackend"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Device",
                "hint": "The named device from Device Manager to use for this Component.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "findThreshold": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Find best threshold?",
                "hint": "Run a brief Routine to find the best threshold for the light sensor at experiment start?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "threshold": {
                "val": 0.5,
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Threshold",
                "hint": "Light threshold at which the light sensor should register a positive, units go from 0 (least sensitive) to 1 (most sensitive).",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "findThreshold",
                            "condition": "==False"
                        }
                    ],
                    "enabled": []
                }
            },
            "findSensor": {
                "val": true,
                "valType": "code",
                "inputType": "bool",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Find sensor?",
                "hint": "Run a brief Routine to find the size and position of the light sensor at experiment start?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "sensorPos": {
                "val": "(1, 1)",
                "valType": "list",
                "inputType": "single",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Position [x,y]",
                "hint": "Position of the light sensor on the window.",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "findSensor",
                            "condition": "==False"
                        }
                    ],
                    "enabled": []
                }
            },
            "sensorSize": {
                "val": "(0.1, 0.1)",
                "valType": "list",
                "inputType": "single",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": [
                    "constant",
                    "set every repeat",
                    "set every frame"
                ],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Size [x,y]",
                "hint": "Size of the area covered by the light sensor on the window.",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "findSensor",
                            "condition": "==False"
                        }
                    ],
                    "enabled": []
                }
            },
            "sensorUnits": {
                "val": "norm",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "from exp settings",
                    "deg",
                    "cm",
                    "pix",
                    "norm",
                    "height",
                    "degFlatPos",
                    "degFlat"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Spatial units",
                "hint": "Spatial units in which the light sensor size and position are specified.",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "findSensor",
                            "condition": "==False"
                        }
                    ],
                    "enabled": []
                }
            },
            "channel": {
                "val": "0",
                "valType": "code",
                "inputType": "single",
                "categ": "Device",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Light sensor channel",
                "hint": "If relevant, a channel number attached to the light sensor, to distinguish it from other light sensors on the same port. Leave blank to use the first light sensor which can detect the Window.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "disabled": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Disable Routine",
                "hint": "Disable this Routine",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            }
        }
    },
    "AudioValidatorRoutine": {
        "__class__": "psychopy.experiment.routines.audioValidator:AudioValidatorRoutine",
        "__name__": "AudioValidatorRoutine",
        "categories": [
            "Validation"
        ],
        "targets": [
            "PsychoPy"
        ],
        "plugin": null,
        "iconSVG": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 48 48\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:space=\"preserve\" xmlns:serif=\"http://www.serif.com/\" style=\"fill-rule:evenodd;clip-rule:evenodd;stroke-linecap:round;stroke-linejoin:bevel;stroke-miterlimit:10;\">\n    <rect id=\"components-AudioValidatorRoutine\" serif:id=\"components/AudioValidatorRoutine\" x=\"0\" y=\"0\" width=\"48\" height=\"48\" style=\"fill:none;\"/>\n    <g id=\"components-AudioValidatorRoutine1\" serif:id=\"components/AudioValidatorRoutine\">\n        <g id=\"Sound-Component\" serif:id=\"Sound Component\" transform=\"matrix(0.677278,0,0,0.677278,-0.702262,-0.746235)\">\n            <g transform=\"matrix(0.00116851,0.999999,0.999999,-0.00116851,63.8912,32.149)\">\n                <path d=\"M-8.976,-15.831C-2.107,-8.979 9.004,-8.979 15.842,-15.831\" style=\"fill:none;fill-rule:nonzero;stroke:rgb(242,84,91);stroke-width:3px;\"/>\n            </g>\n            <g transform=\"matrix(0.00114852,0.999999,0.999999,-0.00114852,73.2983,31.0041)\">\n                <path d=\"M-11.966,-21.106C-2.809,-11.97 12.004,-11.97 21.12,-21.106\" style=\"fill:none;fill-rule:nonzero;stroke:rgb(242,84,91);stroke-width:3px;\"/>\n            </g>\n            <g transform=\"matrix(1,0,0,1,36.2474,59.7733)\">\n                <path d=\"M0,-48.336C-1.408,-48.336 -2.732,-47.833 -3.829,-46.881C-4.966,-45.895 -6.105,-44.912 -7.245,-43.928L-8.182,-43.12L-10.096,-41.471C-11.713,-40.078 -13.331,-38.685 -14.939,-37.281C-16.5,-37.288 -18.066,-37.29 -19.631,-37.29C-21.289,-37.29 -22.947,-37.288 -24.605,-37.284C-28.235,-37.275 -30.773,-34.734 -30.777,-31.103C-30.779,-29.864 -30.778,-28.626 -30.778,-27.388L-30.778,-25.878L-30.777,-23.567C-30.776,-21.469 -30.775,-19.372 -30.781,-17.274C-30.785,-15.489 -30.1,-13.923 -28.8,-12.746C-27.152,-11.255 -25.277,-11.254 -24.66,-11.254L-22.535,-11.253L-19.572,-11.252C-18.108,-11.252 -16.642,-11.253 -15.178,-11.258C-14.937,-11.047 -14.7,-10.847 -14.467,-10.65C-14.303,-10.511 -14.139,-10.372 -13.976,-10.232L-12.001,-8.526L-8.235,-5.272L-6.841,-4.064C-5.82,-3.178 -4.798,-2.291 -3.769,-1.414C-2.699,-0.503 -1.352,0 0.024,0C1.616,0 3.12,-0.647 4.259,-1.821C5.363,-2.959 5.922,-4.428 5.92,-6.187C5.917,-10.905 5.917,-15.623 5.918,-20.341L5.918,-42.023C5.92,-42.257 5.918,-42.492 5.903,-42.725C5.746,-45.153 4.361,-47.096 2.196,-47.921C1.475,-48.196 0.736,-48.336 0,-48.336M0,-44.336C0.251,-44.336 0.509,-44.284 0.771,-44.184C1.541,-43.89 1.861,-43.256 1.912,-42.466C1.923,-42.285 1.918,-42.102 1.918,-41.919L1.918,-24.143C1.918,-18.157 1.916,-12.171 1.92,-6.185C1.921,-5.593 1.82,-5.051 1.388,-4.607C1.001,-4.208 0.514,-4 0.024,-4C-0.393,-4 -0.812,-4.15 -1.175,-4.459C-2.665,-5.729 -4.138,-7.018 -5.619,-8.298C-7.533,-9.952 -9.447,-11.605 -11.361,-13.259C-11.95,-13.767 -12.558,-14.256 -13.12,-14.793C-13.47,-15.128 -13.841,-15.261 -14.319,-15.261L-14.329,-15.261C-16.077,-15.254 -17.825,-15.252 -19.572,-15.252C-21.268,-15.252 -22.963,-15.254 -24.659,-15.254C-25.191,-15.254 -25.691,-15.327 -26.115,-15.712C-26.583,-16.135 -26.782,-16.642 -26.781,-17.264C-26.773,-20.136 -26.778,-23.007 -26.778,-25.878C-26.778,-27.618 -26.779,-29.358 -26.777,-31.098C-26.775,-32.548 -26.055,-33.28 -24.596,-33.284C-22.941,-33.288 -21.286,-33.29 -19.631,-33.29C-17.831,-33.29 -16.03,-33.287 -14.229,-33.278L-14.215,-33.278C-13.675,-33.278 -13.263,-33.432 -12.852,-33.792C-10.437,-35.907 -7.998,-37.995 -5.568,-40.092C-4.114,-41.347 -2.658,-42.601 -1.207,-43.86C-0.832,-44.186 -0.425,-44.336 0,-44.336\" style=\"fill:var(--outline);fill-rule:nonzero;\"/>\n            </g>\n        </g>\n        <g id=\"stopwatch\" transform=\"matrix(1.1,0,0,1.1,-4.6,-4.85)\">\n            <g transform=\"matrix(1.1,0,0,1.1,-6.35,-4.65)\">\n                <path d=\"M46.248,32.2C47.1,33.583 47.591,35.212 47.591,36.955C47.591,41.972 43.517,46.045 38.5,46.045C33.483,46.045 29.409,41.972 29.409,36.955C29.409,35.212 29.9,33.583 30.752,32.2C30.579,32.167 30.415,32.083 30.281,31.95C29.927,31.595 29.927,31.019 30.281,30.664L32.21,28.736C32.565,28.381 33.141,28.381 33.495,28.736C33.629,28.869 33.712,29.034 33.745,29.206C34.428,28.786 35.171,28.454 35.957,28.225C35.45,28.026 35.091,27.532 35.091,26.955C35.091,26.202 35.702,25.591 36.455,25.591L40.545,25.591C41.298,25.591 41.909,26.202 41.909,26.955C41.909,27.532 41.55,28.026 41.043,28.225C41.829,28.454 42.572,28.786 43.255,29.206C43.288,29.034 43.371,28.869 43.505,28.736C43.859,28.381 44.435,28.381 44.79,28.736L46.719,30.664C47.073,31.019 47.073,31.595 46.719,31.95C46.585,32.083 46.421,32.167 46.248,32.2ZM38.5,30.343C34.851,30.343 31.888,33.306 31.888,36.955C31.888,40.604 34.851,43.566 38.5,43.566C42.149,43.566 45.112,40.604 45.112,36.955C45.112,33.306 42.149,30.343 38.5,30.343Z\" style=\"fill:rgb(107,204,116);\"/>\n            </g>\n            <g transform=\"matrix(1.33333,0,0,1.33333,-15.3333,-12.6667)\">\n                <circle cx=\"38.5\" cy=\"36.5\" r=\"5.455\" style=\"fill:rgb(241,242,242);\"/>\n            </g>\n            <g transform=\"matrix(2.93391,0,0,2.93391,-71.0083,-77.0349)\">\n                <path d=\"M34.884,39.634C35.017,39.501 35.233,39.501 35.366,39.634C35.499,39.767 35.499,39.983 35.366,40.116C35.233,40.249 35.017,40.249 34.884,40.116C34.751,39.983 34.751,39.767 34.884,39.634ZM36.473,36.203C36.661,36.203 36.814,36.356 36.814,36.544C36.814,36.732 36.661,36.885 36.473,36.885C36.285,36.885 36.132,36.732 36.132,36.544C36.132,36.356 36.285,36.203 36.473,36.203ZM38.456,38.186C38.644,38.186 38.797,38.339 38.797,38.527C38.797,38.715 38.644,38.868 38.456,38.868C38.268,38.868 38.115,38.715 38.115,38.527C38.115,38.339 38.268,38.186 38.456,38.186ZM34.49,38.186C34.678,38.186 34.831,38.339 34.831,38.527C34.831,38.715 34.678,38.868 34.49,38.868C34.302,38.868 34.149,38.715 34.149,38.527C34.149,38.339 34.302,38.186 34.49,38.186ZM37.58,36.938C37.713,36.805 37.929,36.805 38.062,36.938C38.195,37.071 38.195,37.287 38.062,37.42C37.929,37.553 37.713,37.553 37.58,37.42C37.447,37.287 37.447,37.071 37.58,36.938ZM36.473,40.169C36.661,40.169 36.814,40.322 36.814,40.51C36.814,40.698 36.661,40.851 36.473,40.851C36.285,40.851 36.132,40.698 36.132,40.51C36.132,40.322 36.285,40.169 36.473,40.169ZM34.884,36.938C35.017,36.805 35.233,36.805 35.366,36.938C35.499,37.071 35.499,37.287 35.366,37.42C35.233,37.553 35.017,37.553 34.884,37.42C34.751,37.287 34.751,37.071 34.884,36.938ZM37.58,39.634C37.713,39.501 37.929,39.501 38.062,39.634C38.195,39.767 38.195,39.983 38.062,40.116C37.929,40.249 37.713,40.249 37.58,40.116C37.447,39.983 37.447,39.767 37.58,39.634Z\" style=\"fill:rgb(107,204,116);\"/>\n            </g>\n            <g transform=\"matrix(0.663712,0,0,0.663712,13.0695,12.4707)\">\n                <path d=\"M36.414,36.414C35.748,37.081 34.366,37.195 33.586,36.414C32.805,35.634 32.919,34.252 33.586,33.586C34.488,32.683 39,31 39,31C39,31 37.317,35.512 36.414,36.414Z\" style=\"fill:rgb(107,204,116);\"/>\n            </g>\n        </g>\n    </g>\n</svg>\n",
        "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\routines\\audioValidator\\audio_validator.png",
        "tooltip": "Use a sound sensor to confirm that audio stimuli are presented when they should be.",
        "version": "2025.1.0",
        "beta": false,
        "hidden": false,
        "params": {
            "name": {
                "val": "audioVal",
                "valType": "code",
                "inputType": "name",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Name",
                "hint": "Name of this Routine (alphanumeric or _, no spaces)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "deviceLabel": {
                "val": "",
                "valType": "device",
                "inputType": "device",
                "categ": "Device",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "python:///psychopy.experiment.components.soundsensor:MicrophoneSoundSensorBackend"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Device",
                "hint": "The named device from Device Manager to use for this Component.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "channel": {
                "val": "0",
                "valType": "code",
                "inputType": "single",
                "categ": "Device",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Sound sensor channel",
                "hint": "If relevant, a channel number attached to the sound sensor, to distinguish it from other sound sensors on the same port. Leave blank to use the first sound sensor which can detect the speaker.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "disabled": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Disable Routine",
                "hint": "Disable this Routine",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            }
        }
    },
    "UnknownRoutine": {
        "__class__": "psychopy.experiment.routines.unknown:UnknownRoutine",
        "__name__": "UnknownRoutine",
        "categories": [
            "Other"
        ],
        "targets": [],
        "plugin": null,
        "iconSVG": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 32 32\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:space=\"preserve\" xmlns:serif=\"http://www.serif.com/\" style=\"fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2;\">\n    <g id=\"UnknownComponent\" transform=\"matrix(0.451519,0,0,0.451519,0,0)\">\n        <rect x=\"0\" y=\"0\" width=\"70.872\" height=\"70.866\" style=\"fill:none;\"/>\n        <g id=\"Box\" transform=\"matrix(1.00961,0,0,1.00961,-80.8375,0.953946)\">\n            <path d=\"M87.781,16.595L87.772,16.601C86.844,17.137 86.272,18.127 86.272,19.199L86.272,49.099C86.272,50.17 86.843,51.161 87.771,51.696L113.663,66.652L113.672,66.657C114.601,67.193 115.745,67.193 116.673,66.656L142.563,51.696C143.49,51.16 144.062,50.17 144.062,49.099L144.062,19.199C144.062,19.182 144.062,19.165 144.061,19.149L144.06,19.099L144.058,19.049L144.055,18.999L144.051,18.949L144.047,18.9L144.042,18.851L144.035,18.801L144.028,18.752L144.021,18.704L144.012,18.655L144.003,18.607L143.993,18.559L143.982,18.511L143.97,18.463L143.958,18.416L143.945,18.369L143.931,18.322L143.916,18.275L143.901,18.229L143.885,18.183L143.868,18.137L143.85,18.092L143.832,18.047L143.813,18.002L143.793,17.958L143.773,17.914L143.751,17.87L143.73,17.827L143.707,17.784L143.684,17.741L143.66,17.699L143.635,17.657L143.61,17.615L143.584,17.574L143.557,17.534L143.53,17.494L143.502,17.454L143.473,17.414L143.444,17.376L143.414,17.337L143.384,17.299L143.353,17.262L143.321,17.225L143.289,17.188L143.256,17.152L143.222,17.117L143.188,17.082L143.153,17.048L143.117,17.014L143.081,16.98L143.045,16.948L143.008,16.915L142.97,16.884L142.932,16.853L142.893,16.822L142.853,16.792L142.813,16.763L142.773,16.734L142.732,16.706L142.69,16.679L142.648,16.652L142.605,16.626L142.562,16.601L116.672,1.651C115.744,1.115 114.6,1.115 113.672,1.651L87.781,16.595ZM92.272,24.394L112.172,35.881L112.172,58.861C112.172,58.861 92.272,47.367 92.272,47.367L92.272,24.394ZM118.172,35.881L138.062,24.395L138.062,47.367C138.062,47.367 118.172,58.86 118.172,58.86L118.172,35.881ZM95.273,19.199L115.172,30.685L135.063,19.199L115.171,7.713L95.273,19.199Z\" style=\"fill:rgb(102,102,110);\"/>\n        </g>\n        <g transform=\"matrix(0.874349,0.504802,0.504802,1.45724,-0.340474,0.953946)\">\n            <g transform=\"matrix(1.33333,0,-0.577347,1,19.268,0)\">\n                <text x=\"-0.719px\" y=\"32.958px\" style=\"font-family:'Arvo-Bold', 'Arvo';font-weight:700;font-size:20.324px;fill:rgb(242,84,91);\">?</text>\n            </g>\n        </g>\n        <g transform=\"matrix(0.874349,0.504802,-0.371957,0.951047,35.8573,-9.7475)\">\n            <g transform=\"matrix(1.33333,0,-0.577347,1,19.268,0)\">\n                <text x=\"-0.719px\" y=\"32.958px\" style=\"font-family:'Arvo-Bold', 'Arvo';font-weight:700;font-size:20.324px;fill:rgb(242,84,91);\">?</text>\n            </g>\n        </g>\n        <g transform=\"matrix(0.874348,-0.504805,0.511639,0.870402,27.0951,25.7299)\">\n            <g transform=\"matrix(1.33333,0,-0.577347,1,19.268,0)\">\n                <text x=\"-0.719px\" y=\"32.958px\" style=\"font-family:'Arvo-Bold', 'Arvo';font-weight:700;font-size:20.324px;fill:rgb(242,84,91);\">?</text>\n            </g>\n        </g>\n    </g>\n</svg>\n",
        "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\routines\\unknown\\unknown.png",
        "tooltip": "Unknown routine",
        "version": "0.0.0",
        "beta": false,
        "hidden": true,
        "params": {
            "stopVal": {
                "val": "",
                "valType": "num",
                "inputType": "single",
                "categ": "Basic",
                "updates": "constant",
                "allowedUpdates": [],
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop",
                "hint": "When does the Routine end? (blank is endless)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "stopType": {
                "val": "duration (s)",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "duration (s)",
                    "duration (frames)",
                    "condition"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Stop type...",
                "hint": "How do you want to define your end point?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "name": {
                "val": "",
                "valType": "code",
                "inputType": "name",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Name",
                "hint": "Name of this Routine (alphanumeric or _, no spaces)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "disabled": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Disable Routine",
                "hint": "Disable this Routine",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            }
        }
    },
    "EyetrackerCalibrationRoutine": {
        "__class__": "psychopy.experiment.routines.eyetracker_calibrate:EyetrackerCalibrationRoutine",
        "__name__": "EyetrackerCalibrationRoutine",
        "categories": [
            "Eyetracking"
        ],
        "targets": [
            "PsychoPy"
        ],
        "plugin": null,
        "iconSVG": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 32 32\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:space=\"preserve\" xmlns:serif=\"http://www.serif.com/\" style=\"fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2;\">\n    <g id=\"EyetrackerCalibrationRoutine\" transform=\"matrix(0.451519,0,0,0.451519,0,0)\">\n        <rect x=\"0\" y=\"0\" width=\"70.872\" height=\"70.866\" style=\"fill:none;\"/>\n        <g transform=\"matrix(0,0.997716,0.997716,0,35.4361,18.5967)\">\n            <path d=\"M16.875,-16.875C7.555,-16.875 0,-9.32 0,0C0,9.32 7.555,16.875 16.875,16.875C26.195,16.875 33.75,9.32 33.75,0C33.75,-9.32 26.195,-16.875 16.875,-16.875\" style=\"fill:rgb(2,169,234);fill-rule:nonzero;\"/>\n        </g>\n        <g transform=\"matrix(0,-0.997716,-0.997716,0,33.3437,8.27124)\">\n            <path d=\"M-26.768,-32.1C-39.941,-24.322 -48.465,-13.622 -48.465,-2.097C-48.465,9.428 -39.941,20.128 -26.768,27.906L-24.948,28.98L-23.235,27.741C-11.846,19.499 -5.983,9.1 -5.983,-2.097C-5.983,-13.294 -11.846,-23.693 -23.235,-31.935L-24.948,-33.174L-26.768,-32.1ZM-25.318,-25.422C-16.953,-18.817 -12.437,-10.816 -12.437,-2.097C-12.437,6.622 -16.952,14.623 -25.318,21.228C-35.241,14.938 -42.011,6.906 -42.011,-2.097C-42.011,-11.1 -35.241,-19.132 -25.318,-25.422ZM-21.749,-2.25C-21.412,-3.135 -21.227,-4.094 -21.227,-5.097C-21.227,-9.514 -24.807,-13.094 -29.224,-13.094C-33.641,-13.094 -37.221,-9.514 -37.221,-5.097C-37.221,-0.68 -33.641,2.9 -29.224,2.9C-28.876,2.9 -28.534,2.878 -28.198,2.835C-28.609,2.194 -28.847,1.432 -28.847,0.614C-28.847,-1.665 -26.999,-3.513 -24.72,-3.513C-23.553,-3.513 -22.499,-3.029 -21.749,-2.25Z\" style=\"fill:var(--outline);\"/>\n        </g>\n        <g transform=\"matrix(0,-0.863069,-0.863069,0,33.5018,28.7917)\">\n            <path d=\"M-5.365,-5.365C-8.328,-5.365 -10.73,-2.963 -10.73,0C-10.73,2.963 -8.328,5.365 -5.365,5.365C-2.402,5.365 0,2.963 0,0C0,-2.963 -2.402,-5.365 -5.365,-5.365ZM-5.365,-38.167C-8.328,-38.167 -10.73,-35.765 -10.73,-32.802C-10.73,-29.839 -8.328,-27.437 -5.365,-27.437C-2.402,-27.437 0,-29.839 0,-32.802C0,-35.765 -2.402,-38.167 -5.365,-38.167ZM-38.259,-5.365C-41.222,-5.365 -43.624,-2.963 -43.624,0C-43.624,2.963 -41.222,5.365 -38.259,5.365C-35.296,5.365 -32.894,2.963 -32.894,0C-32.894,-2.963 -35.296,-5.365 -38.259,-5.365ZM-38.259,-38.167C-41.222,-38.167 -43.624,-35.765 -43.624,-32.802C-43.624,-29.839 -41.222,-27.437 -38.259,-27.437C-35.296,-27.437 -32.894,-29.839 -32.894,-32.802C-32.894,-35.765 -35.296,-38.167 -38.259,-38.167ZM-21.858,-5.365C-24.821,-5.365 -27.223,-2.963 -27.223,0C-27.223,2.963 -24.821,5.365 -21.858,5.365C-18.895,5.365 -16.493,2.963 -16.493,0C-16.493,-2.963 -18.895,-5.365 -21.858,-5.365ZM-5.365,-21.766C-8.328,-21.766 -10.73,-19.364 -10.73,-16.401C-10.73,-13.438 -8.328,-11.036 -5.365,-11.036C-2.402,-11.036 0,-13.438 0,-16.401C0,-19.364 -2.402,-21.766 -5.365,-21.766ZM-21.858,-21.766C-24.821,-21.766 -27.223,-19.364 -27.223,-16.401C-27.223,-13.438 -24.821,-11.036 -21.858,-11.036C-18.895,-11.036 -16.493,-13.438 -16.493,-16.401C-16.493,-19.364 -18.895,-21.766 -21.858,-21.766ZM-38.259,-21.766C-41.222,-21.766 -43.624,-19.364 -43.624,-16.401C-43.624,-13.438 -41.222,-11.036 -38.259,-11.036C-35.296,-11.036 -32.894,-13.438 -32.894,-16.401C-32.894,-19.364 -35.296,-21.766 -38.259,-21.766ZM-21.858,-38.167C-24.821,-38.167 -27.223,-35.765 -27.223,-32.802C-27.223,-29.839 -24.821,-27.437 -21.858,-27.437C-18.895,-27.437 -16.493,-29.839 -16.493,-32.802C-16.493,-35.765 -18.895,-38.167 -21.858,-38.167Z\" style=\"fill:rgb(242,84,91);\"/>\n        </g>\n    </g>\n</svg>\n",
        "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\routines\\eyetracker_calibrate\\eyetracker_calib.png",
        "tooltip": "Calibration routine for eyetrackers",
        "version": "2021.2.0",
        "beta": true,
        "hidden": false,
        "params": {
            "name": {
                "val": "calibration",
                "valType": "code",
                "inputType": "name",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Name",
                "hint": "Name of this Routine (alphanumeric or _, no spaces)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "targetLayout": {
                "val": "NINE_POINTS",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "THREE_POINTS",
                    "FIVE_POINTS",
                    "NINE_POINTS",
                    "THIRTEEN_POINTS"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Target layout",
                "hint": "How many targets do you want to be presented for calibration? Points will be displayed in a grid.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "randomisePos": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Randomise target positions",
                "hint": "Should the order of target positions be randomised?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "textColor": {
                "val": "white",
                "valType": "color",
                "inputType": "color",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Text color",
                "hint": "Text foreground color",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "useCustom": {
                "val": false,
                "valType": "code",
                "inputType": "bool",
                "categ": "Target",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Use custom?",
                "hint": "Check this box to use a custom stimulus as a calibration target, rather than creating one from params.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "customTarget": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Target",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Custom target",
                "hint": "Give the name of any visual Component to use it as a calibration target.",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "useCustom",
                            "condition": ""
                        }
                    ],
                    "enabled": []
                }
            },
            "fillColor": {
                "val": "",
                "valType": "color",
                "inputType": "color",
                "categ": "Target",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Outer fill color",
                "hint": "Fill color of the outer part of the target",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "useCustom",
                            "condition": "==False"
                        }
                    ],
                    "enabled": []
                }
            },
            "borderColor": {
                "val": "black",
                "valType": "color",
                "inputType": "color",
                "categ": "Target",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Outer border color",
                "hint": "Border color of the outer part of the target",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "useCustom",
                            "condition": "==False"
                        }
                    ],
                    "enabled": []
                }
            },
            "innerFillColor": {
                "val": "green",
                "valType": "color",
                "inputType": "color",
                "categ": "Target",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Inner fill color",
                "hint": "Fill color of the inner part of the target",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "useCustom",
                            "condition": "==False"
                        }
                    ],
                    "enabled": []
                }
            },
            "innerBorderColor": {
                "val": "black",
                "valType": "color",
                "inputType": "color",
                "categ": "Target",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Inner border color",
                "hint": "Border color of the inner part of the target",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "useCustom",
                            "condition": "==False"
                        }
                    ],
                    "enabled": []
                }
            },
            "colorSpace": {
                "val": "rgb",
                "valType": "str",
                "inputType": "choice",
                "categ": "Target",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "rgb",
                    "dkl",
                    "lms",
                    "hsv"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Color space",
                "hint": "In what format (color space) have you specified the colors? (rgb, dkl, lms, hsv)",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "useCustom",
                            "condition": "==False"
                        }
                    ],
                    "enabled": []
                }
            },
            "borderWidth": {
                "val": 2,
                "valType": "num",
                "inputType": "single",
                "categ": "Target",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Outer border width",
                "hint": "Width of the line around the outer part of the target",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "useCustom",
                            "condition": "==False"
                        }
                    ],
                    "enabled": []
                }
            },
            "innerBorderWidth": {
                "val": 2,
                "valType": "num",
                "inputType": "single",
                "categ": "Target",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Inner border width",
                "hint": "Width of the line around the inner part of the target",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "useCustom",
                            "condition": "==False"
                        }
                    ],
                    "enabled": []
                }
            },
            "outerRadius": {
                "val": 0.01,
                "valType": "num",
                "inputType": "single",
                "categ": "Target",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Outer radius",
                "hint": "Size (radius) of the outer part of the target",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "useCustom",
                            "condition": "==False"
                        }
                    ],
                    "enabled": []
                }
            },
            "innerRadius": {
                "val": 0.0035,
                "valType": "num",
                "inputType": "single",
                "categ": "Target",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Inner radius",
                "hint": "Size (radius) of the inner part of the target",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "useCustom",
                            "condition": "==False"
                        }
                    ],
                    "enabled": []
                }
            },
            "progressMode": {
                "val": "time",
                "valType": "str",
                "inputType": "choice",
                "categ": "Animation",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "space key",
                    "time"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Progress mode",
                "hint": "Should the target move to the next position after a keypress or after an amount of time?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "targetDur": {
                "val": 1.5,
                "valType": "num",
                "inputType": "single",
                "categ": "Animation",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Target duration",
                "hint": "Time limit (s) after which progress to next position",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "progressMode",
                            "condition": "in ['time', 'either']"
                        }
                    ],
                    "enabled": []
                }
            },
            "expandDur": {
                "val": 1,
                "valType": "num",
                "inputType": "single",
                "categ": "Animation",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Expand / contract duration",
                "hint": "Duration of the target expand/contract animation",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "progressMode",
                            "condition": "in ['space key', 'either']"
                        }
                    ],
                    "enabled": []
                }
            },
            "expandScale": {
                "val": 1.5,
                "valType": "num",
                "inputType": "single",
                "categ": "Animation",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Expand scale",
                "hint": "How many times bigger than its size the target grows",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "movementAnimation": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Animation",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Animate position changes",
                "hint": "Enable / disable animations as target stim changes position",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "movementDur": {
                "val": 1.0,
                "valType": "num",
                "inputType": "single",
                "categ": "Animation",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Movement duration",
                "hint": "Duration of the animation during position changes.",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "movementAnimation",
                            "condition": "== True"
                        }
                    ],
                    "enabled": []
                }
            },
            "targetDelay": {
                "val": 1.0,
                "valType": "num",
                "inputType": "single",
                "categ": "Animation",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Target delay",
                "hint": "Duration of the delay between positions.",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "movementAnimation",
                            "condition": "== False"
                        }
                    ],
                    "enabled": []
                }
            },
            "disabled": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Disable Routine",
                "hint": "Disable this Routine",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "units": {
                "val": "from exp settings",
                "valType": "str",
                "inputType": "choice",
                "categ": "Target",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "from exp settings"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Spatial units",
                "hint": "Units of dimensions for this stimulus",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "useCustom",
                            "condition": "==False"
                        }
                    ],
                    "enabled": []
                }
            }
        }
    },
    "CounterbalanceRoutine": {
        "__class__": "psychopy.experiment.routines.counterbalance:CounterbalanceRoutine",
        "__name__": "CounterbalanceRoutine",
        "categories": [
            "Custom"
        ],
        "targets": [
            "PsychoPy",
            "PsychoJS"
        ],
        "plugin": null,
        "iconSVG": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 48 48\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:space=\"preserve\" xmlns:serif=\"http://www.serif.com/\" style=\"fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2;\">\n    <rect id=\"CounterbalanceRoutine\" x=\"0\" y=\"0\" width=\"48\" height=\"48\" style=\"fill:none;\"/>\n    <g id=\"CounterbalanceRoutine1\" serif:id=\"CounterbalanceRoutine\">\n        <g transform=\"matrix(1,0,0,1,-605.914,-1081.86)\">\n            <path d=\"M613.499,1098.27C612.719,1097.49 612.719,1096.23 613.499,1095.44C614.28,1094.66 615.547,1094.66 616.328,1095.44L625.38,1104.5C625.755,1104.87 625.966,1105.38 625.966,1105.91L625.966,1115.64C625.966,1116.74 625.07,1117.64 623.966,1117.64C622.862,1117.64 621.966,1116.74 621.966,1115.64L621.966,1106.74L613.499,1098.27Z\" style=\"fill:var(--outline);\"/>\n        </g>\n        <g transform=\"matrix(-1,0,0,1,652.966,-1081.86)\">\n            <path d=\"M616.328,1095.44C615.547,1094.66 614.28,1094.66 613.499,1095.44C612.719,1096.23 612.719,1097.49 613.499,1098.27L621.966,1106.74L621.966,1122.48C621.966,1123.59 622.862,1124.48 623.966,1124.48C625.07,1124.48 625.966,1123.59 625.966,1122.48L625.966,1105.91C625.966,1105.38 625.755,1104.87 625.38,1104.5L616.328,1095.44Z\" style=\"fill:var(--outline);\"/>\n        </g>\n        <g transform=\"matrix(1.03113,0,0,1.03113,-620.917,-1088)\">\n            <circle cx=\"624.962\" cy=\"1087.64\" r=\"2.909\" style=\"fill:rgb(37,169,234);\"/>\n        </g>\n        <g transform=\"matrix(1.03113,0,0,1.03113,-620.917,-1096)\">\n            <circle cx=\"624.962\" cy=\"1087.64\" r=\"2.909\" style=\"fill:rgb(242,84,91);\"/>\n        </g>\n        <g transform=\"matrix(1.03113,0,0,1.03113,-620.917,-1081)\">\n            <circle cx=\"624.962\" cy=\"1087.64\" r=\"2.909\" style=\"fill:rgb(242,84,91);\"/>\n        </g>\n        <g transform=\"matrix(1.03113,0,0,1.03113,-613.917,-1108)\">\n            <circle cx=\"624.962\" cy=\"1087.64\" r=\"2.909\" style=\"fill:rgb(242,84,91);\"/>\n        </g>\n        <g transform=\"matrix(1.03113,0,0,1.03113,-614.917,-1115)\">\n            <circle cx=\"624.962\" cy=\"1087.64\" r=\"2.909\" style=\"fill:rgb(242,84,91);\"/>\n        </g>\n        <g transform=\"matrix(1.03113,0,0,1.03113,-619.917,-1110)\">\n            <circle cx=\"624.962\" cy=\"1087.64\" r=\"2.909\" style=\"fill:rgb(37,169,234);\"/>\n        </g>\n        <g transform=\"matrix(1.03113,0,0,1.03113,-608.917,-1113)\">\n            <circle cx=\"624.962\" cy=\"1087.64\" r=\"2.909\" style=\"fill:rgb(37,169,234);\"/>\n        </g>\n        <g transform=\"matrix(1.03113,0,0,1.03113,-630.917,-1110)\">\n            <circle cx=\"624.962\" cy=\"1087.64\" r=\"2.909\" style=\"fill:rgb(37,169,234);\"/>\n        </g>\n        <g transform=\"matrix(1.03113,0,0,1.03113,-625.917,-1105)\">\n            <circle cx=\"624.962\" cy=\"1087.64\" r=\"2.909\" style=\"fill:rgb(242,84,91);\"/>\n        </g>\n        <g transform=\"matrix(1.03113,0,0,1.03113,-624.917,-1115)\">\n            <circle cx=\"624.962\" cy=\"1087.64\" r=\"2.909\" style=\"fill:rgb(242,84,91);\"/>\n        </g>\n        <g transform=\"matrix(1.03113,0,0,1.03113,-618.417,-1102.5)\">\n            <circle cx=\"624.962\" cy=\"1087.64\" r=\"2.909\" style=\"fill:rgb(37,169,234);\"/>\n        </g>\n    </g>\n</svg>\n",
        "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\routines\\counterbalance\\counterbalance.png",
        "tooltip": "Counterbalance Routine: use the Shelf to choose a value taking into account previous runs of this experiment.",
        "version": "0.0.0",
        "beta": true,
        "hidden": false,
        "params": {
            "name": {
                "val": "counterbalance",
                "valType": "code",
                "inputType": "name",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Name",
                "hint": "Name of this Routine (alphanumeric or _, no spaces)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "specMode": {
                "val": "uniform",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "uniform",
                    "file"
                ],
                "allowedLabels": [
                    "Num. groups",
                    "Conditions file (local only)"
                ],
                "ctrlParams": {},
                "label": "Groups from...",
                "hint": "Specify groups using an Excel file (for fine tuned control), specify as a variable name, or specify a number of groups to create equally likely groups with a uniform cap.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "conditionsFile": {
                "val": "",
                "valType": "file",
                "inputType": "table",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {
                    "template": "F:\\GitHub\\psychopy\\psychopy\\experiment\\routines\\counterbalance\\counterbalanceItems.xltx"
                },
                "label": "Conditions",
                "hint": "Name of a file specifying the parameters for each group (.csv, .xlsx, or .pkl). Browse to select a file. Right-click to preview file contents, or create a new file.",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "specMode",
                            "condition": "=='file'"
                        }
                    ],
                    "enabled": []
                }
            },
            "nGroups": {
                "val": 2,
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Num. groups",
                "hint": "Number of groups to use.",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "specMode",
                            "condition": "=='uniform'"
                        }
                    ],
                    "enabled": []
                }
            },
            "nSlots": {
                "val": 10,
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Slots per group",
                "hint": "Max number of participants in each group for each repeat.",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "specMode",
                            "condition": "=='uniform'"
                        }
                    ],
                    "enabled": []
                }
            },
            "nReps": {
                "val": 1,
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Num. repeats",
                "hint": "How many times to run slots down to depletion?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "endExperimentOnDepletion": {
                "val": "ignore",
                "valType": "code",
                "inputType": "bool",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "End experiment on depletion",
                "hint": "When all slots and repetitions are depleted, should the experiment end or continue with .finished on this Routine as True?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "saveData": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Save data",
                "hint": "Save chosen group and associated params this repeat to the data file?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "saveRemaining": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Save remaining cap",
                "hint": "Save the remaining cap for the chosen group this repeat to the data file?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "disabled": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Disable Routine",
                "hint": "Disable this Routine",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "conditionsVariable": {
                "val": "",
                "valType": "code",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Conditions",
                "hint": "Name of a variable specifying the parameters for each group. Should be a list of dicts, like the output of data.conditionsFromFile",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "specMode",
                            "condition": "=='variable'"
                        }
                    ],
                    "enabled": []
                }
            }
        }
    },
    "EyetrackerValidationRoutine": {
        "__class__": "psychopy.experiment.routines.eyetracker_validate:EyetrackerValidationRoutine",
        "__name__": "EyetrackerValidationRoutine",
        "categories": [
            "Eyetracking"
        ],
        "targets": [
            "PsychoPy"
        ],
        "plugin": null,
        "iconSVG": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 32 32\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:space=\"preserve\" xmlns:serif=\"http://www.serif.com/\" style=\"fill-rule:evenodd;clip-rule:evenodd;stroke-miterlimit:10;\">\n    <g id=\"EyetrackerValidationRoutine\" transform=\"matrix(0.451519,0,0,0.451519,0,0)\">\n        <rect x=\"0\" y=\"0\" width=\"70.872\" height=\"70.866\" style=\"fill:none;\"/>\n        <clipPath id=\"_clip1\">\n            <rect x=\"0\" y=\"0\" width=\"70.872\" height=\"70.866\"/>\n        </clipPath>\n        <g clip-path=\"url(#_clip1)\">\n            <g transform=\"matrix(0,0.997716,0.997716,0,35.4361,18.5967)\">\n                <path d=\"M16.875,-16.875C7.555,-16.875 0,-9.32 0,0C0,9.32 7.555,16.875 16.875,16.875C26.195,16.875 33.75,9.32 33.75,0C33.75,-9.32 26.195,-16.875 16.875,-16.875\" style=\"fill:rgb(2,169,234);fill-rule:nonzero;\"/>\n            </g>\n            <g transform=\"matrix(0,-0.997716,-0.997716,0,33.3437,8.27124)\">\n                <path d=\"M-26.768,-32.1C-39.941,-24.322 -48.465,-13.622 -48.465,-2.097C-48.465,9.428 -39.941,20.128 -26.768,27.906L-24.948,28.98L-23.235,27.741C-11.846,19.499 -5.983,9.1 -5.983,-2.097C-5.983,-13.294 -11.846,-23.693 -23.235,-31.935L-24.948,-33.174L-26.768,-32.1ZM-25.318,-25.422C-16.953,-18.817 -12.437,-10.816 -12.437,-2.097C-12.437,6.622 -16.952,14.623 -25.318,21.228C-35.241,14.938 -42.011,6.906 -42.011,-2.097C-42.011,-11.1 -35.241,-19.132 -25.318,-25.422ZM-21.749,-2.25C-21.412,-3.135 -21.227,-4.094 -21.227,-5.097C-21.227,-9.514 -24.807,-13.094 -29.224,-13.094C-33.641,-13.094 -37.221,-9.514 -37.221,-5.097C-37.221,-0.68 -33.641,2.9 -29.224,2.9C-28.876,2.9 -28.534,2.878 -28.198,2.835C-28.609,2.194 -28.847,1.432 -28.847,0.614C-28.847,-1.665 -26.999,-3.513 -24.72,-3.513C-23.553,-3.513 -22.499,-3.029 -21.749,-2.25Z\" style=\"fill:var(--outline);\"/>\n            </g>\n            <g>\n                <g transform=\"matrix(0,0.917057,0.917057,0,47.6174,39.6292)\">\n                    <circle cx=\"7.503\" cy=\"0\" r=\"7.503\" style=\"fill:none;stroke:rgb(242,84,91);stroke-width:2.42px;\"/>\n                </g>\n                <g transform=\"matrix(0,-0.917057,-0.917057,0,66.4427,46.5097)\">\n                    <path d=\"M-20.528,20.528L20.528,20.528\" style=\"fill:none;fill-rule:nonzero;stroke:rgb(242,84,91);stroke-width:4.83px;stroke-linecap:round;\"/>\n                </g>\n                <g transform=\"matrix(-0.917057,0,0,0.917057,28.7917,46.5099)\">\n                    <path d=\"M-41.056,0L0,0\" style=\"fill:none;fill-rule:nonzero;stroke:rgb(242,84,91);stroke-width:4.83px;stroke-linecap:round;\"/>\n                </g>\n                <g transform=\"matrix(0,0.917057,0.917057,0,47.6173,33.3611)\">\n                    <circle cx=\"14.338\" cy=\"0\" r=\"14.338\" style=\"fill:none;stroke:rgb(242,84,91);stroke-width:4.83px;\"/>\n                </g>\n            </g>\n        </g>\n    </g>\n</svg>\n",
        "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\routines\\eyetracker_validate\\eyetracker_valid.png",
        "tooltip": "Validation routine for eyetrackers",
        "version": "2021.2.0",
        "beta": true,
        "hidden": false,
        "params": {
            "name": {
                "val": "validation",
                "valType": "code",
                "inputType": "name",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Name",
                "hint": "Name of this Routine (alphanumeric or _, no spaces)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "targetLayout": {
                "val": "NINE_POINTS",
                "valType": "str",
                "inputType": "choice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "THREE_POINTS",
                    "FIVE_POINTS",
                    "NINE_POINTS",
                    "THIRTEEN_POINTS",
                    "SEVENTEEN_POINTS",
                    "CUSTOM..."
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Target layout",
                "hint": "How many targets do you want to be presented for calibration? Points will be displayed in a grid.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "targetPositions": {
                "val": "NINE_POINTS",
                "valType": "list",
                "inputType": "single",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Target positions",
                "hint": "List of positions (x, y) at which the target can appear",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "targetLayout",
                            "condition": "not in ['THREE_POINTS', 'FIVE_POINTS', 'NINE_POINTS', 'THIRTEEN_POINTS', 'SEVENTEEN_POINTS']"
                        }
                    ],
                    "enabled": []
                }
            },
            "randomisePos": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Randomise target positions",
                "hint": "Should the order of target positions be randomised?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "cursorFillColor": {
                "val": "green",
                "valType": "color",
                "inputType": "color",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Gaze cursor color",
                "hint": "Fill color of the gaze cursor",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "textColor": {
                "val": "auto",
                "valType": "color",
                "inputType": "color",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Text color",
                "hint": "Color of text used in validation procedure.",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "fillColor": {
                "val": "",
                "valType": "color",
                "inputType": "color",
                "categ": "Target",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Outer fill color",
                "hint": "Fill color of the outer part of the target",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "borderColor": {
                "val": "black",
                "valType": "color",
                "inputType": "color",
                "categ": "Target",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Outer border color",
                "hint": "Border color of the outer part of the target",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "innerFillColor": {
                "val": "green",
                "valType": "color",
                "inputType": "color",
                "categ": "Target",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Inner fill color",
                "hint": "Fill color of the inner part of the target",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "innerBorderColor": {
                "val": "black",
                "valType": "color",
                "inputType": "color",
                "categ": "Target",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Inner border color",
                "hint": "Border color of the inner part of the target",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "colorSpace": {
                "val": "rgb",
                "valType": "str",
                "inputType": "choice",
                "categ": "Target",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "rgb",
                    "dkl",
                    "lms",
                    "hsv"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Color space",
                "hint": "In what format (color space) have you specified the colors? (rgb, dkl, lms, hsv)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "borderWidth": {
                "val": 2,
                "valType": "num",
                "inputType": "single",
                "categ": "Target",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Outer border width",
                "hint": "Width of the line around the outer part of the target",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "innerBorderWidth": {
                "val": 2,
                "valType": "num",
                "inputType": "single",
                "categ": "Target",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Inner border width",
                "hint": "Width of the line around the inner part of the target",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "outerRadius": {
                "val": 0.01,
                "valType": "num",
                "inputType": "single",
                "categ": "Target",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Outer radius",
                "hint": "Size (radius) of the outer part of the target",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "innerRadius": {
                "val": 0.0035,
                "valType": "num",
                "inputType": "single",
                "categ": "Target",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Inner radius",
                "hint": "Size (radius) of the inner part of the target",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "progressMode": {
                "val": "time",
                "valType": "str",
                "inputType": "choice",
                "categ": "Animation",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "space key",
                    "time"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Progress mode",
                "hint": "Should the target move to the next position after a keypress or after an amount of time?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "targetDur": {
                "val": 1.5,
                "valType": "num",
                "inputType": "single",
                "categ": "Animation",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Target duration",
                "hint": "Time limit (s) after which progress to next position",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "progressMode",
                            "condition": "in ['time', 'either']"
                        }
                    ],
                    "enabled": []
                }
            },
            "expandDur": {
                "val": 1,
                "valType": "num",
                "inputType": "single",
                "categ": "Animation",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Expand / contract duration",
                "hint": "Duration of the target expand/contract animation",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "progressMode",
                            "condition": "in ['space key', 'either']"
                        }
                    ],
                    "enabled": []
                }
            },
            "expandScale": {
                "val": 1.5,
                "valType": "num",
                "inputType": "single",
                "categ": "Animation",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Expand scale",
                "hint": "How many times bigger than its size the target grows",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "movementAnimation": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Animation",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Animate position changes",
                "hint": "Enable / disable animations as target stim changes position",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "movementDur": {
                "val": 1.0,
                "valType": "num",
                "inputType": "single",
                "categ": "Animation",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Movement duration",
                "hint": "Duration of the animation during position changes.",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "movementAnimation",
                            "condition": "== True"
                        }
                    ],
                    "enabled": []
                }
            },
            "targetDelay": {
                "val": 1.0,
                "valType": "num",
                "inputType": "single",
                "categ": "Animation",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Target delay",
                "hint": "Duration of the delay between positions.",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "movementAnimation",
                            "condition": "== False"
                        }
                    ],
                    "enabled": []
                }
            },
            "saveAsImg": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Save as image",
                "hint": "Save results as an image",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "showResults": {
                "val": true,
                "valType": "bool",
                "inputType": "bool",
                "categ": "Data",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Show results screen",
                "hint": "Show a screen with results after completion?",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "disabled": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Disable Routine",
                "hint": "Disable this Routine",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "units": {
                "val": "from exp settings",
                "valType": "str",
                "inputType": "choice",
                "categ": "Target",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "from exp settings"
                ],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Spatial units",
                "hint": "Units of dimensions for this stimulus",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            }
        }
    },
    "PavloviaSurveyRoutine": {
        "__class__": "psychopy.experiment.routines.pavlovia_survey:PavloviaSurveyRoutine",
        "__name__": "PavloviaSurveyRoutine",
        "categories": [
            "Responses"
        ],
        "targets": [
            "PsychoJS"
        ],
        "plugin": null,
        "iconSVG": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 32 32\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:space=\"preserve\" xmlns:serif=\"http://www.serif.com/\" style=\"fill-rule:evenodd;clip-rule:evenodd;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:1;\">\n    <g id=\"light-components-PavloviaSurveyRoutine\" serif:id=\"light/components/PavloviaSurveyRoutine\" transform=\"matrix(0.451519,0,0,0.451519,0,0)\">\n        <rect x=\"0\" y=\"0\" width=\"70.872\" height=\"70.866\" style=\"fill:none;\"/>\n        <clipPath id=\"_clip1\">\n            <rect x=\"0\" y=\"0\" width=\"70.872\" height=\"70.866\"/>\n        </clipPath>\n        <g clip-path=\"url(#_clip1)\">\n            <g id=\"Web-Form-Component\" serif:id=\"Web Form Component\">\n            </g>\n            <g id=\"Mask\" transform=\"matrix(1.07125,0,0,1.07125,-514.921,-426.523)\">\n                <path d=\"M546.829,398.153L480.671,398.153L480.671,464.311L546.829,464.311C546.829,464.311 546.829,413.581 546.829,410.558L537.484,424.871C535.048,428.692 530.741,431.233 525.839,431.233C518.248,431.233 512.085,425.14 512.085,417.636C512.085,416.092 512.346,414.609 512.826,413.225L512.826,413.225C514.478,408.467 518.727,404.898 523.896,404.174C523.592,404.027 547.189,398.153 546.829,398.153Z\" style=\"fill:none;\"/>\n                <clipPath id=\"_clip2\">\n                    <path d=\"M546.829,398.153L480.671,398.153L480.671,464.311L546.829,464.311C546.829,464.311 546.829,413.581 546.829,410.558L537.484,424.871C535.048,428.692 530.741,431.233 525.839,431.233C518.248,431.233 512.085,425.14 512.085,417.636C512.085,416.092 512.346,414.609 512.826,413.225L512.826,413.225C514.478,408.467 518.727,404.898 523.896,404.174C523.592,404.027 547.189,398.153 546.829,398.153Z\"/>\n                </clipPath>\n                <g clip-path=\"url(#_clip2)\">\n                    <g transform=\"matrix(0.996942,0,0,0.987562,1.84428,5.96345)\">\n                        <path d=\"M534.274,413.928C534.274,410.405 531.444,407.548 527.954,407.548C520.275,407.548 507.397,407.548 499.719,407.548C496.228,407.548 493.399,410.405 493.399,413.928C493.399,423.576 493.399,441.771 493.399,451.418C493.399,454.942 496.228,457.798 499.719,457.798C507.397,457.798 520.275,457.798 527.954,457.798C531.444,457.798 534.274,454.942 534.274,451.418C534.274,441.771 534.274,423.576 534.274,413.928Z\" style=\"fill:none;stroke:var(--outline);stroke-width:4.17px;\"/>\n                    </g>\n                    <g id=\"Lines\" transform=\"matrix(1,0,0,1,478.736,397.902)\">\n                        <g transform=\"matrix(1,0,0,1,-400.109,-377.546)\">\n                            <g transform=\"matrix(1,0,0,1,435.41,431.245)\">\n                                <path d=\"M-10.307,-5.664C-11.871,-5.664 -13.139,-4.396 -13.139,-2.832C-13.139,-1.268 -11.871,0 -10.307,0C-8.743,0 -7.475,-1.268 -7.475,-2.832C-7.475,-4.396 -8.743,-5.664 -10.307,-5.664Z\" style=\"fill:var(--outline);fill-opacity:0.5;fill-rule:nonzero;\"/>\n                            </g>\n                            <g transform=\"matrix(1,0,0,1,447.318,431.245)\">\n                                <path d=\"M0,-5.664L-14.845,-5.664C-16.409,-5.664 -17.677,-4.396 -17.677,-2.832C-17.677,-1.268 -16.409,0 -14.845,0L0,0C1.564,0 2.832,-1.268 2.832,-2.832C2.832,-4.396 1.564,-5.664 0,-5.664\" style=\"fill:var(--outline);fill-rule:nonzero;\"/>\n                            </g>\n                        </g>\n                        <g transform=\"matrix(1,0,0,1,-400.109,-387.17)\">\n                            <g transform=\"matrix(1,0,0,1,447.318,431.245)\">\n                                <path d=\"M0,-5.664L-14.845,-5.664C-16.409,-5.664 -17.677,-4.396 -17.677,-2.832C-17.677,-1.268 -16.409,0 -14.845,0L0,0C1.564,0 2.832,-1.268 2.832,-2.832C2.832,-4.396 1.564,-5.664 0,-5.664\" style=\"fill:var(--outline);fill-rule:nonzero;\"/>\n                            </g>\n                            <g transform=\"matrix(-3.52039e-17,0.574923,0.574923,3.52039e-17,175.346,184.699)\">\n                                <path d=\"M421.056,438.36L426.761,432.655L424.108,430.002\" style=\"fill:none;stroke:rgb(37,169,234);stroke-width:5.39px;\"/>\n                            </g>\n                        </g>\n                        <g transform=\"matrix(1,0,0,1,-400.109,-396.794)\">\n                            <g transform=\"matrix(1,0,0,1,435.41,431.245)\">\n                                <path d=\"M-10.307,-5.664C-11.871,-5.664 -13.139,-4.396 -13.139,-2.832C-13.139,-1.268 -11.871,0 -10.307,0C-8.743,0 -7.475,-1.268 -7.475,-2.832C-7.475,-4.396 -8.743,-5.664 -10.307,-5.664Z\" style=\"fill:var(--outline);fill-opacity:0.5;fill-rule:nonzero;\"/>\n                            </g>\n                            <g transform=\"matrix(1,0,0,1,447.318,431.245)\">\n                                <path d=\"M0,-5.664L-14.845,-5.664C-16.409,-5.664 -17.677,-4.396 -17.677,-2.832C-17.677,-1.268 -16.409,0 -14.845,0L0,0C1.564,0 2.832,-1.268 2.832,-2.832C2.832,-4.396 1.564,-5.664 0,-5.664\" style=\"fill:var(--outline);fill-rule:nonzero;\"/>\n                            </g>\n                        </g>\n                        <g transform=\"matrix(1,0,0,1,47.7639,24.827)\">\n                            <path d=\"M0,-5.664L-22.77,-5.664C-24.334,-5.664 -25.602,-4.396 -25.602,-2.832C-25.602,-1.268 -24.334,0 -22.77,0L0,0C1.564,0 2.832,-1.268 2.832,-2.832C2.832,-4.396 1.564,-5.664 0,-5.664\" style=\"fill:var(--outline);fill-rule:nonzero;\"/>\n                        </g>\n                    </g>\n                    <path d=\"M509.372,403.945L505.452,403.945C504.171,403.945 503.132,404.985 503.132,406.265L503.132,410.905C503.132,412.185 504.171,413.225 505.452,413.225L522.892,413.225C524.172,413.225 525.212,412.185 525.212,410.905L525.212,406.265C525.212,404.985 524.172,403.945 522.892,403.945L518.971,403.945C518.949,401.315 516.807,399.187 514.172,399.187C511.536,399.187 509.394,401.315 509.372,403.945ZM514.172,402.405C515.022,402.405 515.712,403.095 515.712,403.945C515.712,404.795 515.022,405.485 514.172,405.485C513.322,405.485 512.632,404.795 512.632,403.945C512.632,403.095 513.322,402.405 514.172,402.405Z\" style=\"fill:var(--outline);\"/>\n                </g>\n            </g>\n            <g id=\"globe\" transform=\"matrix(0.476121,0,0,0.470691,31.5141,4.04767)\">\n                <g transform=\"matrix(0,1,1,0,35.4361,4.7948)\">\n                    <ellipse cx=\"30.947\" cy=\"0\" rx=\"30.946\" ry=\"30.947\" style=\"fill:none;stroke:rgb(37,169,234);stroke-width:8.74px;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:10;\"/>\n                </g>\n                <g transform=\"matrix(-1.86478e-17,1,0.695459,-1.86478e-17,35.4222,19.0754)\">\n                    <ellipse cx=\"16.667\" cy=\"0\" rx=\"30.946\" ry=\"16.667\" style=\"fill:none;stroke:rgb(37,169,234);stroke-width:10.17px;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:10;\"/>\n                </g>\n                <g transform=\"matrix(1,0,0,0.695459,35.4077,24.151)\">\n                    <path d=\"M0,33.333C-17.091,33.333 -30.946,25.871 -30.946,16.666C-30.946,7.462 -17.091,0 0,0C17.091,0 30.946,7.462 30.946,16.666C30.946,25.871 17.091,33.333 0,33.333Z\" style=\"fill:none;fill-rule:nonzero;stroke:rgb(37,169,234);stroke-width:10.13px;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:10;\"/>\n                </g>\n            </g>\n        </g>\n    </g>\n</svg>\n",
        "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\routines\\pavlovia_survey\\survey.png",
        "tooltip": "Run a SurveyJS survey in Pavlovia",
        "version": "2023.1.0",
        "beta": false,
        "hidden": false,
        "params": {
            "name": {
                "val": "survey",
                "valType": "code",
                "inputType": "name",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Name",
                "hint": "Name of this Routine (alphanumeric or _, no spaces)",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "surveyType": {
                "val": "id",
                "valType": "code",
                "inputType": "richChoice",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [
                    "id",
                    "json"
                ],
                "allowedLabels": [
                    {
                        "label": "Survey id",
                        "body": "Linking to a survey ID from Pavlovia Surveys means that the content will automatically update if that survey changes (better for dynamic use)",
                        "linkText": "How do I get my survey ID?",
                        "link": "https://psychopy.org/builder/components/advanced_survey.html#get-id",
                        "startShown": "always"
                    },
                    {
                        "label": "Survey Model File",
                        "body": "Inserting a JSON file (exported from Pavlovia Surveys) means that the survey is embedded within this project and will not change unless you import it again (better for archiving)",
                        "linkText": "How do I get my survey model file?",
                        "link": "https://psychopy.org/builder/components/advanced_survey.html#get-json",
                        "startShown": "always"
                    }
                ],
                "ctrlParams": {},
                "label": "Survey type",
                "hint": "",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            },
            "surveyId": {
                "val": "",
                "valType": "str",
                "inputType": "survey",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Survey id",
                "hint": "The ID for your survey on Pavlovia. Tip: Right click to open the survey in your browser!",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "surveyType",
                            "condition": "=='id'"
                        }
                    ],
                    "enabled": []
                }
            },
            "surveyJson": {
                "val": "",
                "valType": "str",
                "inputType": "file",
                "categ": "Basic",
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Survey JSON",
                "hint": "File path of the JSON file used to construct the survey",
                "plugin": null,
                "depends": {
                    "shown": [
                        {
                            "param": "surveyType",
                            "condition": "=='json'"
                        }
                    ],
                    "enabled": []
                }
            },
            "disabled": {
                "val": false,
                "valType": "bool",
                "inputType": "bool",
                "categ": null,
                "updates": null,
                "allowedUpdates": null,
                "allowedVals": [],
                "allowedLabels": [],
                "ctrlParams": {},
                "label": "Disable Routine",
                "hint": "Disable this Routine",
                "plugin": null,
                "depends": {
                    "shown": [],
                    "enabled": []
                }
            }
        }
    }
}