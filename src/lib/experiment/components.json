{
 "ApertureComponent": {
  "__class__": "psychopy.experiment.components.aperture:ApertureComponent",
  "__name__": "ApertureComponent",
  "categories": [
   "Stimuli"
  ],
  "targets": [
   "PsychoPy"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\aperture\\aperture.png",
  "tooltip": "Aperture: restrict the drawing of stimuli to a given region",
  "version": "0.0.0",
  "beta": false,
  "validatorClasses": [
   "VisualValidatorRoutine"
  ],
  "hidden": false,
  "params": {
   "name": {
    "val": "aperture",
    "valType": "code",
    "inputType": "name",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Name",
    "hint": "Name of this Component (alphanumeric or _, no spaces)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startVal": {
    "val": 0.0,
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Start",
    "hint": "When does the Component start?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startEstim": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Expected start (s)",
    "hint": "(Optional) expected start (s), purely for representing in the timeline",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startType": {
    "val": "time (s)",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "time (s)",
     "frame N",
     "condition"
    ],
    "allowedLabels": [],
    "label": "Start type",
    "hint": "How do you want to define your start point?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "stopVal": {
    "val": 1.0,
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": [],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Stop",
    "hint": "When does the Component end? (blank is endless)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "durationEstim": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Expected duration (s)",
    "hint": "(Optional) expected duration (s), purely for representing in the timeline",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "stopType": {
    "val": "duration (s)",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "duration (s)",
     "duration (frames)",
     "time (s)",
     "frame N",
     "condition"
    ],
    "allowedLabels": [],
    "label": "Stop type",
    "hint": "How do you want to define your end point?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "size": {
    "val": 1,
    "valType": "list",
    "inputType": "single",
    "categ": "Layout",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Size",
    "hint": "How big is the aperture? (a single number for diameter)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "pos": {
    "val": [
     0,
     0
    ],
    "valType": "list",
    "inputType": "single",
    "categ": "Layout",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Position [x,y]",
    "hint": "Where is the aperture centred?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "units": {
    "val": "norm",
    "valType": "str",
    "inputType": "choice",
    "categ": "Layout",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "from exp settings",
     "deg",
     "cm",
     "pix",
     "norm",
     "height",
     "degFlatPos",
     "degFlat"
    ],
    "allowedLabels": [],
    "label": "Spatial units",
    "hint": "Units of dimensions for this stimulus",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "anchor": {
    "val": "center",
    "valType": "str",
    "inputType": "choice",
    "categ": "Layout",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [
     "center",
     "top-center",
     "bottom-center",
     "center-left",
     "center-right",
     "top-left",
     "top-right",
     "bottom-left",
     "bottom-right"
    ],
    "allowedLabels": [],
    "label": "Anchor",
    "hint": "Which point on the aperture should be anchored to its exact position?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "ori": {
    "val": 0,
    "valType": "num",
    "inputType": "spin",
    "categ": "Layout",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [
     -360,
     360
    ],
    "allowedLabels": [],
    "label": "Orientation",
    "hint": "Orientation of this stimulus (in deg)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "shape": {
    "val": "triangle",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "line",
     "triangle",
     "rectangle",
     "circle",
     "cross",
     "star7",
     "arrow",
     "regular polygon...",
     "custom polygon..."
    ],
    "allowedLabels": [
     "Line",
     "Triangle",
     "Rectangle",
     "Circle",
     "Cross",
     "Star",
     "Arrow",
     "Regular polygon...",
     "Custom polygon..."
    ],
    "label": "Shape",
    "hint": "What shape is this? With 'regular polygon...' you can set number of vertices and with 'custom polygon...' you can set vertices",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "nVertices": {
    "val": 4,
    "valType": "int",
    "inputType": "single",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Num. vertices",
    "hint": "How many vertices in your regular polygon?",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "shape",
       "condition": "=='regular polygon...'"
      }
     ],
     "enabled": []
    }
   },
   "saveStartStop": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Save onset/offset times",
    "hint": "Store the onset/offset times in the data file (as well as in the log file).",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "syncScreenRefresh": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Sync timing with screen refresh",
    "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "disabled": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Disable Component",
    "hint": "Disable this Component",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "validator": {
    "val": "",
    "valType": "code",
    "inputType": "choice",
    "categ": "Testing",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": "python:///psychopy.experiment.components._base:BaseComponent.getAllValidatorRoutineVals",
    "allowedLabels": "python:///psychopy.experiment.components._base:BaseComponent.getAllValidatorRoutineLabels",
    "label": "Validate with...",
    "hint": "Name of validator Component/Routine to use to check the timing of this stimulus.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "vertices": {
    "val": "",
    "valType": "list",
    "inputType": "single",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Vertices",
    "hint": "What are the vertices of your polygon? Should be an nx2 array or a list of [x, y] lists",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "shape",
       "condition": "=='custom polygon...'"
      }
     ],
     "enabled": []
    }
   },
   "draggable": {
    "val": false,
    "valType": "code",
    "inputType": "bool",
    "categ": "Layout",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Draggable?",
    "hint": "Should this stimulus be moveble by clicking and dragging?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   }
  }
 },
 "PolygonComponent": {
  "__class__": "psychopy.experiment.components.polygon:PolygonComponent",
  "__name__": "PolygonComponent",
  "categories": [
   "Stimuli"
  ],
  "targets": [
   "PsychoPy",
   "PsychoJS"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\polygon\\polygon.png",
  "tooltip": "Polygon: any regular polygon (line, triangle, square...circle)",
  "version": "0.0.0",
  "beta": false,
  "validatorClasses": [
   "VisualValidatorRoutine"
  ],
  "hidden": false,
  "params": {
   "name": {
    "val": "polygon",
    "valType": "code",
    "inputType": "name",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Name",
    "hint": "Name of this Component (alphanumeric or _, no spaces)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startVal": {
    "val": 0.0,
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Start",
    "hint": "When does the Component start?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startEstim": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Expected start (s)",
    "hint": "(Optional) expected start (s), purely for representing in the timeline",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startType": {
    "val": "time (s)",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "time (s)",
     "frame N",
     "condition"
    ],
    "allowedLabels": [],
    "label": "Start type",
    "hint": "How do you want to define your start point?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "stopVal": {
    "val": 1.0,
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": [],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Stop",
    "hint": "When does the Component end? (blank is endless)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "durationEstim": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Expected duration (s)",
    "hint": "(Optional) expected duration (s), purely for representing in the timeline",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "stopType": {
    "val": "duration (s)",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "duration (s)",
     "duration (frames)",
     "time (s)",
     "frame N",
     "condition"
    ],
    "allowedLabels": [],
    "label": "Stop type",
    "hint": "How do you want to define your end point?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "fillColor": {
    "val": "white",
    "valType": "color",
    "inputType": "color",
    "categ": "Appearance",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Fill color",
    "hint": "Fill color of this stimulus (e.g. $[1,1,0], red )",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "lineColor": {
    "val": "white",
    "valType": "color",
    "inputType": "color",
    "categ": "Appearance",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Border color",
    "hint": "Border color of this stimulus (e.g. $[1,1,0], red )",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "colorSpace": {
    "val": "rgb",
    "valType": "str",
    "inputType": "choice",
    "categ": "Appearance",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [
     "rgb",
     "dkl",
     "lms",
     "hsv"
    ],
    "allowedLabels": [],
    "label": "Color space",
    "hint": "In what format (color space) have you specified the colors? (rgb, dkl, lms, hsv)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "opacity": {
    "val": "",
    "valType": "num",
    "inputType": "single",
    "categ": "Appearance",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Opacity",
    "hint": "Opacity of the stimulus (1=opaque, 0=fully transparent, 0.5=translucent). Leave blank for each color to have its own opacity (recommended if any color is None).",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "size": {
    "val": [
     0.5,
     0.5
    ],
    "valType": "list",
    "inputType": "single",
    "categ": "Layout",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Size [w,h]",
    "hint": "Size of this stimulus [w,h]. Note that for a line only the first value is used, for triangle and rect the [w,h] is as expected,\n but for higher-order polygons it represents the [w,h] of the ellipse that the polygon sits on!! ",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "pos": {
    "val": [
     0,
     0
    ],
    "valType": "list",
    "inputType": "single",
    "categ": "Layout",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Position [x,y]",
    "hint": "Position of this stimulus (e.g. [1,2] )",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "units": {
    "val": "from exp settings",
    "valType": "str",
    "inputType": "choice",
    "categ": "Layout",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "from exp settings",
     "deg",
     "cm",
     "pix",
     "norm",
     "height",
     "degFlatPos",
     "degFlat"
    ],
    "allowedLabels": [],
    "label": "Spatial units",
    "hint": "Units of dimensions for this stimulus",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "anchor": {
    "val": "center",
    "valType": "str",
    "inputType": "choice",
    "categ": "Layout",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [
     "center",
     "top-center",
     "bottom-center",
     "center-left",
     "center-right",
     "top-left",
     "top-right",
     "bottom-left",
     "bottom-right"
    ],
    "allowedLabels": [],
    "label": "Anchor",
    "hint": "Which point on the stimulus should be anchored to its exact position?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "ori": {
    "val": 0,
    "valType": "num",
    "inputType": "spin",
    "categ": "Layout",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [
     -360,
     360
    ],
    "allowedLabels": [],
    "label": "Orientation",
    "hint": "Orientation of this stimulus (in deg)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "shape": {
    "val": "triangle",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "line",
     "triangle",
     "rectangle",
     "circle",
     "cross",
     "star7",
     "arrow",
     "regular polygon...",
     "custom polygon..."
    ],
    "allowedLabels": [
     "Line",
     "Triangle",
     "Rectangle",
     "Circle",
     "Cross",
     "Star",
     "Arrow",
     "Regular polygon...",
     "Custom polygon..."
    ],
    "label": "Shape",
    "hint": "What shape is this? With 'regular polygon...' you can set number of vertices and with 'custom polygon...' you can set vertices",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "nVertices": {
    "val": 4,
    "valType": "int",
    "inputType": "single",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Num. vertices",
    "hint": "How many vertices in your regular polygon?",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "shape",
       "condition": "=='regular polygon...'"
      }
     ],
     "enabled": []
    }
   },
   "saveStartStop": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Save onset/offset times",
    "hint": "Store the onset/offset times in the data file (as well as in the log file).",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "syncScreenRefresh": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Sync timing with screen refresh",
    "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "disabled": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Disable Component",
    "hint": "Disable this Component",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "contrast": {
    "val": 1,
    "valType": "num",
    "inputType": "single",
    "categ": "Appearance",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Contrast",
    "hint": "Contrast of the stimulus (1.0=unchanged contrast, 0.5=decrease contrast, 0.0=uniform/no contrast, -0.5=slightly inverted, -1.0=totally inverted)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "validator": {
    "val": "",
    "valType": "code",
    "inputType": "choice",
    "categ": "Testing",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": "python:///psychopy.experiment.components._base:BaseComponent.getAllValidatorRoutineVals",
    "allowedLabels": "python:///psychopy.experiment.components._base:BaseComponent.getAllValidatorRoutineLabels",
    "label": "Validate with...",
    "hint": "Name of validator Component/Routine to use to check the timing of this stimulus.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "vertices": {
    "val": "",
    "valType": "list",
    "inputType": "single",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Vertices",
    "hint": "What are the vertices of your polygon? Should be an nx2 array or a list of [x, y] lists",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "shape",
       "condition": "=='custom polygon...'"
      }
     ],
     "enabled": []
    }
   },
   "draggable": {
    "val": false,
    "valType": "code",
    "inputType": "bool",
    "categ": "Layout",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Draggable?",
    "hint": "Should this stimulus be moveble by clicking and dragging?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "lineWidth": {
    "val": 1,
    "valType": "num",
    "inputType": "single",
    "categ": "Appearance",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Line width",
    "hint": "Width of the shape's line (always in pixels - this does NOT use 'units')",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "interpolate": {
    "val": "linear",
    "valType": "str",
    "inputType": "choice",
    "categ": "Texture",
    "updates": "constant",
    "allowedUpdates": [],
    "allowedVals": [
     "linear",
     "nearest"
    ],
    "allowedLabels": [],
    "label": "Interpolate",
    "hint": "How should the image be interpolated if/when rescaled",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   }
  }
 },
 "BrushComponent": {
  "__class__": "psychopy.experiment.components.brush:BrushComponent",
  "__name__": "BrushComponent",
  "categories": [
   "Responses"
  ],
  "targets": [
   "PsychoPy",
   "PsychoJS"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\brush\\brush.png",
  "tooltip": "Brush: a drawing tool",
  "version": "0.0.0",
  "beta": false,
  "validatorClasses": [
   "VisualValidatorRoutine"
  ],
  "hidden": false,
  "params": {
   "name": {
    "val": "brush",
    "valType": "code",
    "inputType": "name",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Name",
    "hint": "Name of this Component (alphanumeric or _, no spaces)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startVal": {
    "val": 0.0,
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Start",
    "hint": "When does the Component start?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startEstim": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Expected start (s)",
    "hint": "(Optional) expected start (s), purely for representing in the timeline",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startType": {
    "val": "time (s)",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "time (s)",
     "frame N",
     "condition"
    ],
    "allowedLabels": [],
    "label": "Start type",
    "hint": "How do you want to define your start point?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "stopVal": {
    "val": 1.0,
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": [],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Stop",
    "hint": "When does the Component end? (blank is endless)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "durationEstim": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Expected duration (s)",
    "hint": "(Optional) expected duration (s), purely for representing in the timeline",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "stopType": {
    "val": "duration (s)",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "duration (s)",
     "duration (frames)",
     "time (s)",
     "frame N",
     "condition"
    ],
    "allowedLabels": [],
    "label": "Stop type",
    "hint": "How do you want to define your end point?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "lineWidth": {
    "val": 1.5,
    "valType": "num",
    "inputType": "spin",
    "categ": "Appearance",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Brush size",
    "hint": "Width of the brush's line (always in pixels and limited to 10px max width)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "lineColor": {
    "val": "$[1,1,1]",
    "valType": "color",
    "inputType": "color",
    "categ": "Appearance",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Brush color",
    "hint": "Fill color of this brush",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "lineColorSpace": {
    "val": "rgb",
    "valType": "str",
    "inputType": "choice",
    "categ": "Appearance",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [
     "rgb",
     "dkl",
     "lms",
     "hsv"
    ],
    "allowedLabels": [],
    "label": "Color space",
    "hint": "In what format (color space) have you specified the colors? (rgb, dkl, lms, hsv)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "opacity": {
    "val": "",
    "valType": "num",
    "inputType": "single",
    "categ": "Appearance",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Opacity",
    "hint": "The line opacity",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "saveStartStop": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Save onset/offset times",
    "hint": "Store the onset/offset times in the data file (as well as in the log file).",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "syncScreenRefresh": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Sync timing with screen refresh",
    "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "disabled": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Disable Component",
    "hint": "Disable this Component",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "contrast": {
    "val": 1,
    "valType": "num",
    "inputType": "single",
    "categ": "Appearance",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Contrast",
    "hint": "Contrast of the stimulus (1.0=unchanged contrast, 0.5=decrease contrast, 0.0=uniform/no contrast, -0.5=slightly inverted, -1.0=totally inverted)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "validator": {
    "val": "",
    "valType": "code",
    "inputType": "choice",
    "categ": "Testing",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": "python:///psychopy.experiment.components._base:BaseComponent.getAllValidatorRoutineVals",
    "allowedLabels": "python:///psychopy.experiment.components._base:BaseComponent.getAllValidatorRoutineLabels",
    "label": "Validate with...",
    "hint": "Name of validator Component/Routine to use to check the timing of this stimulus.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "buttonRequired": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Press button",
    "hint": "Should the participant have to press a button to paint (True), or should it be always on (False)?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   }
  }
 },
 "ButtonComponent": {
  "__class__": "psychopy.experiment.components.button:ButtonComponent",
  "__name__": "ButtonComponent",
  "categories": [
   "Responses"
  ],
  "targets": [
   "PsychoPy",
   "PsychoJS"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\button\\button.png",
  "tooltip": "Button: A clickable textbox",
  "version": "2021.1.0",
  "beta": true,
  "validatorClasses": [
   "VisualValidatorRoutine"
  ],
  "hidden": false,
  "params": {
   "name": {
    "val": "button",
    "valType": "code",
    "inputType": "name",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Name",
    "hint": "Name of this Component (alphanumeric or _, no spaces)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startVal": {
    "val": 0,
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Start",
    "hint": "When does the Component start?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startEstim": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Expected start (s)",
    "hint": "(Optional) expected start (s), purely for representing in the timeline",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startType": {
    "val": "time (s)",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "time (s)",
     "frame N",
     "condition"
    ],
    "allowedLabels": [],
    "label": "Start type",
    "hint": "How do you want to define your start point?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "stopVal": {
    "val": 1.0,
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": [],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Stop",
    "hint": "When does the Component end? (blank is endless)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "durationEstim": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Expected duration (s)",
    "hint": "(Optional) expected duration (s), purely for representing in the timeline",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "stopType": {
    "val": "duration (s)",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "duration (s)",
     "duration (frames)",
     "time (s)",
     "frame N",
     "condition"
    ],
    "allowedLabels": [],
    "label": "Stop type",
    "hint": "How do you want to define your end point?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "color": {
    "val": "white",
    "valType": "color",
    "inputType": "color",
    "categ": "Appearance",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Text color",
    "hint": "Foreground color of this stimulus (e.g. $[1,1,0], red )",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "fillColor": {
    "val": "darkgrey",
    "valType": "color",
    "inputType": "color",
    "categ": "Appearance",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Fill color",
    "hint": "Fill color of this stimulus (e.g. $[1,1,0], red )",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "borderColor": {
    "val": "None",
    "valType": "color",
    "inputType": "color",
    "categ": "Appearance",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Border color",
    "hint": "Border color of this stimulus (e.g. $[1,1,0], red )",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "colorSpace": {
    "val": "rgb",
    "valType": "str",
    "inputType": "choice",
    "categ": "Appearance",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [
     "rgb",
     "dkl",
     "lms",
     "hsv"
    ],
    "allowedLabels": [],
    "label": "Color space",
    "hint": "In what format (color space) have you specified the colors? (rgb, dkl, lms, hsv)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "opacity": {
    "val": "",
    "valType": "num",
    "inputType": "single",
    "categ": "Appearance",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Opacity",
    "hint": "Opacity of the stimulus (1=opaque, 0=fully transparent, 0.5=translucent). Leave blank for each color to have its own opacity (recommended if any color is None).",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "size": {
    "val": [
     0.5,
     0.5
    ],
    "valType": "list",
    "inputType": "single",
    "categ": "Layout",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Size [w,h]",
    "hint": "Size of this stimulus (either a single value or x,y pair, e.g. 2.5, [1,2] ",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "pos": {
    "val": [
     0,
     0
    ],
    "valType": "list",
    "inputType": "single",
    "categ": "Layout",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Position [x,y]",
    "hint": "Position of this stimulus (e.g. [1,2] )",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "units": {
    "val": "from exp settings",
    "valType": "str",
    "inputType": "choice",
    "categ": "Layout",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "from exp settings",
     "deg",
     "cm",
     "pix",
     "norm",
     "height",
     "degFlatPos",
     "degFlat"
    ],
    "allowedLabels": [],
    "label": "Spatial units",
    "hint": "Units of dimensions for this stimulus",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "anchor": {
    "val": "center",
    "valType": "str",
    "inputType": "choice",
    "categ": "Layout",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [
     "center",
     "top-center",
     "bottom-center",
     "center-left",
     "center-right",
     "top-left",
     "top-right",
     "bottom-left",
     "bottom-right"
    ],
    "allowedLabels": [],
    "label": "Anchor",
    "hint": "Should text anchor to the top, center or bottom of the box?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "ori": {
    "val": 0,
    "valType": "num",
    "inputType": "spin",
    "categ": "Layout",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [
     -360,
     360
    ],
    "allowedLabels": [],
    "label": "Orientation",
    "hint": "Orientation of this stimulus (in deg)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "forceEndRoutine": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Force end of Routine",
    "hint": "Should a response force the end of the Routine (e.g end the trial)?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "text": {
    "val": "Click here",
    "valType": "str",
    "inputType": "single",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Button text",
    "hint": "The text to be displayed",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "callback": {
    "val": "",
    "valType": "extendedCode",
    "inputType": "multi",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Callback function",
    "hint": "Code to run when button is clicked",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "oncePerClick": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Run once per click",
    "hint": "Should the callback run once per click (True), or each frame until click is released (False)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "borderWidth": {
    "val": 0,
    "valType": "num",
    "inputType": "single",
    "categ": "Appearance",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Border width",
    "hint": "Textbox border width",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "font": {
    "val": "Arvo",
    "valType": "str",
    "inputType": "font",
    "categ": "Formatting",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Font",
    "hint": "The font name (e.g. Comic Sans)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "letterHeight": {
    "val": 0.05,
    "valType": "num",
    "inputType": "single",
    "categ": "Formatting",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Letter height",
    "hint": "Specifies the height of the letter (the width is then determined by the font)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "bold": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Formatting",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Bold",
    "hint": "Should text be bold?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "italic": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Formatting",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Italic",
    "hint": "Should text be italic?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "saveStartStop": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Save onset/offset times",
    "hint": "Store the onset/offset times in the data file (as well as in the log file).",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "syncScreenRefresh": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Sync timing with screen refresh",
    "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "disabled": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Disable Component",
    "hint": "Disable this Component",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "contrast": {
    "val": 1,
    "valType": "num",
    "inputType": "single",
    "categ": "Appearance",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Contrast",
    "hint": "Contrast of the stimulus (1.0=unchanged contrast, 0.5=decrease contrast, 0.0=uniform/no contrast, -0.5=slightly inverted, -1.0=totally inverted)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "validator": {
    "val": "",
    "valType": "code",
    "inputType": "choice",
    "categ": "Testing",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": "python:///psychopy.experiment.components._base:BaseComponent.getAllValidatorRoutineVals",
    "allowedLabels": "python:///psychopy.experiment.components._base:BaseComponent.getAllValidatorRoutineLabels",
    "label": "Validate with...",
    "hint": "Name of validator Component/Routine to use to check the timing of this stimulus.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "padding": {
    "val": "",
    "valType": "num",
    "inputType": "single",
    "categ": "Layout",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Padding",
    "hint": "Defines the space between text and the textbox border",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "save": {
    "val": "every click",
    "valType": "str",
    "inputType": "choice",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "first click",
     "last click",
     "every click",
     "none"
    ],
    "allowedLabels": [],
    "label": "Record clicks",
    "hint": "What clicks on this button should be saved to the data output?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "timeRelativeTo": {
    "val": "button onset",
    "valType": "str",
    "inputType": "choice",
    "categ": "Data",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [
     "button onset",
     "experiment",
     "routine"
    ],
    "allowedLabels": [],
    "label": "Time relative to",
    "hint": "What should the values of mouse.time should be relative to?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   }
  }
 },
 "ButtonBoxComponent": {
  "__class__": "psychopy.experiment.components.buttonBox:ButtonBoxComponent",
  "__name__": "ButtonBoxComponent",
  "categories": [
   "Responses"
  ],
  "targets": [
   "PsychoPy"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\buttonBox\\buttonBox.png",
  "tooltip": "Button Box: Get input from a button box",
  "version": "0.0.0",
  "beta": true,
  "validatorClasses": [],
  "hidden": false,
  "params": {
   "name": {
    "val": "buttonBox",
    "valType": "code",
    "inputType": "name",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Name",
    "hint": "Name of this Component (alphanumeric or _, no spaces)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startVal": {
    "val": 0.0,
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Start",
    "hint": "When does the Component start?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startEstim": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Expected start (s)",
    "hint": "(Optional) expected start (s), purely for representing in the timeline",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startType": {
    "val": "time (s)",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "time (s)",
     "frame N",
     "condition"
    ],
    "allowedLabels": [],
    "label": "Start type",
    "hint": "How do you want to define your start point?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "stopVal": {
    "val": 1.0,
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": [],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Stop",
    "hint": "When does the Component end? (blank is endless)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "durationEstim": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Expected duration (s)",
    "hint": "(Optional) expected duration (s), purely for representing in the timeline",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "stopType": {
    "val": "duration (s)",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "duration (s)",
     "duration (frames)",
     "time (s)",
     "frame N",
     "condition"
    ],
    "allowedLabels": [],
    "label": "Stop type",
    "hint": "How do you want to define your end point?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "deviceLabel": {
    "val": "",
    "valType": "device",
    "inputType": "device",
    "categ": "Device",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": "python:///psychopy.experiment.devices:DeviceMixin.addDeviceParams.<locals>.getValues",
    "allowedLabels": "python:///psychopy.experiment.devices:DeviceMixin.addDeviceParams.<locals>.getLabels",
    "label": "Device",
    "hint": "The named device from Device Manager to use for this Component.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "forceEndRoutine": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Force end of Routine",
    "hint": "Should a response force the end of the Routine (e.g end the trial)?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "registerOn": {
    "val": true,
    "valType": "code",
    "inputType": "choice",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     true,
     false
    ],
    "allowedLabels": [
     "Press",
     "Release"
    ],
    "label": "Register button press on...",
    "hint": "When should the button press be registered? As soon as pressed, or when released?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "store": {
    "val": "first",
    "valType": "str",
    "inputType": "choice",
    "categ": "Data",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [
     "last",
     "first",
     "all",
     "nothing"
    ],
    "allowedLabels": [
     "Last button",
     "First button",
     "All buttons",
     "Nothing"
    ],
    "label": "Store",
    "hint": "Choose which (if any) responses to store at the end of a trial",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "allowedButtons": {
    "val": "",
    "valType": "list",
    "inputType": "single",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Allowed buttons",
    "hint": "A comma-separated list of button indices (should be whole numbers), leave blank to listen for all buttons.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "storeCorrect": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Store correct",
    "hint": "Do you want to save the response as correct/incorrect?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "correctAns": {
    "val": "",
    "valType": "list",
    "inputType": "single",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Correct answer",
    "hint": "What is the 'correct' key? Might be helpful to add a correctAns column and use $correctAns to compare to the key press. ",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "storeCorrect",
       "condition": "== True"
      }
     ],
     "enabled": []
    }
   },
   "discardPrevious": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Discard previous",
    "hint": "Do you want to discard all responses occurring before the onset of this Component?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "saveStartStop": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Save onset/offset times",
    "hint": "Store the onset/offset times in the data file (as well as in the log file).",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "syncScreenRefresh": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Sync timing with screen refresh",
    "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "disabled": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Disable Component",
    "hint": "Disable this Component",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   }
  }
 },
 "CameraComponent": {
  "__class__": "psychopy.experiment.components.camera:CameraComponent",
  "__name__": "CameraComponent",
  "categories": [
   "Responses"
  ],
  "targets": [
   "PsychoPy",
   "PsychoJS"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\camera\\webcam.png",
  "tooltip": "Webcam: Record video from a webcam.",
  "version": "2022.2.0",
  "beta": false,
  "validatorClasses": [],
  "hidden": false,
  "params": {
   "name": {
    "val": "cam",
    "valType": "code",
    "inputType": "name",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Name",
    "hint": "Name of this Component (alphanumeric or _, no spaces)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startVal": {
    "val": "0",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Start",
    "hint": "When does the Component start?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startEstim": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Expected start (s)",
    "hint": "(Optional) expected start (s), purely for representing in the timeline",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startType": {
    "val": "time (s)",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "time (s)",
     "frame N",
     "condition"
    ],
    "allowedLabels": [],
    "label": "Start type",
    "hint": "How do you want to define your start point?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "stopVal": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": [],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Stop",
    "hint": "When does the Component end? (blank is endless)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "durationEstim": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Expected duration (s)",
    "hint": "(Optional) expected duration (s), purely for representing in the timeline",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "stopType": {
    "val": "duration (s)",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "duration (s)",
     "duration (frames)",
     "time (s)",
     "frame N",
     "condition"
    ],
    "allowedLabels": [],
    "label": "Stop type",
    "hint": "How do you want to define your end point?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "deviceLabel": {
    "val": "",
    "valType": "device",
    "inputType": "device",
    "categ": "Device",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": "python:///psychopy.experiment.devices:DeviceMixin.addDeviceParams.<locals>.getValues",
    "allowedLabels": "python:///psychopy.experiment.devices:DeviceMixin.addDeviceParams.<locals>.getLabels",
    "label": "Device",
    "hint": "The named device from Device Manager to use for this Component.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "saveStartStop": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Save onset/offset times",
    "hint": "Store the onset/offset times in the data file (as well as in the log file).",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "syncScreenRefresh": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Sync timing with screen refresh",
    "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "disabled": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Disable Component",
    "hint": "Disable this Component",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "micDeviceLabel": {
    "val": "",
    "valType": "str",
    "inputType": "device",
    "categ": "Device",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": "python:///psychopy.experiment.components.camera:CameraComponent.__init__.<locals>.getMicValues",
    "allowedLabels": "python:///psychopy.experiment.components.camera:CameraComponent.__init__.<locals>.getMicLabels",
    "label": "Microphone device",
    "hint": "The named device from Device Manager to use for this Component.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "saveFile": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Save file?",
    "hint": "Save webcam output to a file?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   }
  }
 },
 "CodeComponent": {
  "__class__": "psychopy.experiment.components.code:CodeComponent",
  "__name__": "CodeComponent",
  "categories": [
   "Custom"
  ],
  "targets": [
   "PsychoPy",
   "PsychoJS"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\code\\code.png",
  "tooltip": "Code: insert python commands into an experiment",
  "version": "0.0.0",
  "beta": false,
  "validatorClasses": [],
  "hidden": false,
  "params": {
   "name": {
    "val": "code",
    "valType": "code",
    "inputType": "name",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Name",
    "hint": "Name of this Component (alphanumeric or _, no spaces)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "Code Type": {
    "val": "Auto->JS",
    "valType": "str",
    "inputType": "choice",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "Py",
     "JS",
     "Both",
     "Auto->JS"
    ],
    "allowedLabels": [],
    "label": "Code type",
    "hint": "Display Python or JS Code",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "disabled": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Disable Component",
    "hint": "Disable this Component",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "Before Experiment": {
    "val": "",
    "valType": "extendedCode",
    "inputType": "multi",
    "categ": "Before Exp.",
    "updates": "constant",
    "allowedUpdates": [],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Before experiment (Py)",
    "hint": "Code to run before the experiment starts (initialization); right-click checks syntax",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "Code Type",
       "condition": "in ['Py', 'Both', 'Auto->JS']"
      }
     ],
     "enabled": []
    }
   },
   "Begin Experiment": {
    "val": "",
    "valType": "extendedCode",
    "inputType": "multi",
    "categ": "Begin Exp.",
    "updates": "constant",
    "allowedUpdates": [],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Begin experiment (Py)",
    "hint": "Code at the start of the experiment ; right-click checks syntax",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "Code Type",
       "condition": "in ['Py', 'Both', 'Auto->JS']"
      }
     ],
     "enabled": []
    }
   },
   "Begin Routine": {
    "val": "",
    "valType": "extendedCode",
    "inputType": "multi",
    "categ": "Begin Routine",
    "updates": "constant",
    "allowedUpdates": [],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Begin Routine (Py)",
    "hint": "Code to be run at the start of each repeat of the Routine (e.g. each trial); right-click checks syntax",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "Code Type",
       "condition": "in ['Py', 'Both', 'Auto->JS']"
      }
     ],
     "enabled": []
    }
   },
   "Each Frame": {
    "val": "",
    "valType": "extendedCode",
    "inputType": "multi",
    "categ": "Each Frame",
    "updates": "constant",
    "allowedUpdates": [],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Each frame (Py)",
    "hint": "Code to be run on every video frame during for the duration of this Routine; right-click checks syntax",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "Code Type",
       "condition": "in ['Py', 'Both', 'Auto->JS']"
      }
     ],
     "enabled": []
    }
   },
   "End Routine": {
    "val": "",
    "valType": "extendedCode",
    "inputType": "multi",
    "categ": "End Routine",
    "updates": "constant",
    "allowedUpdates": [],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "End Routine (Py)",
    "hint": "Code at the end of this repeat of the Routine (e.g. getting/storing responses); right-click checks syntax",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "Code Type",
       "condition": "in ['Py', 'Both', 'Auto->JS']"
      }
     ],
     "enabled": []
    }
   },
   "End Experiment": {
    "val": "",
    "valType": "extendedCode",
    "inputType": "multi",
    "categ": "End Exp.",
    "updates": "constant",
    "allowedUpdates": [],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "End experiment (Py)",
    "hint": "Code at the end of the entire experiment (e.g. saving files, resetting computer); right-click checks syntax",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "Code Type",
       "condition": "in ['Py', 'Both', 'Auto->JS']"
      }
     ],
     "enabled": []
    }
   },
   "Before JS Experiment": {
    "val": "",
    "valType": "extendedCode",
    "inputType": "multi",
    "categ": "Before Exp.",
    "updates": "constant",
    "allowedUpdates": [],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Before experiment (JS)",
    "hint": "Code before the start of the experiment (initialization); right-click checks syntax",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "Code Type",
       "condition": "in ['JS', 'Both', 'Auto->JS']"
      }
     ],
     "enabled": [
      {
       "param": "Code Type",
       "condition": "== 'Auto->JS'"
      }
     ]
    }
   },
   "Begin JS Experiment": {
    "val": "",
    "valType": "extendedCode",
    "inputType": "multi",
    "categ": "Begin Exp.",
    "updates": "constant",
    "allowedUpdates": [],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Begin experiment (JS)",
    "hint": "Code at the start of the experiment (initialization); right-click checks syntax",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "Code Type",
       "condition": "in ['JS', 'Both', 'Auto->JS']"
      }
     ],
     "enabled": [
      {
       "param": "Code Type",
       "condition": "== 'Auto->JS'"
      }
     ]
    }
   },
   "Begin JS Routine": {
    "val": "",
    "valType": "extendedCode",
    "inputType": "multi",
    "categ": "Begin Routine",
    "updates": "constant",
    "allowedUpdates": [],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Begin Routine (JS)",
    "hint": "Code to be run at the start of each repeat of the Routine (e.g. each trial); right-click checks syntax",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "Code Type",
       "condition": "in ['JS', 'Both', 'Auto->JS']"
      }
     ],
     "enabled": [
      {
       "param": "Code Type",
       "condition": "== 'Auto->JS'"
      }
     ]
    }
   },
   "Each JS Frame": {
    "val": "",
    "valType": "extendedCode",
    "inputType": "multi",
    "categ": "Each Frame",
    "updates": "constant",
    "allowedUpdates": [],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Each JS frame",
    "hint": "Code to be run on every video frame during for the duration of this Routine; right-click checks syntax",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "Code Type",
       "condition": "in ['JS', 'Both', 'Auto->JS']"
      }
     ],
     "enabled": [
      {
       "param": "Code Type",
       "condition": "== 'Auto->JS'"
      }
     ]
    }
   },
   "End JS Routine": {
    "val": "",
    "valType": "extendedCode",
    "inputType": "multi",
    "categ": "End Routine",
    "updates": "constant",
    "allowedUpdates": [],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "End Routine (JS)",
    "hint": "Code at the end of this repeat of the Routine (e.g. getting/storing responses); right-click checks syntax",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "Code Type",
       "condition": "in ['JS', 'Both', 'Auto->JS']"
      }
     ],
     "enabled": [
      {
       "param": "Code Type",
       "condition": "== 'Auto->JS'"
      }
     ]
    }
   },
   "End JS Experiment": {
    "val": "",
    "valType": "extendedCode",
    "inputType": "multi",
    "categ": "End Exp.",
    "updates": "constant",
    "allowedUpdates": [],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "End experiment (JS)",
    "hint": "Code at the end of the entire experiment (e.g. saving files, resetting computer); right-click checks syntax",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "Code Type",
       "condition": "in ['JS', 'Both', 'Auto->JS']"
      }
     ],
     "enabled": [
      {
       "param": "Code Type",
       "condition": "== 'Auto->JS'"
      }
     ]
    }
   }
  }
 },
 "DotsComponent": {
  "__class__": "psychopy.experiment.components.dots:DotsComponent",
  "__name__": "DotsComponent",
  "categories": [
   "Stimuli"
  ],
  "targets": [
   "PsychoPy"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\dots\\dots.png",
  "tooltip": "Dots: Random Dot Kinematogram",
  "version": "0.0.0",
  "beta": false,
  "validatorClasses": [
   "VisualValidatorRoutine"
  ],
  "hidden": false,
  "params": {
   "name": {
    "val": "dots",
    "valType": "code",
    "inputType": "name",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Name",
    "hint": "Name of this Component (alphanumeric or _, no spaces)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startVal": {
    "val": 0.0,
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Start",
    "hint": "When does the Component start?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startEstim": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Expected start (s)",
    "hint": "(Optional) expected start (s), purely for representing in the timeline",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startType": {
    "val": "time (s)",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "time (s)",
     "frame N",
     "condition"
    ],
    "allowedLabels": [],
    "label": "Start type",
    "hint": "How do you want to define your start point?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "stopVal": {
    "val": 1.0,
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": [],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Stop",
    "hint": "When does the Component end? (blank is endless)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "durationEstim": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Expected duration (s)",
    "hint": "(Optional) expected duration (s), purely for representing in the timeline",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "stopType": {
    "val": "duration (s)",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "duration (s)",
     "duration (frames)",
     "time (s)",
     "frame N",
     "condition"
    ],
    "allowedLabels": [],
    "label": "Stop type",
    "hint": "How do you want to define your end point?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "color": {
    "val": "$[1.0,1.0,1.0]",
    "valType": "color",
    "inputType": "color",
    "categ": "Appearance",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Dot color",
    "hint": "Foreground color of this stimulus (e.g. $[1,1,0], red )",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "colorSpace": {
    "val": "rgb",
    "valType": "str",
    "inputType": "choice",
    "categ": "Appearance",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [
     "rgb",
     "dkl",
     "lms",
     "hsv"
    ],
    "allowedLabels": [],
    "label": "Dot color space",
    "hint": "In what format (color space) have you specified the colors? (rgb, dkl, lms, hsv)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "opacity": {
    "val": "",
    "valType": "num",
    "inputType": "single",
    "categ": "Appearance",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Opacity",
    "hint": "Opacity of the stimulus (1=opaque, 0=fully transparent, 0.5=translucent). Leave blank for each color to have its own opacity (recommended if any color is None).",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "dotSize": {
    "val": 2,
    "valType": "num",
    "inputType": "spin",
    "categ": "Layout",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Dot size",
    "hint": "Size of the dots IN PIXELS regardless of the set units",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "fieldSize": {
    "val": 1.0,
    "valType": "num",
    "inputType": "single",
    "categ": "Layout",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Field size",
    "hint": "What is the size of the field (in the specified units)?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "fieldPos": {
    "val": [
     0.0,
     0.0
    ],
    "valType": "list",
    "inputType": "single",
    "categ": "Layout",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Field position",
    "hint": "Where is the field centred (in the specified units)?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "units": {
    "val": "from exp settings",
    "valType": "str",
    "inputType": "choice",
    "categ": "Layout",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "from exp settings",
     "deg",
     "cm",
     "pix",
     "norm",
     "height",
     "degFlatPos",
     "degFlat"
    ],
    "allowedLabels": [],
    "label": "Spatial units",
    "hint": "Units of dimensions for this stimulus",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "anchor": {
    "val": "center",
    "valType": "str",
    "inputType": "choice",
    "categ": "Layout",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [
     "center",
     "top-center",
     "bottom-center",
     "center-left",
     "center-right",
     "top-left",
     "top-right",
     "bottom-left",
     "bottom-right"
    ],
    "allowedLabels": [],
    "label": "Field anchor",
    "hint": "Which point on the field should be anchored to its exact position?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "nDots": {
    "val": 100,
    "valType": "int",
    "inputType": "spin",
    "categ": "Dots",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Number of dots",
    "hint": "Number of dots in the field (for circular fields this will be average number of dots)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "dir": {
    "val": 0.0,
    "valType": "num",
    "inputType": "spin",
    "categ": "Dots",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Direction",
    "hint": "Direction of motion for the signal dots (degrees)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "speed": {
    "val": 0.1,
    "valType": "num",
    "inputType": "single",
    "categ": "Dots",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Speed",
    "hint": "Speed of the dots (displacement per frame in the specified units)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "saveStartStop": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Save onset/offset times",
    "hint": "Store the onset/offset times in the data file (as well as in the log file).",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "syncScreenRefresh": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Sync timing with screen refresh",
    "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "disabled": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Disable Component",
    "hint": "Disable this Component",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "contrast": {
    "val": 1,
    "valType": "num",
    "inputType": "single",
    "categ": "Appearance",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Contrast",
    "hint": "Contrast of the stimulus (1.0=unchanged contrast, 0.5=decrease contrast, 0.0=uniform/no contrast, -0.5=slightly inverted, -1.0=totally inverted)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "validator": {
    "val": "",
    "valType": "code",
    "inputType": "choice",
    "categ": "Testing",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": "python:///psychopy.experiment.components._base:BaseComponent.getAllValidatorRoutineVals",
    "allowedLabels": "python:///psychopy.experiment.components._base:BaseComponent.getAllValidatorRoutineLabels",
    "label": "Validate with...",
    "hint": "Name of validator Component/Routine to use to check the timing of this stimulus.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "coherence": {
    "val": 1.0,
    "valType": "num",
    "inputType": "single",
    "categ": "Dots",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Coherence",
    "hint": "Coherence of the dots (fraction moving in the signal direction on any one frame)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "dotLife": {
    "val": 3,
    "valType": "num",
    "inputType": "spin",
    "categ": "Dots",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Dot life-time",
    "hint": "Number of frames before each dot is killed and randomly assigned a new position",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "signalDots": {
    "val": "same",
    "valType": "str",
    "inputType": "choice",
    "categ": "Dots",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "same",
     "different"
    ],
    "allowedLabels": [],
    "label": "Signal dots",
    "hint": "On each frame are the signals dots remaining the same or changing? See Scase et al.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "refreshDots": {
    "val": "repeat",
    "valType": "str",
    "inputType": "choice",
    "categ": "Dots",
    "updates": null,
    "allowedUpdates": [],
    "allowedVals": [
     "none",
     "repeat"
    ],
    "allowedLabels": [],
    "label": "Dot refresh rule",
    "hint": "When should the whole sample of dots be refreshed",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "noiseDots": {
    "val": "direction",
    "valType": "str",
    "inputType": "choice",
    "categ": "Dots",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "direction",
     "position",
     "walk"
    ],
    "allowedLabels": [],
    "label": "Noise dots",
    "hint": "What governs the behaviour of the noise dots? See Scase et al.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "fieldShape": {
    "val": "circle",
    "valType": "str",
    "inputType": "choice",
    "categ": "Layout",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [
     "circle",
     "square"
    ],
    "allowedLabels": [],
    "label": "Field shape",
    "hint": "What is the shape of the field?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   }
  }
 },
 "EyetrackerRecordComponent": {
  "__class__": "psychopy.experiment.components.eyetracker_record:EyetrackerRecordComponent",
  "__name__": "EyetrackerRecordComponent",
  "categories": [
   "Eyetracking"
  ],
  "targets": [
   "PsychoPy"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\eyetracker_record\\eyetracker_record.png",
  "tooltip": "Start and / or Stop recording data from the eye tracker",
  "version": "2021.2.0",
  "beta": false,
  "validatorClasses": [],
  "hidden": false,
  "params": {
   "name": {
    "val": "etRecord",
    "valType": "code",
    "inputType": "name",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Name",
    "hint": "Name of this Component (alphanumeric or _, no spaces)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "actionType": {
    "val": "Start and Stop",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "Start and Stop",
     "Start Only",
     "Stop Only"
    ],
    "allowedLabels": [],
    "label": "Record actions",
    "hint": "Should this Component start and / or stop eye tracker recording?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startVal": {
    "val": 0.0,
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Start",
    "hint": "When does the Component start?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startEstim": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Expected start (s)",
    "hint": "(Optional) expected start (s), purely for representing in the timeline",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startType": {
    "val": "time (s)",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "time (s)",
     "frame N",
     "condition"
    ],
    "allowedLabels": [],
    "label": "Start type",
    "hint": "How do you want to define your start point?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "stopVal": {
    "val": 1.0,
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": [],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Stop",
    "hint": "When does the Component end? (blank is endless)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "durationEstim": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Expected duration (s)",
    "hint": "(Optional) expected duration (s), purely for representing in the timeline",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "stopType": {
    "val": "duration (s)",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "duration (s)",
     "duration (frames)",
     "time (s)",
     "frame N",
     "condition"
    ],
    "allowedLabels": [],
    "label": "Stop type",
    "hint": "How do you want to define your end point?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "saveStartStop": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Save onset/offset times",
    "hint": "Store the onset/offset times in the data file (as well as in the log file).",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "syncScreenRefresh": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Sync timing with screen refresh",
    "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "disabled": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Disable Component",
    "hint": "Disable this Component",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "stopWithRoutine": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Stop with Routine?",
    "hint": "Should eyetracking stop when the Routine ends? Tick to force stopping after the Routine has finished.",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "actionType",
       "condition": "in ('Start and Stop', 'Stop Only')"
      }
     ],
     "enabled": []
    }
   }
  }
 },
 "FormComponent": {
  "__class__": "psychopy.experiment.components.form:FormComponent",
  "__name__": "FormComponent",
  "categories": [
   "Responses"
  ],
  "targets": [
   "PsychoPy",
   "PsychoJS"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\form\\form.png",
  "tooltip": "Form: a Psychopy survey tool",
  "version": "2020.2.0",
  "beta": false,
  "validatorClasses": [
   "VisualValidatorRoutine"
  ],
  "hidden": false,
  "params": {
   "name": {
    "val": "form",
    "valType": "code",
    "inputType": "name",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Name",
    "hint": "Name of this Component (alphanumeric or _, no spaces)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startVal": {
    "val": "0.0",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Start",
    "hint": "When does the Component start?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startEstim": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Expected start (s)",
    "hint": "(Optional) expected start (s), purely for representing in the timeline",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startType": {
    "val": "time (s)",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "time (s)",
     "frame N",
     "condition"
    ],
    "allowedLabels": [],
    "label": "Start type",
    "hint": "How do you want to define your start point?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "stopVal": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": [],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Stop",
    "hint": "When does the Component end? (blank is endless)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "durationEstim": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Expected duration (s)",
    "hint": "(Optional) expected duration (s), purely for representing in the timeline",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "stopType": {
    "val": "duration (s)",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "duration (s)",
     "duration (frames)",
     "time (s)",
     "frame N",
     "condition"
    ],
    "allowedLabels": [],
    "label": "Stop type",
    "hint": "How do you want to define your end point?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "fillColor": {
    "val": "",
    "valType": "color",
    "inputType": "color",
    "categ": "Appearance",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Fill color",
    "hint": "Color of the form's background",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": [
      {
       "param": "Style",
       "condition": "=='custom...'"
      }
     ]
    }
   },
   "borderColor": {
    "val": "",
    "valType": "color",
    "inputType": "color",
    "categ": "Appearance",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Border color",
    "hint": "Color of the outline around the form",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": [
      {
       "param": "Style",
       "condition": "=='custom...'"
      }
     ]
    }
   },
   "itemColor": {
    "val": "white",
    "valType": "color",
    "inputType": "color",
    "categ": "Appearance",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Item color",
    "hint": "Base text color for questions",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": [
      {
       "param": "Style",
       "condition": "=='custom...'"
      }
     ]
    }
   },
   "responseColor": {
    "val": "white",
    "valType": "color",
    "inputType": "color",
    "categ": "Appearance",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Response color",
    "hint": "Base text color for responses, also sets color of lines in sliders and borders of textboxes",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": [
      {
       "param": "Style",
       "condition": "=='custom...'"
      }
     ]
    }
   },
   "markerColor": {
    "val": "red",
    "valType": "color",
    "inputType": "color",
    "categ": "Appearance",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Marker color",
    "hint": "Color of markers and the scrollbar",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": [
      {
       "param": "Style",
       "condition": "=='custom...'"
      }
     ]
    }
   },
   "Style": {
    "val": "dark",
    "valType": "str",
    "inputType": "choice",
    "categ": "Appearance",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [
     "light",
     "dark",
     "custom..."
    ],
    "allowedLabels": [],
    "label": "Styles",
    "hint": "Styles determine the appearance of the form",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "colorSpace": {
    "val": "rgb",
    "valType": "str",
    "inputType": "choice",
    "categ": "Appearance",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [
     "rgb",
     "dkl",
     "lms",
     "hsv"
    ],
    "allowedLabels": [],
    "label": "Color space",
    "hint": "In what format (color space) have you specified the colors? (rgb, dkl, lms, hsv)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "opacity": {
    "val": "",
    "valType": "num",
    "inputType": "single",
    "categ": "Appearance",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Opacity",
    "hint": "Opacity of the stimulus (1=opaque, 0=fully transparent, 0.5=translucent). Leave blank for each color to have its own opacity (recommended if any color is None).",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "size": {
    "val": [
     1,
     0.7
    ],
    "valType": "list",
    "inputType": "single",
    "categ": "Layout",
    "updates": "constant",
    "allowedUpdates": [],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Size [w,h]",
    "hint": "Size of this stimulus (either a single value or x,y pair, e.g. 2.5, [1,2] ",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "pos": {
    "val": [
     0,
     0
    ],
    "valType": "list",
    "inputType": "single",
    "categ": "Layout",
    "updates": "constant",
    "allowedUpdates": [],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Position [x,y]",
    "hint": "Position of this stimulus (e.g. [1,2] )",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "Item Padding": {
    "val": 0.05,
    "valType": "num",
    "inputType": "single",
    "categ": "Layout",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Item padding",
    "hint": "The padding or space between items.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "Items": {
    "val": "",
    "valType": "file",
    "inputType": "table",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Items",
    "hint": "The csv filename containing the items for your survey.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "Randomize": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Randomize",
    "hint": "Do you want to randomize the order of your questions?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "Data Format": {
    "val": "rows",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [
     "columns",
     "rows"
    ],
    "allowedLabels": [],
    "label": "Data format",
    "hint": "Store item data by columns, or rows",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "saveStartStop": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Save onset/offset times",
    "hint": "Store the onset/offset times in the data file (as well as in the log file).",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "syncScreenRefresh": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Sync timing with screen refresh",
    "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "disabled": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Disable Component",
    "hint": "Disable this Component",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "contrast": {
    "val": 1,
    "valType": "num",
    "inputType": "single",
    "categ": "Appearance",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Contrast",
    "hint": "Contrast of the stimulus (1.0=unchanged contrast, 0.5=decrease contrast, 0.0=uniform/no contrast, -0.5=slightly inverted, -1.0=totally inverted)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "validator": {
    "val": "",
    "valType": "code",
    "inputType": "choice",
    "categ": "Testing",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": "python:///psychopy.experiment.components._base:BaseComponent.getAllValidatorRoutineVals",
    "allowedLabels": "python:///psychopy.experiment.components._base:BaseComponent.getAllValidatorRoutineLabels",
    "label": "Validate with...",
    "hint": "Name of validator Component/Routine to use to check the timing of this stimulus.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "Text Height": {
    "val": 0.03,
    "valType": "num",
    "inputType": "single",
    "categ": "Formatting",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Text height",
    "hint": "The size of the item text for Form",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "Font": {
    "val": "Noto Sans",
    "valType": "str",
    "inputType": "single",
    "categ": "Formatting",
    "updates": "constant",
    "allowedUpdates": [
     "constant"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Font",
    "hint": "The font name (e.g. Comic Sans)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   }
  }
 },
 "GratingComponent": {
  "__class__": "psychopy.experiment.components.grating:GratingComponent",
  "__name__": "GratingComponent",
  "categories": [
   "Stimuli"
  ],
  "targets": [
   "PsychoPy",
   "PsychoJS"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\grating\\grating.png",
  "tooltip": "Grating: present cyclic textures, prebuilt or from a file",
  "version": "0.0.0",
  "beta": false,
  "validatorClasses": [
   "VisualValidatorRoutine"
  ],
  "hidden": false,
  "params": {
   "name": {
    "val": "grating",
    "valType": "code",
    "inputType": "name",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Name",
    "hint": "Name of this Component (alphanumeric or _, no spaces)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startVal": {
    "val": 0.0,
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Start",
    "hint": "When does the Component start?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startEstim": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Expected start (s)",
    "hint": "(Optional) expected start (s), purely for representing in the timeline",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startType": {
    "val": "time (s)",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "time (s)",
     "frame N",
     "condition"
    ],
    "allowedLabels": [],
    "label": "Start type",
    "hint": "How do you want to define your start point?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "stopVal": {
    "val": 1.0,
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": [],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Stop",
    "hint": "When does the Component end? (blank is endless)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "durationEstim": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Expected duration (s)",
    "hint": "(Optional) expected duration (s), purely for representing in the timeline",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "stopType": {
    "val": "duration (s)",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "duration (s)",
     "duration (frames)",
     "time (s)",
     "frame N",
     "condition"
    ],
    "allowedLabels": [],
    "label": "Stop type",
    "hint": "How do you want to define your end point?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "color": {
    "val": "$[1,1,1]",
    "valType": "color",
    "inputType": "color",
    "categ": "Appearance",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Foreground color",
    "hint": "Foreground color of this stimulus (e.g. $[1,1,0], red )",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "colorSpace": {
    "val": "rgb",
    "valType": "str",
    "inputType": "choice",
    "categ": "Appearance",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [
     "rgb",
     "dkl",
     "lms",
     "hsv"
    ],
    "allowedLabels": [],
    "label": "Color space",
    "hint": "In what format (color space) have you specified the colors? (rgb, dkl, lms, hsv)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "opacity": {
    "val": "",
    "valType": "num",
    "inputType": "single",
    "categ": "Appearance",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Opacity",
    "hint": "Opacity of the stimulus (1=opaque, 0=fully transparent, 0.5=translucent). Leave blank for each color to have its own opacity (recommended if any color is None).",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "size": {
    "val": [
     0.5,
     0.5
    ],
    "valType": "list",
    "inputType": "single",
    "categ": "Layout",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Size [w,h]",
    "hint": "Size of this stimulus (either a single value or x,y pair, e.g. 2.5, [1,2] ",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "pos": {
    "val": [
     0,
     0
    ],
    "valType": "list",
    "inputType": "single",
    "categ": "Layout",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Position [x,y]",
    "hint": "Position of this stimulus (e.g. [1,2] )",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "units": {
    "val": "from exp settings",
    "valType": "str",
    "inputType": "choice",
    "categ": "Layout",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "from exp settings",
     "deg",
     "cm",
     "pix",
     "norm",
     "height",
     "degFlatPos",
     "degFlat"
    ],
    "allowedLabels": [],
    "label": "Spatial units",
    "hint": "Units of dimensions for this stimulus",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "anchor": {
    "val": "center",
    "valType": "str",
    "inputType": "choice",
    "categ": "Layout",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [
     "center",
     "top-center",
     "bottom-center",
     "center-left",
     "center-right",
     "top-left",
     "top-right",
     "bottom-left",
     "bottom-right"
    ],
    "allowedLabels": [],
    "label": "Anchor",
    "hint": "Which point on the stimulus should be anchored to its exact position?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "ori": {
    "val": 0,
    "valType": "num",
    "inputType": "spin",
    "categ": "Layout",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [
     -360,
     360
    ],
    "allowedLabels": [],
    "label": "Orientation",
    "hint": "Orientation of this stimulus (in deg)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "tex": {
    "val": "sin",
    "valType": "file",
    "inputType": "file",
    "categ": "Texture",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [
     "sin",
     "sqr",
     "sinXsin"
    ],
    "allowedLabels": [],
    "label": "Texture",
    "hint": "The (2D) texture of the grating - can be sin, sqr, sinXsin... or a filename (including path)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "mask": {
    "val": "",
    "valType": "file",
    "inputType": "file",
    "categ": "Texture",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [
     "gauss",
     "circle"
    ],
    "allowedLabels": [],
    "label": "Mask",
    "hint": "An image to define the alpha mask (ie shape)- gauss, circle... or a filename (including path)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "phase": {
    "val": 0.0,
    "valType": "num",
    "inputType": "single",
    "categ": "Texture",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Phase (in cycles)",
    "hint": "Spatial positioning of the image on the grating (wraps in range 0-1.0)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "sf": {
    "val": "",
    "valType": "num",
    "inputType": "single",
    "categ": "Texture",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Spatial frequency",
    "hint": "Spatial frequency of image repeats across the grating in 1 or 2 dimensions, e.g. 4 or [2,3]",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "texture resolution": {
    "val": "128",
    "valType": "num",
    "inputType": "choice",
    "categ": "Texture",
    "updates": "constant",
    "allowedUpdates": [],
    "allowedVals": [
     "32",
     "64",
     "128",
     "256",
     "512"
    ],
    "allowedLabels": [],
    "label": "Texture resolution",
    "hint": "Resolution of the texture for standard ones such as sin, sqr etc. For most cases a value of 256 pixels will suffice",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "interpolate": {
    "val": "linear",
    "valType": "str",
    "inputType": "choice",
    "categ": "Texture",
    "updates": "constant",
    "allowedUpdates": [],
    "allowedVals": [
     "linear",
     "nearest"
    ],
    "allowedLabels": [],
    "label": "Interpolate",
    "hint": "How should the image be interpolated if/when rescaled",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "saveStartStop": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Save onset/offset times",
    "hint": "Store the onset/offset times in the data file (as well as in the log file).",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "syncScreenRefresh": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Sync timing with screen refresh",
    "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "disabled": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Disable Component",
    "hint": "Disable this Component",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "contrast": {
    "val": 1.0,
    "valType": "num",
    "inputType": "single",
    "categ": "Appearance",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Contrast",
    "hint": "Contrast of the stimulus (1.0=unchanged contrast, 0.5=decrease contrast, 0.0=uniform/no contrast, -0.5=slightly inverted, -1.0=totally inverted)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "validator": {
    "val": "",
    "valType": "code",
    "inputType": "choice",
    "categ": "Testing",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": "python:///psychopy.experiment.components._base:BaseComponent.getAllValidatorRoutineVals",
    "allowedLabels": "python:///psychopy.experiment.components._base:BaseComponent.getAllValidatorRoutineLabels",
    "label": "Validate with...",
    "hint": "Name of validator Component/Routine to use to check the timing of this stimulus.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "draggable": {
    "val": false,
    "valType": "code",
    "inputType": "bool",
    "categ": "Layout",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Draggable?",
    "hint": "Should this stimulus be moveble by clicking and dragging?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "blendmode": {
    "val": "avg",
    "valType": "str",
    "inputType": "choice",
    "categ": "Appearance",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [
     "avg",
     "add"
    ],
    "allowedLabels": [],
    "label": "OpenGL blend mode",
    "hint": "OpenGL Blendmode: avg gives traditional transparency, add is important to combine gratings)]",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   }
  }
 },
 "ImageComponent": {
  "__class__": "psychopy.experiment.components.image:ImageComponent",
  "__name__": "ImageComponent",
  "categories": [
   "Stimuli"
  ],
  "targets": [
   "PsychoPy",
   "PsychoJS"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\image\\image.png",
  "tooltip": "Image: present images (bmp, jpg, tif...)",
  "version": "0.0.0",
  "beta": false,
  "validatorClasses": [
   "VisualValidatorRoutine"
  ],
  "hidden": false,
  "params": {
   "name": {
    "val": "image",
    "valType": "code",
    "inputType": "name",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Name",
    "hint": "Name of this Component (alphanumeric or _, no spaces)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startVal": {
    "val": 0.0,
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Start",
    "hint": "When does the Component start?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startEstim": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Expected start (s)",
    "hint": "(Optional) expected start (s), purely for representing in the timeline",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startType": {
    "val": "time (s)",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "time (s)",
     "frame N",
     "condition"
    ],
    "allowedLabels": [],
    "label": "Start type",
    "hint": "How do you want to define your start point?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "stopVal": {
    "val": 1.0,
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": [],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Stop",
    "hint": "When does the Component end? (blank is endless)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "durationEstim": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Expected duration (s)",
    "hint": "(Optional) expected duration (s), purely for representing in the timeline",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "stopType": {
    "val": "duration (s)",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "duration (s)",
     "duration (frames)",
     "time (s)",
     "frame N",
     "condition"
    ],
    "allowedLabels": [],
    "label": "Stop type",
    "hint": "How do you want to define your end point?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "color": {
    "val": "$[1,1,1]",
    "valType": "color",
    "inputType": "color",
    "categ": "Appearance",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Foreground color",
    "hint": "Foreground color of this stimulus (e.g. $[1,1,0], red )",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "colorSpace": {
    "val": "rgb",
    "valType": "str",
    "inputType": "choice",
    "categ": "Appearance",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [
     "rgb",
     "dkl",
     "lms",
     "hsv"
    ],
    "allowedLabels": [],
    "label": "Color space",
    "hint": "In what format (color space) have you specified the colors? (rgb, dkl, lms, hsv)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "opacity": {
    "val": "",
    "valType": "num",
    "inputType": "single",
    "categ": "Appearance",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Opacity",
    "hint": "Opacity of the stimulus (1=opaque, 0=fully transparent, 0.5=translucent). Leave blank for each color to have its own opacity (recommended if any color is None).",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "size": {
    "val": [
     0.5,
     0.5
    ],
    "valType": "list",
    "inputType": "single",
    "categ": "Layout",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Size [w,h]",
    "hint": "Size of this stimulus (either a single value or x,y pair, e.g. 2.5, [1,2] ",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "pos": {
    "val": [
     0,
     0
    ],
    "valType": "list",
    "inputType": "single",
    "categ": "Layout",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Position [x,y]",
    "hint": "Position of this stimulus (e.g. [1,2] )",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "units": {
    "val": "from exp settings",
    "valType": "str",
    "inputType": "choice",
    "categ": "Layout",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "from exp settings",
     "deg",
     "cm",
     "pix",
     "norm",
     "height",
     "degFlatPos",
     "degFlat"
    ],
    "allowedLabels": [],
    "label": "Spatial units",
    "hint": "Units of dimensions for this stimulus",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "anchor": {
    "val": "center",
    "valType": "str",
    "inputType": "choice",
    "categ": "Layout",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [
     "center",
     "top-center",
     "bottom-center",
     "center-left",
     "center-right",
     "top-left",
     "top-right",
     "bottom-left",
     "bottom-right"
    ],
    "allowedLabels": [],
    "label": "Anchor",
    "hint": "Which point on the stimulus should be anchored to its exact position?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "ori": {
    "val": 0,
    "valType": "num",
    "inputType": "spin",
    "categ": "Layout",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [
     -360,
     360
    ],
    "allowedLabels": [],
    "label": "Orientation",
    "hint": "Orientation of this stimulus (in deg)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "image": {
    "val": "",
    "valType": "file",
    "inputType": "file",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Image",
    "hint": "The image to be displayed - a filename, including path",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "mask": {
    "val": "",
    "valType": "str",
    "inputType": "file",
    "categ": "Texture",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Mask",
    "hint": "An image to define the alpha mask through which the image is seen - gauss, circle, None or a filename (including path)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "texture resolution": {
    "val": "128",
    "valType": "num",
    "inputType": "choice",
    "categ": "Texture",
    "updates": "constant",
    "allowedUpdates": [],
    "allowedVals": [
     "32",
     "64",
     "128",
     "256",
     "512"
    ],
    "allowedLabels": [],
    "label": "Texture resolution",
    "hint": "Resolution of the mask if one is used.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "saveStartStop": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Save onset/offset times",
    "hint": "Store the onset/offset times in the data file (as well as in the log file).",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "syncScreenRefresh": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Sync timing with screen refresh",
    "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "disabled": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Disable Component",
    "hint": "Disable this Component",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "contrast": {
    "val": 1,
    "valType": "num",
    "inputType": "single",
    "categ": "Appearance",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Contrast",
    "hint": "Contrast of the stimulus (1.0=unchanged contrast, 0.5=decrease contrast, 0.0=uniform/no contrast, -0.5=slightly inverted, -1.0=totally inverted)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "validator": {
    "val": "",
    "valType": "code",
    "inputType": "choice",
    "categ": "Testing",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": "python:///psychopy.experiment.components._base:BaseComponent.getAllValidatorRoutineVals",
    "allowedLabels": "python:///psychopy.experiment.components._base:BaseComponent.getAllValidatorRoutineLabels",
    "label": "Validate with...",
    "hint": "Name of validator Component/Routine to use to check the timing of this stimulus.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "interpolate": {
    "val": "linear",
    "valType": "str",
    "inputType": "choice",
    "categ": "Texture",
    "updates": "constant",
    "allowedUpdates": [],
    "allowedVals": [
     "linear",
     "nearest"
    ],
    "allowedLabels": [],
    "label": "Interpolate",
    "hint": "How should the image be interpolated if/when rescaled",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "flipVert": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Layout",
    "updates": "constant",
    "allowedUpdates": [],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Flip vertically",
    "hint": "Should the image be flipped vertically (top to bottom)?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "flipHoriz": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Layout",
    "updates": "constant",
    "allowedUpdates": [],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Flip horizontally",
    "hint": "Should the image be flipped horizontally (left to right)?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "draggable": {
    "val": false,
    "valType": "code",
    "inputType": "bool",
    "categ": "Layout",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Draggable?",
    "hint": "Should this stimulus be moveble by clicking and dragging?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   }
  }
 },
 "JoyButtonsComponent": {
  "__class__": "psychopy.experiment.components.joyButtons:JoyButtonsComponent",
  "__name__": "JoyButtonsComponent",
  "categories": [
   "Responses"
  ],
  "targets": [
   "PsychoPy"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\joyButtons\\joyButtons.png",
  "tooltip": "JoyButtons: check and record joystick/gamepad button presses",
  "version": "0.0.0",
  "beta": false,
  "validatorClasses": [],
  "hidden": false,
  "params": {
   "name": {
    "val": "button_resp",
    "valType": "code",
    "inputType": "name",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Name",
    "hint": "Name of this Component (alphanumeric or _, no spaces)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startVal": {
    "val": 0.0,
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Start",
    "hint": "When does the Component start?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startEstim": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Expected start (s)",
    "hint": "(Optional) expected start (s), purely for representing in the timeline",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startType": {
    "val": "time (s)",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "time (s)",
     "frame N",
     "condition"
    ],
    "allowedLabels": [],
    "label": "Start type",
    "hint": "How do you want to define your start point?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "stopVal": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": [],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Stop",
    "hint": "When does the Component end? (blank is endless)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "durationEstim": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Expected duration (s)",
    "hint": "(Optional) expected duration (s), purely for representing in the timeline",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "stopType": {
    "val": "duration (s)",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "duration (s)",
     "duration (frames)",
     "time (s)",
     "frame N",
     "condition"
    ],
    "allowedLabels": [],
    "label": "Stop type",
    "hint": "How do you want to define your end point?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "forceEndRoutine": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Force end of Routine",
    "hint": "Should a response force the end of the Routine (e.g end the trial)?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "allowedKeys": {
    "val": "0,1,2,3,4",
    "valType": "list",
    "inputType": "single",
    "categ": "Data",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Allowed buttons",
    "hint": "A comma-separated list of button numbers, such as 0,1,2,3,4",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "store": {
    "val": "last key",
    "valType": "str",
    "inputType": "choice",
    "categ": "Data",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [
     "last key",
     "first key",
     "all keys",
     "nothing"
    ],
    "allowedLabels": [],
    "label": "Store",
    "hint": "Choose which (if any) responses to store at the end of a trial",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "storeCorrect": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Store correct",
    "hint": "Do you want to save the response as correct/incorrect?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "correctAns": {
    "val": "",
    "valType": "list",
    "inputType": "single",
    "categ": "Data",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Correct answer",
    "hint": "What is the 'correct' key? Might be helpful to add a correctAns column and use $correctAns to compare to the key press.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": [
      {
       "param": "storeCorrect",
       "condition": "== True"
      }
     ]
    }
   },
   "deviceNumber": {
    "val": "0",
    "valType": "int",
    "inputType": "int",
    "categ": "Device",
    "updates": "constant",
    "allowedUpdates": [],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Device number",
    "hint": "Device number, if you have multiple devices which one do you want (0, 1, 2...)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "saveStartStop": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Save onset/offset times",
    "hint": "Store the onset/offset times in the data file (as well as in the log file).",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "syncScreenRefresh": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Sync RT with screen",
    "hint": "A reaction time to a visual stimulus should be based on when the screen flipped",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "disabled": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Disable Component",
    "hint": "Disable this Component",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   }
  }
 },
 "JoystickComponent": {
  "__class__": "psychopy.experiment.components.joystick:JoystickComponent",
  "__name__": "JoystickComponent",
  "categories": [
   "Responses"
  ],
  "targets": [
   "PsychoPy"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\joystick\\joystick.png",
  "tooltip": "Joystick: query joystick position and buttons",
  "version": "0.0.0",
  "beta": false,
  "validatorClasses": [],
  "hidden": false,
  "params": {
   "name": {
    "val": "joystick",
    "valType": "code",
    "inputType": "name",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Name",
    "hint": "Name of this Component (alphanumeric or _, no spaces)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startVal": {
    "val": 0.0,
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Start",
    "hint": "When does the Component start?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startEstim": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Expected start (s)",
    "hint": "(Optional) expected start (s), purely for representing in the timeline",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startType": {
    "val": "time (s)",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "time (s)",
     "frame N",
     "condition"
    ],
    "allowedLabels": [],
    "label": "Start type",
    "hint": "How do you want to define your start point?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "stopVal": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": [],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Stop",
    "hint": "When does the Component end? (blank is endless)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "durationEstim": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Expected duration (s)",
    "hint": "(Optional) expected duration (s), purely for representing in the timeline",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "stopType": {
    "val": "duration (s)",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "duration (s)",
     "duration (frames)",
     "time (s)",
     "frame N",
     "condition"
    ],
    "allowedLabels": [],
    "label": "Stop type",
    "hint": "How do you want to define your end point?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "saveJoystickState": {
    "val": "final",
    "valType": "str",
    "inputType": "choice",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "final",
     "on click",
     "every frame",
     "never"
    ],
    "allowedLabels": [],
    "label": "Save joystick state",
    "hint": "How often should the joystick state (x,y,buttons) be stored? On every video frame, every click or just at the end of the Routine?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "timeRelativeTo": {
    "val": "joystick onset",
    "valType": "str",
    "inputType": "choice",
    "categ": "Data",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [
     "joystick onset",
     "experiment",
     "routine"
    ],
    "allowedLabels": [],
    "label": "Time relative to",
    "hint": "What should the values of joystick.time be relative to?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "clickable": {
    "val": "",
    "valType": "list",
    "inputType": "single",
    "categ": "Data",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Clickable stimuli",
    "hint": "A comma-separated list of your stimulus names that can be \"clicked\" by the participant. e.g. target, foil",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "saveParamsClickable": {
    "val": "name,",
    "valType": "list",
    "inputType": "single",
    "categ": "Data",
    "updates": "constant",
    "allowedUpdates": [],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Store params for clicked",
    "hint": "The params (e.g. name, text), for which you want to store the current value, for the stimulus that was\"clicked\" by the joystick. Make sure that all the clickable objects have all these params.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "allowedButtons": {
    "val": "",
    "valType": "list",
    "inputType": "single",
    "categ": "Data",
    "updates": "constant",
    "allowedUpdates": [],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Allowed buttons",
    "hint": "Buttons to be read (blank for any) numbers separated by commas",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "deviceNumber": {
    "val": "0",
    "valType": "int",
    "inputType": "single",
    "categ": "Device",
    "updates": "constant",
    "allowedUpdates": [],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Device number",
    "hint": "Device number, if you have multiple devices which one do you want (0, 1, 2...)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "saveStartStop": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Save onset/offset times",
    "hint": "Store the onset/offset times in the data file (as well as in the log file).",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "syncScreenRefresh": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Sync timing with screen refresh",
    "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "disabled": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Disable Component",
    "hint": "Disable this Component",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "forceEndRoutineOnPress": {
    "val": "any click",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [
     "never",
     "any click",
     "valid click"
    ],
    "allowedLabels": [],
    "label": "End Routine on press",
    "hint": "Should a button press force the end of the Routine (e.g end the trial)?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   }
  }
 },
 "KeyboardComponent": {
  "__class__": "psychopy.experiment.components.keyboard:KeyboardComponent",
  "__name__": "KeyboardComponent",
  "categories": [
   "Responses"
  ],
  "targets": [
   "PsychoPy",
   "PsychoJS"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\keyboard\\keyboard.png",
  "tooltip": "Keyboard: check and record keypresses",
  "version": "0.0.0",
  "beta": false,
  "validatorClasses": [],
  "hidden": false,
  "params": {
   "name": {
    "val": "key_resp",
    "valType": "code",
    "inputType": "name",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Name",
    "hint": "Name of this Component (alphanumeric or _, no spaces)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startVal": {
    "val": 0.0,
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Start",
    "hint": "When does the Component start?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startEstim": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Expected start (s)",
    "hint": "(Optional) expected start (s), purely for representing in the timeline",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startType": {
    "val": "time (s)",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "time (s)",
     "frame N",
     "condition"
    ],
    "allowedLabels": [],
    "label": "Start type",
    "hint": "How do you want to define your start point?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "stopVal": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": [],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Stop",
    "hint": "When does the Component end? (blank is endless)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "durationEstim": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Expected duration (s)",
    "hint": "(Optional) expected duration (s), purely for representing in the timeline",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "stopType": {
    "val": "duration (s)",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "duration (s)",
     "duration (frames)",
     "time (s)",
     "frame N",
     "condition"
    ],
    "allowedLabels": [],
    "label": "Stop type",
    "hint": "How do you want to define your end point?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "forceEndRoutine": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Force end of Routine",
    "hint": "Should a response force the end of the Routine (e.g end the trial)?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "registerOn": {
    "val": "press",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [
     "press",
     "release"
    ],
    "allowedLabels": [],
    "label": "Register keypress on...",
    "hint": "When should the keypress be registered? As soon as pressed, or when released?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "allowedKeys": {
    "val": "'y','n','left','right','space'",
    "valType": "list",
    "inputType": "single",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Allowed keys",
    "hint": "A comma-separated list of keys (with quotes), such as 'q','right','space','left'",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "store": {
    "val": "last key",
    "valType": "str",
    "inputType": "choice",
    "categ": "Data",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [
     "last key",
     "first key",
     "all keys",
     "nothing"
    ],
    "allowedLabels": [],
    "label": "Store",
    "hint": "Choose which (if any) responses to store at the end of a trial",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "storeCorrect": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Store correct",
    "hint": "Do you want to save the response as correct/incorrect?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "correctAns": {
    "val": "",
    "valType": "str",
    "inputType": "single",
    "categ": "Data",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Correct answer",
    "hint": "What is the 'correct' key? Might be helpful to add a correctAns column and use $correctAns to compare to the key press.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": [
      {
       "param": "storeCorrect",
       "condition": "== True"
      }
     ]
    }
   },
   "saveStartStop": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Save onset/offset times",
    "hint": "Store the onset/offset times in the data file (as well as in the log file).",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "syncScreenRefresh": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Sync timing with screen",
    "hint": "A reaction time to a visual stimulus should be based on when the screen flipped",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "disabled": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Disable Component",
    "hint": "Disable this Component",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "discard previous": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Discard previous",
    "hint": "Do you want to discard all responses occurring before the onset of this Component?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   }
  }
 },
 "MicrophoneComponent": {
  "__class__": "psychopy.experiment.components.microphone:MicrophoneComponent",
  "__name__": "MicrophoneComponent",
  "categories": [
   "Responses"
  ],
  "targets": [
   "PsychoPy",
   "PsychoJS"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\microphone\\microphone.png",
  "tooltip": "Microphone: basic sound capture (fixed onset & duration), okay for spoken words",
  "version": "2021.2.0",
  "beta": false,
  "validatorClasses": [],
  "hidden": false,
  "params": {
   "name": {
    "val": "mic",
    "valType": "code",
    "inputType": "name",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Name",
    "hint": "Name of this Component (alphanumeric or _, no spaces)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startVal": {
    "val": 0.0,
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Start",
    "hint": "When does the Component start?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startEstim": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Expected start (s)",
    "hint": "(Optional) expected start (s), purely for representing in the timeline",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startType": {
    "val": "time (s)",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "time (s)",
     "frame N",
     "condition"
    ],
    "allowedLabels": [],
    "label": "Start type",
    "hint": "How do you want to define your start point?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "stopVal": {
    "val": 2.0,
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": [],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Stop",
    "hint": "When does the Component end? (blank is endless)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "durationEstim": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Expected duration (s)",
    "hint": "(Optional) expected duration (s), purely for representing in the timeline",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "stopType": {
    "val": "duration (s)",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "duration (s)"
    ],
    "allowedLabels": [],
    "label": "Stop type",
    "hint": "The duration of the recording in seconds; blank = 0 sec",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "deviceLabel": {
    "val": "",
    "valType": "device",
    "inputType": "device",
    "categ": "Device",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": "python:///psychopy.experiment.devices:DeviceMixin.addDeviceParams.<locals>.getValues",
    "allowedLabels": "python:///psychopy.experiment.devices:DeviceMixin.addDeviceParams.<locals>.getLabels",
    "label": "Device",
    "hint": "The named device from Device Manager to use for this Component.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "transcribe": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Transcription",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Transcribe audio",
    "hint": "Whether to transcribe the audio recording and store the transcription",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "transcribeBackend": {
    "val": "none",
    "valType": "code",
    "inputType": "choice",
    "categ": "Transcription",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "none",
     "google"
    ],
    "allowedLabels": [
     "None",
     "Google"
    ],
    "label": "Transcription backend",
    "hint": "What transcription service to use to transcribe audio?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": [
      {
       "param": "transcribe",
       "condition": "==True"
      }
     ]
    }
   },
   "transcribeLang": {
    "val": "en-US",
    "valType": "str",
    "inputType": "single",
    "categ": "Transcription",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Transcription language",
    "hint": "What language you expect the recording to be spoken in, e.g. en-US for English",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "transcribeBackend",
       "condition": "=='google'"
      }
     ],
     "enabled": [
      {
       "param": "transcribe",
       "condition": "==True"
      }
     ]
    }
   },
   "transcribeWords": {
    "val": "",
    "valType": "list",
    "inputType": "single",
    "categ": "Transcription",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Expected words",
    "hint": "Set list of words to listen for - if blank will listen for all words in chosen language. \n\nIf using the built-in transcriber, you can set a minimum % confidence level using a colon after the word, e.g. 'red:100', 'green:80'. Otherwise, default confidence level is 80%.",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "transcribeBackend",
       "condition": "=='google'"
      }
     ],
     "enabled": [
      {
       "param": "transcribe",
       "condition": "==True"
      }
     ]
    }
   },
   "saveStartStop": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Save onset/offset times",
    "hint": "Store the onset/offset times in the data file (as well as in the log file).",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "syncScreenRefresh": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Sync timing with screen refresh",
    "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "disabled": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Disable Component",
    "hint": "Disable this Component",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "outputType": {
    "val": "default",
    "valType": "code",
    "inputType": "choice",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "default",
     "aiff",
     "au",
     "avr",
     "caf",
     "flac",
     "htk",
     "svx",
     "mat4",
     "mat5",
     "mpc2k",
     "mp3",
     "ogg",
     "paf",
     "pvf",
     "raw",
     "rf64",
     "sd2",
     "sds",
     "ircam",
     "voc",
     "w64",
     "wav",
     "nist",
     "wavex",
     "wve",
     "xi"
    ],
    "allowedLabels": [],
    "label": "Output file type",
    "hint": "What file type should output audio files be saved as?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "policyWhenFull": {
    "val": "warn",
    "valType": "str",
    "inputType": "choice",
    "categ": "Data",
    "updates": "set every repeat",
    "allowedUpdates": null,
    "allowedVals": [
     "warn",
     "roll",
     "error"
    ],
    "allowedLabels": [
     "Discard incoming data",
     "Clear oldest data",
     "Raise error"
    ],
    "label": "Full buffer policy",
    "hint": "What to do when we reach the max amount of audio data which can be safely stored in memory?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "speakTimes": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Transcription",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Speaking start / stop times",
    "hint": "Tick this to save times when the participant starts and stops speaking",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "transcribeBackend",
       "condition": "=='Whisper'"
      }
     ],
     "enabled": [
      {
       "param": "transcribe",
       "condition": "==True"
      }
     ]
    }
   },
   "trimSilent": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Trim silent",
    "hint": "Trim periods of silence from the output file",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "transcribeWhisperModel": {
    "val": "base",
    "valType": "code",
    "inputType": "choice",
    "categ": "Transcription",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "tiny",
     "base",
     "small",
     "medium",
     "large",
     "tiny.en",
     "base.en",
     "small.en",
     "medium.en"
    ],
    "allowedLabels": [],
    "label": "Whisper model",
    "hint": "Which model of Whisper AI should be used for transcription? Details of each model are available here at github.com/openai/whisper",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "transcribeBackend",
       "condition": "=='Whisper'"
      }
     ],
     "enabled": [
      {
       "param": "transcribe",
       "condition": "==True"
      }
     ]
    }
   },
   "transcribeWhisperDevice": {
    "val": "auto",
    "valType": "code",
    "inputType": "choice",
    "categ": "Transcription",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "auto",
     "gpu",
     "cpu"
    ],
    "allowedLabels": [],
    "label": "Whisper device",
    "hint": "Which device to use for transcription?",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "transcribeBackend",
       "condition": "=='Whisper'"
      }
     ],
     "enabled": [
      {
       "param": "transcribe",
       "condition": "==True"
      }
     ]
    }
   }
  }
 },
 "MouseComponent": {
  "__class__": "psychopy.experiment.components.mouse:MouseComponent",
  "__name__": "MouseComponent",
  "categories": [
   "Responses"
  ],
  "targets": [
   "PsychoPy",
   "PsychoJS"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\mouse\\mouse.png",
  "tooltip": "Mouse: query mouse position and buttons",
  "version": "0.0.0",
  "beta": false,
  "validatorClasses": [],
  "hidden": false,
  "params": {
   "name": {
    "val": "mouse",
    "valType": "code",
    "inputType": "name",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Name",
    "hint": "Name of this Component (alphanumeric or _, no spaces)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startVal": {
    "val": 0.0,
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Start",
    "hint": "When does the Component start?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startEstim": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Expected start (s)",
    "hint": "(Optional) expected start (s), purely for representing in the timeline",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startType": {
    "val": "time (s)",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "time (s)",
     "frame N",
     "condition"
    ],
    "allowedLabels": [],
    "label": "Start type",
    "hint": "How do you want to define your start point?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "stopVal": {
    "val": 1.0,
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": [],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Stop",
    "hint": "When does the Component end? (blank is endless)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "durationEstim": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Expected duration (s)",
    "hint": "(Optional) expected duration (s), purely for representing in the timeline",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "stopType": {
    "val": "duration (s)",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "duration (s)",
     "duration (frames)",
     "time (s)",
     "frame N",
     "condition"
    ],
    "allowedLabels": [],
    "label": "Stop type",
    "hint": "How do you want to define your end point?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "forceEndRoutineOnPress": {
    "val": "any click",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [
     "never",
     "any click",
     "valid click",
     "correct click"
    ],
    "allowedLabels": [],
    "label": "End Routine on press",
    "hint": "Should a button press force the end of the Routine (e.g end the trial)?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "saveMouseState": {
    "val": "on click",
    "valType": "str",
    "inputType": "choice",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "final",
     "on click",
     "on valid click",
     "every frame",
     "never"
    ],
    "allowedLabels": [],
    "label": "Save mouse state",
    "hint": "How often should the mouse state (x,y,buttons) be stored? On every video frame, every click or just at the end of the Routine?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "timeRelativeTo": {
    "val": "mouse onset",
    "valType": "str",
    "inputType": "choice",
    "categ": "Data",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [
     "mouse onset",
     "experiment",
     "routine"
    ],
    "allowedLabels": [],
    "label": "Time relative to",
    "hint": "What should the values of mouse.time should be relative to?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "newClicksOnly": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "New clicks only",
    "hint": "If the mouse button is already down when we start checking then wait for it to be released before recording as a new click.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "clickable": {
    "val": "",
    "valType": "list",
    "inputType": "single",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Clickable stimuli",
    "hint": "A comma-separated list of your stimulus names that can be \"clicked\" by the participant. e.g. target, foil",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "saveParamsClickable": {
    "val": "name,",
    "valType": "list",
    "inputType": "single",
    "categ": "Data",
    "updates": "constant",
    "allowedUpdates": [],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Store params for clicked",
    "hint": "The params (e.g. name, text), for which you want to store the current value, for the stimulus that was\"clicked\" by the mouse. Make sure that all the clickable objects have all these params.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "saveStartStop": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Save onset/offset times",
    "hint": "Store the onset/offset times in the data file (as well as in the log file).",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "syncScreenRefresh": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Sync timing with screen refresh",
    "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "disabled": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Disable Component",
    "hint": "Disable this Component",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "storeCorrect": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Store correct",
    "hint": "Do you want to save the response as correct/incorrect?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "correctAns": {
    "val": "",
    "valType": "list",
    "inputType": "single",
    "categ": "Data",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Correct answer",
    "hint": "What is the 'correct' object? To specify an area, remember that you can create a shape Component with 0 opacity.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": [
      {
       "param": "storeCorrect",
       "condition": "== True"
      }
     ]
    }
   }
  }
 },
 "MovieComponent": {
  "__class__": "psychopy.experiment.components.movie:MovieComponent",
  "__name__": "MovieComponent",
  "categories": [
   "Stimuli"
  ],
  "targets": [
   "PsychoPy",
   "PsychoJS"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\movie\\movie.png",
  "tooltip": "Movie: play movie files",
  "version": "0.0.0",
  "beta": false,
  "validatorClasses": [
   "VisualValidatorRoutine"
  ],
  "hidden": false,
  "params": {
   "name": {
    "val": "movie",
    "valType": "code",
    "inputType": "name",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Name",
    "hint": "Name of this Component (alphanumeric or _, no spaces)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startVal": {
    "val": 0.0,
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Start",
    "hint": "When does the Component start?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startEstim": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Expected start (s)",
    "hint": "(Optional) expected start (s), purely for representing in the timeline",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startType": {
    "val": "time (s)",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "time (s)",
     "frame N",
     "condition"
    ],
    "allowedLabels": [],
    "label": "Start type",
    "hint": "How do you want to define your start point?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "stopVal": {
    "val": 1.0,
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": [],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Stop",
    "hint": "When does the Component end? (blank to use the duration of the media)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "durationEstim": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Expected duration (s)",
    "hint": "(Optional) expected duration (s), purely for representing in the timeline",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "stopType": {
    "val": "duration (s)",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "duration (s)",
     "duration (frames)",
     "time (s)",
     "frame N",
     "condition"
    ],
    "allowedLabels": [],
    "label": "Stop type",
    "hint": "How do you want to define your end point?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "opacity": {
    "val": "",
    "valType": "num",
    "inputType": "single",
    "categ": "Appearance",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Opacity",
    "hint": "Opacity of the stimulus (1=opaque, 0=fully transparent, 0.5=translucent). Leave blank for each color to have its own opacity (recommended if any color is None).",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "size": {
    "val": [
     0.5,
     0.5
    ],
    "valType": "list",
    "inputType": "single",
    "categ": "Layout",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Size [w,h]",
    "hint": "Size of this stimulus (either a single value or x,y pair, e.g. 2.5, [1,2] ",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "pos": {
    "val": [
     0,
     0
    ],
    "valType": "list",
    "inputType": "single",
    "categ": "Layout",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Position [x,y]",
    "hint": "Position of this stimulus (e.g. [1,2] )",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "units": {
    "val": "from exp settings",
    "valType": "str",
    "inputType": "choice",
    "categ": "Layout",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "from exp settings",
     "deg",
     "cm",
     "pix",
     "norm",
     "height",
     "degFlatPos",
     "degFlat"
    ],
    "allowedLabels": [],
    "label": "Spatial units",
    "hint": "Units of dimensions for this stimulus",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "anchor": {
    "val": "center",
    "valType": "str",
    "inputType": "choice",
    "categ": "Layout",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [
     "center",
     "top-center",
     "bottom-center",
     "center-left",
     "center-right",
     "top-left",
     "top-right",
     "bottom-left",
     "bottom-right"
    ],
    "allowedLabels": [],
    "label": "Anchor",
    "hint": "Which point on the stimulus should be anchored to its exact position?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "ori": {
    "val": 0,
    "valType": "num",
    "inputType": "spin",
    "categ": "Layout",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [
     -360,
     360
    ],
    "allowedLabels": [],
    "label": "Orientation",
    "hint": "Orientation of this stimulus (in deg)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "movie": {
    "val": "",
    "valType": "file",
    "inputType": "file",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Movie file",
    "hint": "A filename for the movie (including path)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "forceEndRoutine": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": [],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Force end of Routine",
    "hint": "Should the end of the movie cause the end of the Routine (e.g. trial)?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "loop": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Playback",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Loop playback",
    "hint": "Whether the movie should loop back to the beginning on completion.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "No audio": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Playback",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "No audio",
    "hint": "Prevent the audio stream from being loaded/processed (moviepy and opencv only)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "backend": {
    "val": "ffpyplayer",
    "valType": "str",
    "inputType": "choice",
    "categ": "Playback",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "ffpyplayer",
     "moviepy",
     "opencv",
     "vlc"
    ],
    "allowedLabels": [],
    "label": "Backend",
    "hint": "What underlying lib to use for loading movies",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "saveStartStop": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Save onset/offset times",
    "hint": "Store the onset/offset times in the data file (as well as in the log file).",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "syncScreenRefresh": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Sync timing with screen refresh",
    "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "disabled": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Disable Component",
    "hint": "Disable this Component",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "contrast": {
    "val": 1,
    "valType": "num",
    "inputType": "single",
    "categ": "Appearance",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Contrast",
    "hint": "Contrast of the stimulus (1.0=unchanged contrast, 0.5=decrease contrast, 0.0=uniform/no contrast, -0.5=slightly inverted, -1.0=totally inverted)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "validator": {
    "val": "",
    "valType": "code",
    "inputType": "choice",
    "categ": "Testing",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": "python:///psychopy.experiment.components._base:BaseComponent.getAllValidatorRoutineVals",
    "allowedLabels": "python:///psychopy.experiment.components._base:BaseComponent.getAllValidatorRoutineLabels",
    "label": "Validate with...",
    "hint": "Name of validator Component/Routine to use to check the timing of this stimulus.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "volume": {
    "val": 1,
    "valType": "num",
    "inputType": "single",
    "categ": "Playback",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Volume",
    "hint": "How loud should audio be played?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "stopWithRoutine": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Playback",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Stop with Routine?",
    "hint": "Should playback cease when the Routine ends? Untick to continue playing after the Routine has finished.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   }
  }
 },
 "PanoramaComponent": {
  "__class__": "psychopy.experiment.components.panorama:PanoramaComponent",
  "__name__": "PanoramaComponent",
  "categories": [
   "Stimuli"
  ],
  "targets": [
   "PsychoPy"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\panorama\\panorama.png",
  "tooltip": "Panorama: Present a panoramic image (such as from a phone camera in Panorama mode) on screen.",
  "version": "2023.1.0",
  "beta": true,
  "validatorClasses": [
   "VisualValidatorRoutine"
  ],
  "hidden": false,
  "params": {
   "name": {
    "val": "pan",
    "valType": "code",
    "inputType": "name",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Name",
    "hint": "Name of this Component (alphanumeric or _, no spaces)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startVal": {
    "val": 0,
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Start",
    "hint": "When does the Component start?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startEstim": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Expected start (s)",
    "hint": "(Optional) expected start (s), purely for representing in the timeline",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startType": {
    "val": "time (s)",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "time (s)",
     "frame N",
     "condition"
    ],
    "allowedLabels": [],
    "label": "Start type",
    "hint": "How do you want to define your start point?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "stopVal": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": [],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Stop",
    "hint": "When does the Component end? (blank is endless)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "durationEstim": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Expected duration (s)",
    "hint": "(Optional) expected duration (s), purely for representing in the timeline",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "stopType": {
    "val": "duration (s)",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "duration (s)",
     "duration (frames)",
     "time (s)",
     "frame N",
     "condition"
    ],
    "allowedLabels": [],
    "label": "Stop type",
    "hint": "How do you want to define your end point?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "image": {
    "val": "",
    "valType": "file",
    "inputType": "file",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Image",
    "hint": "The image to be displayed - a filename, including path",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "posCtrl": {
    "val": "mouse",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [
     "mouse",
     "drag",
     "arrows",
     "wasd",
     "keymap",
     "custom"
    ],
    "allowedLabels": [
     "Mouse",
     "Drag",
     "Keyboard (Arrow Keys)",
     "Keyboard (WASD)",
     "Keyboard (Custom keys)",
     "Custom"
    ],
    "label": "Position control",
    "hint": "How to control looking around the panorama scene",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "azimuth": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Azimuth",
    "hint": "Horizontal look position, ranging from -1 (fully left) to 1 (fully right)",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "posCtrl",
       "condition": "=='custom'"
      }
     ],
     "enabled": []
    }
   },
   "elevation": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Elevation",
    "hint": "Vertical look position, ranging from -1 (fully down) to 1 (fully up)",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "posCtrl",
       "condition": "=='custom'"
      }
     ],
     "enabled": []
    }
   },
   "upKey": {
    "val": "w",
    "valType": "str",
    "inputType": "single",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Up",
    "hint": "What key corresponds to the view action 'Up'?",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "posCtrl",
       "condition": "=='keymap'"
      }
     ],
     "enabled": []
    }
   },
   "leftKey": {
    "val": "a",
    "valType": "str",
    "inputType": "single",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Left",
    "hint": "What key corresponds to the view action 'Left'?",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "posCtrl",
       "condition": "=='keymap'"
      }
     ],
     "enabled": []
    }
   },
   "downKey": {
    "val": "s",
    "valType": "str",
    "inputType": "single",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Down",
    "hint": "What key corresponds to the view action 'Down'?",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "posCtrl",
       "condition": "=='keymap'"
      }
     ],
     "enabled": []
    }
   },
   "rightKey": {
    "val": "d",
    "valType": "str",
    "inputType": "single",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Right",
    "hint": "What key corresponds to the view action 'Right'?",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "posCtrl",
       "condition": "=='keymap'"
      }
     ],
     "enabled": []
    }
   },
   "stopKey": {
    "val": "space",
    "valType": "str",
    "inputType": "single",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Stop",
    "hint": "What key corresponds to the view action 'Stop'?",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "posCtrl",
       "condition": "=='keymap'"
      }
     ],
     "enabled": []
    }
   },
   "posSensitivity": {
    "val": 1,
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Movement sensitivity",
    "hint": "Multiplier to apply to view changes. 1 means that moving the mouse from the center of the screen to the edge or holding down a key for 2s will rotate 180\u00b0.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "smooth": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Smooth?",
    "hint": "Should movement be smoothed, so the view keeps moving a little after a change?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "zoomCtrl": {
    "val": "wheel",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [
     "wheel",
     "invwheel",
     "arrows",
     "plusmin",
     "keymap",
     "custom"
    ],
    "allowedLabels": [
     "Mouse Wheel",
     "Mouse Wheel (Inverted)",
     "Keyboard (Arrow Keys)",
     "Keyboard (+-)",
     "Keyboard (Custom keys)",
     "Custom"
    ],
    "label": "Zoom control",
    "hint": "How to control zooming in and out of the panorama scene",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "zoom": {
    "val": 1,
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Zoom",
    "hint": "How zoomed in the scene is, with 1 being no adjustment.",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "zoomCtrl",
       "condition": "=='custom'"
      }
     ],
     "enabled": []
    }
   },
   "inKey": {
    "val": "up",
    "valType": "str",
    "inputType": "single",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Zoom in",
    "hint": "What key corresponds to the view action 'Zoom in'?",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "zoomCtrl",
       "condition": "=='keymap'"
      }
     ],
     "enabled": []
    }
   },
   "outKey": {
    "val": "down",
    "valType": "str",
    "inputType": "single",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Zoom out",
    "hint": "What key corresponds to the view action 'Zoom out'?",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "zoomCtrl",
       "condition": "=='keymap'"
      }
     ],
     "enabled": []
    }
   },
   "zoomSensitivity": {
    "val": 1,
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Zoom sensitivity",
    "hint": "Multiplier to apply to zoom changes. 1 means that pressing the zoom in key for 1s or scrolling the mouse wheel 100% zooms in 100%.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "saveStartStop": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Save onset/offset times",
    "hint": "Store the onset/offset times in the data file (as well as in the log file).",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "syncScreenRefresh": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Sync timing with screen refresh",
    "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "disabled": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Disable Component",
    "hint": "Disable this Component",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "validator": {
    "val": "",
    "valType": "code",
    "inputType": "choice",
    "categ": "Testing",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": "python:///psychopy.experiment.components._base:BaseComponent.getAllValidatorRoutineVals",
    "allowedLabels": "python:///psychopy.experiment.components._base:BaseComponent.getAllValidatorRoutineLabels",
    "label": "Validate with...",
    "hint": "Name of validator Component/Routine to use to check the timing of this stimulus.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "interpolate": {
    "val": "linear",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": [],
    "allowedVals": [
     "linear",
     "nearest"
    ],
    "allowedLabels": [],
    "label": "Interpolate",
    "hint": "How should the image be interpolated if/when rescaled",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   }
  }
 },
 "ParallelOutComponent": {
  "__class__": "psychopy.experiment.components.parallelOut:ParallelOutComponent",
  "__name__": "ParallelOutComponent",
  "categories": [
   "I/O",
   "EEG"
  ],
  "targets": [
   "PsychoPy"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\parallelOut\\parallel.png",
  "tooltip": "Parallel out: send signals from the parallel port",
  "version": "0.0.0",
  "beta": false,
  "validatorClasses": [],
  "hidden": false,
  "params": {
   "name": {
    "val": "p_port",
    "valType": "code",
    "inputType": "name",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Name",
    "hint": "Name of this Component (alphanumeric or _, no spaces)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startVal": {
    "val": 0.0,
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Start",
    "hint": "When does the Component start?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startEstim": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Expected start (s)",
    "hint": "(Optional) expected start (s), purely for representing in the timeline",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startType": {
    "val": "time (s)",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "time (s)",
     "frame N",
     "condition"
    ],
    "allowedLabels": [],
    "label": "Start type",
    "hint": "How do you want to define your start point?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "stopVal": {
    "val": 1.0,
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": [],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Stop",
    "hint": "When does the Component end? (blank is endless)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "durationEstim": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Expected duration (s)",
    "hint": "(Optional) expected duration (s), purely for representing in the timeline",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "stopType": {
    "val": "duration (s)",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "duration (s)",
     "duration (frames)",
     "time (s)",
     "frame N",
     "condition"
    ],
    "allowedLabels": [],
    "label": "Stop type",
    "hint": "How do you want to define your end point?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startData": {
    "val": "1",
    "valType": "code",
    "inputType": "single",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Start data",
    "hint": "Data to be sent at 'start'",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "stopData": {
    "val": "0",
    "valType": "code",
    "inputType": "single",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Stop data",
    "hint": "Data to be sent at 'end'",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "address": {
    "val": "0x0378",
    "valType": "str",
    "inputType": "choice",
    "categ": "Device",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "0x0378",
     "0x03BC",
     "LabJack U3",
     "USB2TTL8"
    ],
    "allowedLabels": [],
    "label": "Port address",
    "hint": "Parallel port to be used (you can change these options in preferences>general)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "register": {
    "val": "EIO",
    "valType": "str",
    "inputType": "choice",
    "categ": "Device",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "EIO",
     "FIO"
    ],
    "allowedLabels": [],
    "label": "U3 register",
    "hint": "U3 Register to write byte to",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "address",
       "condition": "=='LabJack U3'"
      }
     ],
     "enabled": []
    }
   },
   "saveStartStop": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Save onset/offset times",
    "hint": "Store the onset/offset times in the data file (as well as in the log file).",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "syncScreenRefresh": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Sync timing with screen refresh",
    "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "disabled": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Disable Component",
    "hint": "Disable this Component",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "syncScreen": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": "constant",
    "allowedUpdates": [],
    "allowedVals": [
     true,
     false
    ],
    "allowedLabels": [],
    "label": "Sync to screen",
    "hint": "If the parallel port data relates to visual stimuli then sync its pulse to the screen refresh",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   }
  }
 },
 "ProgressComponent": {
  "__class__": "psychopy.experiment.components.progress:ProgressComponent",
  "__name__": "ProgressComponent",
  "categories": [
   "Stimuli"
  ],
  "targets": [
   "PsychoPy",
   "PsychoJS"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\progress\\progress.png",
  "tooltip": "Progress: Present a progress bar, with values ranging from 0 to 1.",
  "version": "2023.2.0",
  "beta": true,
  "validatorClasses": [
   "VisualValidatorRoutine"
  ],
  "hidden": false,
  "params": {
   "name": {
    "val": "prog",
    "valType": "code",
    "inputType": "name",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Name",
    "hint": "Name of this Component (alphanumeric or _, no spaces)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startVal": {
    "val": 0,
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Start",
    "hint": "When does the Component start?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startEstim": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Expected start (s)",
    "hint": "(Optional) expected start (s), purely for representing in the timeline",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startType": {
    "val": "time (s)",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "time (s)",
     "frame N",
     "condition"
    ],
    "allowedLabels": [],
    "label": "Start type",
    "hint": "How do you want to define your start point?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "stopVal": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": [],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Stop",
    "hint": "When does the Component end? (blank is endless)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "durationEstim": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Expected duration (s)",
    "hint": "(Optional) expected duration (s), purely for representing in the timeline",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "stopType": {
    "val": "duration (s)",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "duration (s)",
     "duration (frames)",
     "time (s)",
     "frame N",
     "condition"
    ],
    "allowedLabels": [],
    "label": "Stop type",
    "hint": "How do you want to define your end point?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "color": {
    "val": "white",
    "valType": "color",
    "inputType": "color",
    "categ": "Appearance",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Bar color",
    "hint": "Color of the filled part of the progress bar.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "fillColor": {
    "val": "None",
    "valType": "color",
    "inputType": "color",
    "categ": "Appearance",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Back color",
    "hint": "Color of the empty part of the progress bar.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "borderColor": {
    "val": "white",
    "valType": "color",
    "inputType": "color",
    "categ": "Appearance",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Border color",
    "hint": "Color of the line around the progress bar.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "colorSpace": {
    "val": "rgb",
    "valType": "str",
    "inputType": "choice",
    "categ": "Appearance",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [
     "rgb",
     "dkl",
     "lms",
     "hsv"
    ],
    "allowedLabels": [],
    "label": "Color space",
    "hint": "In what format (color space) have you specified the colors? (rgb, dkl, lms, hsv)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "opacity": {
    "val": 1,
    "valType": "num",
    "inputType": "single",
    "categ": "Appearance",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Opacity",
    "hint": "Opacity of the stimulus (1=opaque, 0=fully transparent, 0.5=translucent). Leave blank for each color to have its own opacity (recommended if any color is None).",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "size": {
    "val": [
     0.5,
     0.5
    ],
    "valType": "list",
    "inputType": "single",
    "categ": "Layout",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Size [w,h]",
    "hint": "Size of this stimulus (either a single value or x,y pair, e.g. 2.5, [1,2] ",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "pos": {
    "val": [
     0,
     0
    ],
    "valType": "list",
    "inputType": "single",
    "categ": "Layout",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Position [x,y]",
    "hint": "Position of this stimulus (e.g. [1,2] )",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "units": {
    "val": "height",
    "valType": "str",
    "inputType": "choice",
    "categ": "Layout",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "from exp settings",
     "deg",
     "cm",
     "pix",
     "norm",
     "height",
     "degFlatPos",
     "degFlat"
    ],
    "allowedLabels": [],
    "label": "Spatial units",
    "hint": "Units of dimensions for this stimulus",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "anchor": {
    "val": "center-left",
    "valType": "str",
    "inputType": "choice",
    "categ": "Layout",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [
     "center",
     "top-center",
     "bottom-center",
     "center-left",
     "center-right",
     "top-left",
     "top-right",
     "bottom-left",
     "bottom-right"
    ],
    "allowedLabels": [],
    "label": "Anchor",
    "hint": "Which point on the stimulus should be anchored to its exact position?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "ori": {
    "val": 0,
    "valType": "num",
    "inputType": "spin",
    "categ": "Layout",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [
     -360,
     360
    ],
    "allowedLabels": [],
    "label": "Orientation",
    "hint": "Orientation of this stimulus (in deg)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "saveStartStop": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Save onset/offset times",
    "hint": "Store the onset/offset times in the data file (as well as in the log file).",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "syncScreenRefresh": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Sync timing with screen refresh",
    "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "disabled": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Disable Component",
    "hint": "Disable this Component",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "contrast": {
    "val": 1,
    "valType": "num",
    "inputType": "single",
    "categ": "Appearance",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Contrast",
    "hint": "Contrast of the stimulus (1.0=unchanged contrast, 0.5=decrease contrast, 0.0=uniform/no contrast, -0.5=slightly inverted, -1.0=totally inverted)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "validator": {
    "val": "",
    "valType": "code",
    "inputType": "choice",
    "categ": "Testing",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": "python:///psychopy.experiment.components._base:BaseComponent.getAllValidatorRoutineVals",
    "allowedLabels": "python:///psychopy.experiment.components._base:BaseComponent.getAllValidatorRoutineLabels",
    "label": "Validate with...",
    "hint": "Name of validator Component/Routine to use to check the timing of this stimulus.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "progress": {
    "val": 0,
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Progress",
    "hint": "Value between 0 (not started) and 1 (complete) to set the progress bar to.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "lineWidth": {
    "val": 4,
    "valType": "num",
    "inputType": "single",
    "categ": "Appearance",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Line width",
    "hint": "Width of the shape's line (always in pixels - this does NOT use 'units')",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   }
  }
 },
 "ResourceManagerComponent": {
  "__class__": "psychopy.experiment.components.resourceManager:ResourceManagerComponent",
  "__name__": "ResourceManagerComponent",
  "categories": [
   "Custom"
  ],
  "targets": [
   "PsychoJS"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\resourceManager\\resource_manager.png",
  "tooltip": "Pre-load some resources into memory so that components using them can start without having to load first",
  "version": "0.0.0",
  "beta": true,
  "validatorClasses": [],
  "hidden": false,
  "params": {
   "name": {
    "val": "resources",
    "valType": "code",
    "inputType": "name",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Name",
    "hint": "Name of this Component (alphanumeric or _, no spaces)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startVal": {
    "val": 0,
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Start",
    "hint": "When does the Component start?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startEstim": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Expected start (s)",
    "hint": "(Optional) expected start (s), purely for representing in the timeline",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startType": {
    "val": "time (s)",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "time (s)",
     "frame N",
     "condition"
    ],
    "allowedLabels": [],
    "label": "Start type",
    "hint": "How do you want to define your start point?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "stopVal": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": [],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Check",
    "hint": "When does the Component end? (blank is endless)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "durationEstim": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Expected duration (s)",
    "hint": "(Optional) expected duration (s), purely for representing in the timeline",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "stopType": {
    "val": "duration (s)",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "duration (s)",
     "duration (frames)",
     "time (s)",
     "frame N",
     "condition"
    ],
    "allowedLabels": [],
    "label": "Stop type",
    "hint": "How do you want to define your end point?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "disabled": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Disable Component",
    "hint": "Disable this Component",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "resources": {
    "val": [],
    "valType": "list",
    "inputType": "fileList",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Resources",
    "hint": "Resources to download/check",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "checkAll": {
    "val": [],
    "valType": "bool",
    "inputType": "bool",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Check all",
    "hint": "When checking these resources, also check for all currently downloading?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "actionType": {
    "val": "Start and Check",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "Start and Check",
     "Start Only",
     "Check Only"
    ],
    "allowedLabels": [],
    "label": "Preload actions",
    "hint": "Should this Component start an / or check resource preloading?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "forceEndRoutine": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Force end Routine",
    "hint": "Should we end the Routine when the resource download is complete?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   }
  }
 },
 "RegionOfInterestComponent": {
  "__class__": "psychopy.experiment.components.roi:RegionOfInterestComponent",
  "__name__": "RegionOfInterestComponent",
  "categories": [
   "Eyetracking"
  ],
  "targets": [
   "PsychoPy"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\roi\\eyetracker_roi.png",
  "tooltip": "Region Of Interest: Define a region of interest for use with eyetrackers",
  "version": "2021.2.0",
  "beta": false,
  "validatorClasses": [
   "VisualValidatorRoutine"
  ],
  "hidden": false,
  "params": {
   "name": {
    "val": "roi",
    "valType": "code",
    "inputType": "name",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Name",
    "hint": "Name of this Component (alphanumeric or _, no spaces)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startVal": {
    "val": 0.0,
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Start",
    "hint": "When does the Component start?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startEstim": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Expected start (s)",
    "hint": "(Optional) expected start (s), purely for representing in the timeline",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startType": {
    "val": "time (s)",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "time (s)",
     "frame N",
     "condition"
    ],
    "allowedLabels": [],
    "label": "Start type",
    "hint": "How do you want to define your start point?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "stopVal": {
    "val": 1.0,
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": [],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Stop",
    "hint": "When does the Component end? (blank is endless)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "durationEstim": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Expected duration (s)",
    "hint": "(Optional) expected duration (s), purely for representing in the timeline",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "stopType": {
    "val": "duration (s)",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "duration (s)",
     "duration (frames)",
     "time (s)",
     "frame N",
     "condition"
    ],
    "allowedLabels": [],
    "label": "Stop type",
    "hint": "How do you want to define your end point?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "size": {
    "val": [
     0.5,
     0.5
    ],
    "valType": "list",
    "inputType": "single",
    "categ": "Layout",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Size [w,h]",
    "hint": "Size of this stimulus [w,h]. Note that for a line only the first value is used, for triangle and rect the [w,h] is as expected,\n but for higher-order polygons it represents the [w,h] of the ellipse that the polygon sits on!! ",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "pos": {
    "val": [
     0,
     0
    ],
    "valType": "list",
    "inputType": "single",
    "categ": "Layout",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Position [x,y]",
    "hint": "Position of this stimulus (e.g. [1,2] )",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "units": {
    "val": "from exp settings",
    "valType": "str",
    "inputType": "choice",
    "categ": "Layout",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "from exp settings"
    ],
    "allowedLabels": [],
    "label": "Spatial units",
    "hint": "Units of dimensions for this stimulus",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "anchor": {
    "val": "center",
    "valType": "str",
    "inputType": "choice",
    "categ": "Layout",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [
     "center",
     "top-center",
     "bottom-center",
     "center-left",
     "center-right",
     "top-left",
     "top-right",
     "bottom-left",
     "bottom-right"
    ],
    "allowedLabels": [],
    "label": "Anchor",
    "hint": "Which point on the stimulus should be anchored to its exact position?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "ori": {
    "val": 0,
    "valType": "num",
    "inputType": "spin",
    "categ": "Layout",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [
     -360,
     360
    ],
    "allowedLabels": [],
    "label": "Orientation",
    "hint": "Orientation of this stimulus (in deg)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "shape": {
    "val": "triangle",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "line",
     "triangle",
     "rectangle",
     "circle",
     "cross",
     "star7",
     "arrow",
     "regular polygon...",
     "custom polygon..."
    ],
    "allowedLabels": [
     "Line",
     "Triangle",
     "Rectangle",
     "Circle",
     "Cross",
     "Star",
     "Arrow",
     "Regular polygon...",
     "Custom polygon..."
    ],
    "label": "Shape",
    "hint": "What shape is this? With 'regular polygon...' you can set number of vertices and with 'custom polygon...' you can set vertices",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "nVertices": {
    "val": 4,
    "valType": "int",
    "inputType": "single",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Num. vertices",
    "hint": "How many vertices in your regular polygon?",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "shape",
       "condition": "=='regular polygon...'"
      }
     ],
     "enabled": []
    }
   },
   "saveStartStop": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Save onset/offset times",
    "hint": "Store the onset/offset times in the data file (as well as in the log file).",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "syncScreenRefresh": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Sync timing with screen refresh",
    "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "disabled": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Disable Component",
    "hint": "Disable this Component",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "validator": {
    "val": "",
    "valType": "code",
    "inputType": "choice",
    "categ": "Testing",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": "python:///psychopy.experiment.components._base:BaseComponent.getAllValidatorRoutineVals",
    "allowedLabels": "python:///psychopy.experiment.components._base:BaseComponent.getAllValidatorRoutineLabels",
    "label": "Validate with...",
    "hint": "Name of validator Component/Routine to use to check the timing of this stimulus.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "vertices": {
    "val": "",
    "valType": "list",
    "inputType": "single",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Vertices",
    "hint": "What are the vertices of your polygon? Should be an nx2 array or a list of [x, y] lists",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "shape",
       "condition": "=='custom polygon...'"
      }
     ],
     "enabled": []
    }
   },
   "draggable": {
    "val": false,
    "valType": "code",
    "inputType": "bool",
    "categ": "Layout",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Draggable?",
    "hint": "Should this stimulus be moveble by clicking and dragging?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "endRoutineOn": {
    "val": "none",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "look at",
     "look away",
     "none"
    ],
    "allowedLabels": [],
    "label": "End Routine on...",
    "hint": "Under what condition should this ROI end the Routine?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "lookDur": {
    "val": 0.1,
    "valType": "num",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Min. look time",
    "hint": "Minimum dwell time within roi (look at) or outside roi (look away).",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "debug": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Testing",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Debug mode",
    "hint": "In debug mode, the ROI is drawn in red. Use this to see what area of the screen is in the ROI.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "save": {
    "val": "every look",
    "valType": "str",
    "inputType": "choice",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "first look",
     "last look",
     "every look",
     "none"
    ],
    "allowedLabels": [],
    "label": "Save...",
    "hint": "What looks on this ROI should be saved to the data output?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "timeRelativeTo": {
    "val": "roi onset",
    "valType": "str",
    "inputType": "choice",
    "categ": "Data",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [
     "roi onset",
     "experiment",
     "routine"
    ],
    "allowedLabels": [],
    "label": "Time relative to...",
    "hint": "What should the values of roi.time should be relative to?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   }
  }
 },
 "RoutineSettingsComponent": {
  "__class__": "psychopy.experiment.components.routineSettings:RoutineSettingsComponent",
  "__name__": "RoutineSettingsComponent",
  "categories": [
   "Other"
  ],
  "targets": [
   "PsychoPy",
   "PsychoJS"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\routineSettings\\routineSettings.png",
  "tooltip": "Settings for this Routine.",
  "version": "2023.2.0",
  "beta": false,
  "validatorClasses": [],
  "hidden": true,
  "params": {
   "name": {
    "val": "",
    "valType": "code",
    "inputType": "name",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Name",
    "hint": "Name of this Component (alphanumeric or _, no spaces)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "stopVal": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Flow",
    "updates": "constant",
    "allowedUpdates": [],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Timeout",
    "hint": "When should this Routine end, if not already ended by a Component? Leave blank for endless.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "durationEstim": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Flow",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Expected duration (s)",
    "hint": "(Optional) expected duration (s), purely for representing in the timeline",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "stopType": {
    "val": "duration (s)",
    "valType": "str",
    "inputType": "choice",
    "categ": "Flow",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "duration (s)",
     "frame N",
     "condition"
    ],
    "allowedLabels": [],
    "label": "Stop type",
    "hint": "When should this Routine end, if not already ended by a Component?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "forceNonSlip": {
    "val": false,
    "valType": "code",
    "inputType": "bool",
    "categ": "Flow",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Non-slip timing",
    "hint": "If this Routine ended by hitting its max duration, reset the timer by subtracting the max duration rather than resetting to 0. Only tick this if you're sure you know how long the Routine is going to take, otherwise you'll get incorrect timestamps in the next Routine!",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "skipIf": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Flow",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Skip if...",
    "hint": "Skip this Routine if the value in this contorl evaluates to True. Leave blank to not skip.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "useWindowParams": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Window",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Different window settings?",
    "hint": "Should the appearance of the window change while this Routine is running?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "color": {
    "val": "$[0,0,0]",
    "valType": "color",
    "inputType": "color",
    "categ": "Window",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Background color",
    "hint": "Color of the screen this Routine (e.g. black, $[1.0,1.0,1.0], $variable. Right-click to bring up a color-picker.)",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "useWindowParams",
       "condition": ""
      }
     ],
     "enabled": []
    }
   },
   "colorSpace": {
    "val": "rgb",
    "valType": "str",
    "inputType": "choice",
    "categ": "Window",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "rgb",
     "dkl",
     "lms",
     "hsv",
     "hex"
    ],
    "allowedLabels": [],
    "label": "Color space",
    "hint": "Needed if color is defined numerically (see PsychoPy documentation on color spaces)",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "useWindowParams",
       "condition": ""
      }
     ],
     "enabled": []
    }
   },
   "backgroundImg": {
    "val": "",
    "valType": "str",
    "inputType": "file",
    "categ": "Window",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Background image",
    "hint": "Image file to use as a background (leave blank for no image)",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "useWindowParams",
       "condition": ""
      }
     ],
     "enabled": []
    }
   },
   "backgroundFit": {
    "val": "none",
    "valType": "str",
    "inputType": "choice",
    "categ": "Window",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "none",
     "cover",
     "contain",
     "fill",
     "scale-down"
    ],
    "allowedLabels": [],
    "label": "Background fit",
    "hint": "How should the background image scale to fit the window size?",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "useWindowParams",
       "condition": ""
      }
     ],
     "enabled": []
    }
   },
   "saveStartStop": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Save onset/offset times",
    "hint": "Save the start and stop times of this Routine (according to the global clock) to the data file.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "disabled": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Disable Routine",
    "hint": "Disable this Component",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "desc": {
    "val": "",
    "valType": "str",
    "inputType": "multi",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Description",
    "hint": "Some descriptive text to give information about this Routine. This won't affect how it runs, it's purely for your own reference!",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   }
  }
 },
 "SerialOutComponent": {
  "__class__": "psychopy.experiment.components.serialOut:SerialOutComponent",
  "__name__": "SerialOutComponent",
  "categories": [
   "I/O",
   "EEG"
  ],
  "targets": [
   "PsychoPy"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\serialOut\\serial.png",
  "tooltip": "Serial out: send signals from a serial port",
  "version": "2022.2.0",
  "beta": false,
  "validatorClasses": [],
  "hidden": false,
  "params": {
   "name": {
    "val": "serialPort",
    "valType": "code",
    "inputType": "name",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Name",
    "hint": "Name of this Component (alphanumeric or _, no spaces)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startVal": {
    "val": 0.0,
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Start",
    "hint": "When does the Component start?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startEstim": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Expected start (s)",
    "hint": "(Optional) expected start (s), purely for representing in the timeline",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startType": {
    "val": "time (s)",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "time (s)",
     "frame N",
     "condition"
    ],
    "allowedLabels": [],
    "label": "Start type",
    "hint": "How do you want to define your start point?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "stopVal": {
    "val": 1.0,
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": [],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Stop",
    "hint": "When does the Component end? (blank is endless)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "durationEstim": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Expected duration (s)",
    "hint": "(Optional) expected duration (s), purely for representing in the timeline",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "stopType": {
    "val": "duration (s)",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "duration (s)",
     "duration (frames)",
     "time (s)",
     "frame N",
     "condition"
    ],
    "allowedLabels": [],
    "label": "Stop type",
    "hint": "How do you want to define your end point?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "deviceLabel": {
    "val": "",
    "valType": "device",
    "inputType": "device",
    "categ": "Device",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": "python:///psychopy.experiment.devices:DeviceMixin.addDeviceParams.<locals>.getValues",
    "allowedLabels": "python:///psychopy.experiment.devices:DeviceMixin.addDeviceParams.<locals>.getLabels",
    "label": "Device",
    "hint": "The named device from Device Manager to use for this Component.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "saveStartStop": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Save onset/offset times",
    "hint": "Store the onset/offset times in the data file (as well as in the log file).",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "syncScreenRefresh": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Sync timing with screen refresh",
    "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "disabled": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Disable Component",
    "hint": "Disable this Component",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startDataType": {
    "val": "str",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "str",
     "num",
     "binary",
     "char",
     "code"
    ],
    "allowedLabels": [
     "String",
     "Numeric (0-255)",
     "Binary",
     "Character (Byte)",
     "Code"
    ],
    "label": "Start data type",
    "hint": "Type of data to be sent: A number, a binary sequence, a character byte, or custom code ($)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startDataStr": {
    "val": "r",
    "valType": "str",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Start data (string)",
    "hint": "Send a regular string (which will be converted to binary) on start",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "startDataType",
       "condition": "== 'str'"
      }
     ],
     "enabled": []
    }
   },
   "startDataNumeric": {
    "val": 114,
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Start data (numeric)",
    "hint": "Send a number between 0-255 on start",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "startDataType",
       "condition": "== 'num'"
      }
     ],
     "enabled": []
    }
   },
   "startDataBinary": {
    "val": "1110010",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Start data (binary)",
    "hint": "Send a binary sequence (1s and 0s) on start",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "startDataType",
       "condition": "== 'binary'"
      }
     ],
     "enabled": []
    }
   },
   "startDataChar": {
    "val": "\\x72",
    "valType": "str",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Start data (char)",
    "hint": "Send a character byte (e.g. \\x73) on start",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "startDataType",
       "condition": "== 'char'"
      }
     ],
     "enabled": []
    }
   },
   "startDataCode": {
    "val": "b'r'",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Start data (code)",
    "hint": "Send custom code (e.g. from a variable) on start",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "startDataType",
       "condition": "== 'code'"
      }
     ],
     "enabled": []
    }
   },
   "stopDataType": {
    "val": "str",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "str",
     "num",
     "binary",
     "char",
     "code"
    ],
    "allowedLabels": [
     "String",
     "Numeric (0-255)",
     "Binary",
     "Character (Byte)",
     "Code"
    ],
    "label": "Stop data type",
    "hint": "Type of data to be sent: A number, a binary sequence, a character byte, or custom code ($)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "stopDataStr": {
    "val": "x",
    "valType": "str",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Stop data (string)",
    "hint": "Send a regular string (which will be converted to binary) on stop",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "stopDataType",
       "condition": "== 'str'"
      }
     ],
     "enabled": []
    }
   },
   "stopDataNumeric": {
    "val": 120,
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Stop data (numeric)",
    "hint": "Send a number between 0-255 on stop",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "stopDataType",
       "condition": "== 'num'"
      }
     ],
     "enabled": []
    }
   },
   "stopDataBinary": {
    "val": "1111000",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Stop data (binary)",
    "hint": "Send a binary sequence (1s and 0s) on stop",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "stopDataType",
       "condition": "== 'binary'"
      }
     ],
     "enabled": []
    }
   },
   "stopDataChar": {
    "val": "\\x78",
    "valType": "str",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Stop data (char)",
    "hint": "Send a character byte (e.g. \\x73) on stop",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "stopDataType",
       "condition": "== 'char'"
      }
     ],
     "enabled": []
    }
   },
   "stopDataCode": {
    "val": "b'x'",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Stop data (code)",
    "hint": "Send custom code (e.g. from a variable) on stop",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "stopDataType",
       "condition": "== 'code'"
      }
     ],
     "enabled": []
    }
   },
   "getResponse": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Get response?",
    "hint": "After sending a signal, should PsychoPy read and record a response from the port?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   }
  }
 },
 "SettingsComponent": {
  "__class__": "psychopy.experiment.components.settings:SettingsComponent",
  "__name__": "SettingsComponent",
  "categories": [
   "Custom"
  ],
  "targets": [
   "PsychoPy",
   "PsychoJS"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\settings\\settings.png",
  "tooltip": "Edit settings for this experiment",
  "version": "0.0.0",
  "beta": false,
  "hidden": true,
  "params": {
   "expName": {
    "val": "",
    "valType": "str",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Experiment name",
    "hint": "Name of the entire experiment (taken by default from the filename on save)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "expVersion": {
    "val": "",
    "valType": "str",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Experiment version",
    "hint": "Version number of the experiment (a string). Just for your records if it's useful to store",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "Audio lib": {
    "val": "ptb",
    "valType": "str",
    "inputType": "choice",
    "categ": "Audio",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "ptb",
     "pyo",
     "sounddevice",
     "pygame"
    ],
    "allowedLabels": [],
    "label": "Audio library",
    "hint": "Which Python sound engine do you want to play your sounds?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "Force stereo": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Audio",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Force stereo",
    "hint": "Force audio to stereo (2-channel) output",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "HTML path": {
    "val": "",
    "valType": "str",
    "inputType": "single",
    "categ": "Online",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Output path",
    "hint": "Place the HTML files will be saved locally ",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "exportHTML": {
    "val": "on Sync",
    "valType": "str",
    "inputType": "choice",
    "categ": "Online",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "on Save",
     "on Sync",
     "manually"
    ],
    "allowedLabels": [],
    "label": "Export HTML",
    "hint": "When to export experiment to the HTML folder.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "Completed URL": {
    "val": "",
    "valType": "str",
    "inputType": "single",
    "categ": "Online",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Completed URL",
    "hint": "Where should participants be redirected after the experiment on completion, e.g.\nhttps://pavlovia.org/surveys/XXXXXX-XXXX-XXXXXXX?tab=0",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "Incomplete URL": {
    "val": "",
    "valType": "str",
    "inputType": "single",
    "categ": "Online",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Incomplete URL",
    "hint": "Where participants are redirected if they do not complete the task, e.g.\nhttps://pavlovia.org/surveys/XXXXXX-XXXX-XXXXXXX?tab=0",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "End Message": {
    "val": "Thank you for your patience.",
    "valType": "str",
    "inputType": "single",
    "categ": "Online",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "End message",
    "hint": "Message to display to participants upon completing the experiment",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "Resources": {
    "val": [],
    "valType": "list",
    "inputType": "fileList",
    "categ": "Online",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Additional resources",
    "hint": "Any additional resources needed",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "runMode": {
    "val": 0,
    "valType": "code",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     0,
     1
    ],
    "allowedLabels": [
     "Piloting",
     "Running"
    ],
    "label": "Run mode",
    "hint": "In piloting mode, all of the settings from prefs->piloting are applied. This is recommended while the experiment is a work in progress.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "Use version": {
    "val": "",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": "python:///psychopy.experiment.components.settings:SettingsComponent.__init__.<locals>.getVersions",
    "allowedLabels": [],
    "label": "Use PsychoPy version",
    "hint": "The version of PsychoPy to use when running the experiment.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "Enable Escape": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Enable escape key",
    "hint": "Enable the <esc> key, to allow subjects to quit / break out of the experiment",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "rush": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Enable 'rush' mode",
    "hint": "Enable 'rush' mode, which will raise CPU priority while the experiment is running",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "Show info dlg": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Show info dialog",
    "hint": "Start the experiment with a dialog to set info (e.g.participant or condition)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "Experiment info": {
    "val": "{'participant':'f\"{randint(0, 999999):06.0f}\"', 'session':'\"001\"'}",
    "valType": "code",
    "inputType": "dict",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [
     "Field",
     "Default"
    ],
    "label": "Experiment info",
    "hint": "The info to present in a dialog box. Right-click to check syntax and preview the dialog box.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": [
      {
       "param": "Show info dlg",
       "condition": "==True"
      }
     ]
    }
   },
   "Monitor": {
    "val": "testMonitor",
    "valType": "str",
    "inputType": "single",
    "categ": "Screen",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Monitor",
    "hint": "Name of the monitor (from Monitor Center). Right-click to go there, then copy & paste a monitor name here.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "winBackend": {
    "val": "pyglet",
    "valType": "str",
    "inputType": "choice",
    "categ": "Screen",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": {
     "pyglet": ".pygletbackend.PygletBackend",
     "glfw": ".glfwbackend.GLFWBackend",
     "pygame": ".pygamebackend.PygameBackend"
    },
    "allowedLabels": [],
    "label": "Window backend",
    "hint": "What Python package should be used behind the scenes for drawing to the window?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "Screen": {
    "val": 1,
    "valType": "num",
    "inputType": "spin",
    "categ": "Screen",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Screen",
    "hint": "Which physical screen to run on (1 or 2)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "Full-screen window": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Screen",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Full-screen window",
    "hint": "Run the experiment full-screen (recommended)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "Window size (pixels)": {
    "val": [
     1024,
     768
    ],
    "valType": "list",
    "inputType": "single",
    "categ": "Screen",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Window size (pixels)",
    "hint": "Size of window (if not fullscreen)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "Show mouse": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Screen",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Show mouse",
    "hint": "Should the mouse be visible on screen? Only applicable for fullscreen experiments.",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "Full-screen window",
       "condition": ""
      }
     ],
     "enabled": []
    }
   },
   "Units": {
    "val": "height",
    "valType": "str",
    "inputType": "choice",
    "categ": "Screen",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "use prefs",
     "deg",
     "pix",
     "cm",
     "norm",
     "height",
     "degFlatPos",
     "degFlat"
    ],
    "allowedLabels": [],
    "label": "Units",
    "hint": "Units to use for window/stimulus coordinates (e.g. cm, pix, deg)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "color": {
    "val": "$[0,0,0]",
    "valType": "color",
    "inputType": "color",
    "categ": "Screen",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Background color",
    "hint": "Color of the screen (e.g. black, $[1.0,1.0,1.0], $variable. Right-click to bring up a color-picker.)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "blendMode": {
    "val": "avg",
    "valType": "str",
    "inputType": "choice",
    "categ": "Screen",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "add",
     "avg",
     "nofbo"
    ],
    "allowedLabels": [
     "add",
     "average",
     "average (no FBO)"
    ],
    "label": "Blend mode",
    "hint": "Should new stimuli be added or averaged with the stimuli that have been drawn already",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "colorSpace": {
    "val": "rgb",
    "valType": "str",
    "inputType": "choice",
    "categ": "Screen",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "rgb",
     "dkl",
     "lms",
     "hsv",
     "hex"
    ],
    "allowedLabels": [],
    "label": "Color space",
    "hint": "Needed if color is defined numerically (see PsychoPy documentation on color spaces)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "backgroundImg": {
    "val": "",
    "valType": "str",
    "inputType": "file",
    "categ": "Screen",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Background image",
    "hint": "Image file to use as a background (leave blank for no image)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "backgroundFit": {
    "val": "none",
    "valType": "str",
    "inputType": "choice",
    "categ": "Screen",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "none",
     "cover",
     "contain",
     "fill",
     "scale-down"
    ],
    "allowedLabels": [],
    "label": "Background fit",
    "hint": "How should the background image scale to fit the window size?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "measureFrameRate": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Screen",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Measure frame rate?",
    "hint": "Should we measure your frame rate at the start of the experiment? This is highly recommended for precise timing.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "frameRate": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Screen",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Frame rate",
    "hint": "Frame rate to store instead of measuring at the start of the experiment. Leave blank to store no frame rate, but be wary: This will lead to errors if frame rate isn't supplied by other means.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "frameRateMsg": {
    "val": "Attempting to measure frame rate of screen, please wait...",
    "valType": "str",
    "inputType": "single",
    "categ": "Screen",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Frame rate message",
    "hint": "Message to display while frame rate is measured. Leave blank for no message.",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "measureFrameRate",
       "condition": ""
      }
     ],
     "enabled": []
    }
   },
   "Data filename": {
    "val": "u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])",
    "valType": "code",
    "inputType": "single",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Data filename",
    "hint": "Code to create your custom file name base. Don't give a file extension - this will be added.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "Data file delimiter": {
    "val": "auto",
    "valType": "str",
    "inputType": "choice",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "auto",
     "comma",
     "semicolon",
     "tab"
    ],
    "allowedLabels": [],
    "label": "Data file delimiter",
    "hint": "What symbol should the data file use to separate columns? Auto will select a delimiter automatically from the filename.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "sortColumns": {
    "val": "time",
    "valType": "str",
    "inputType": "choice",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "alphabetical",
     "priority",
     "time"
    ],
    "allowedLabels": [
     "Alphabetical",
     "Priority",
     "First added"
    ],
    "label": "Sort columns by...",
    "hint": "How should data file columns be sorted? Alphabetically, by priority, or simply in the order they were added?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "colPriority": {
    "val": {
     "thisRow.t": "priority.CRITICAL",
     "expName": "priority.LOW"
    },
    "valType": "dict",
    "inputType": "dict",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [
     "Column",
     "Priority"
    ],
    "label": "Column priority",
    "hint": "Assign priority values to certain columns. To use predefined values, you can do $priority.HIGH, $priority.MEDIUM, etc.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "Save excel file": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Save Excel file",
    "hint": "Save data from loops in Excel (.xlsx) format",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "Save log file": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Save log file",
    "hint": "Save a detailed log (more detailed than the Excel/csv files) of the entire experiment",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "Save csv file": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Save csv file (summaries)",
    "hint": "Save data from loops in comma-separated-value (.csv) format for maximum portability",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "Save wide csv file": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Save csv file (trial-by-trial)",
    "hint": "Save data from loops in comma-separated-value (.csv) format for maximum portability",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "Save psydat file": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     true
    ],
    "allowedLabels": [],
    "label": "Save psydat file",
    "hint": "Save data from loops in psydat format. This is useful for Python programmers to generate analysis scripts.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "Save hdf5 file": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Save hdf5 file",
    "hint": "Save data from eyetrackers in hdf5 format. This is useful for viewing and analyzing complex data in structures.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": [
      {
       "param": "eyetracker",
       "condition": " in ['MouseGaze', 'GazePoint', 'SR Research Ltd', 'Tobii Technology', 'Pupil Labs', 'Pupil Labs (Neon)', 'EyeLogic']"
      }
     ]
    }
   },
   "logging level": {
    "val": "info",
    "valType": "code",
    "inputType": "choice",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "error",
     "warning",
     "data",
     "exp",
     "info",
     "debug"
    ],
    "allowedLabels": [],
    "label": "File logging level",
    "hint": "How much output do you want in the log files? ('error' is fewest messages, 'debug' is most)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "consoleLoggingLevel": {
    "val": "warning",
    "valType": "code",
    "inputType": "choice",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "error",
     "warning",
     "data",
     "exp",
     "info",
     "debug"
    ],
    "allowedLabels": [],
    "label": "Console / app logging level",
    "hint": "How much output do you want displayed in the console / app? ('error' is fewest messages, 'debug' is most)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "clockFormat": {
    "val": "float",
    "valType": "str",
    "inputType": "choice",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "iso",
     "float"
    ],
    "allowedLabels": [
     "Wall clock",
     "Experiment start"
    ],
    "label": "Clock format",
    "hint": "Format to use for Routine start timestamps; either wall clock time (in ISO 8601 format) or seconds since experiment start (as a float).",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "eyetracker": {
    "val": "None",
    "valType": "str",
    "inputType": "choice",
    "categ": "Eyetracking",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "None",
     "eyetracker.hw.mouse.EyeTracker"
    ],
    "allowedLabels": [
     "None",
     "MouseGaze"
    ],
    "label": "Eyetracker device",
    "hint": "What kind of eye tracker should PsychoPy use? Select 'MouseGaze' to use the mouse to simulate eye movement (for debugging without a tracker connected)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "gpAddress": {
    "val": "127.0.0.1",
    "valType": "str",
    "inputType": "single",
    "categ": "Eyetracking",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "GazePoint IP address",
    "hint": "IP Address of the computer running GazePoint Control.",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "eyetracker",
       "condition": "=='GazePoint'"
      }
     ],
     "enabled": []
    }
   },
   "gpPort": {
    "val": 4242,
    "valType": "num",
    "inputType": "single",
    "categ": "Eyetracking",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "GazePoint port",
    "hint": "Port of the GazePoint Control server. Usually 4242.",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "eyetracker",
       "condition": "=='GazePoint'"
      }
     ],
     "enabled": []
    }
   },
   "elModel": {
    "val": "EYELINK 1000 DESKTOP",
    "valType": "str",
    "inputType": "choice",
    "categ": "Eyetracking",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "EYELINK 1000 DESKTOP",
     "EYELINK 1000 TOWER",
     "EYELINK 1000 REMOTE",
     "EYELINK 1000 LONG RANGE"
    ],
    "allowedLabels": [],
    "label": "Model name",
    "hint": "Eye tracker model.",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "eyetracker",
       "condition": "=='SR Research Ltd'"
      }
     ],
     "enabled": []
    }
   },
   "elAddress": {
    "val": "100.1.1.1",
    "valType": "str",
    "inputType": "single",
    "categ": "Eyetracking",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "EyeLink IP address",
    "hint": "IP Address of the EyeLink *Host* computer.",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "eyetracker",
       "condition": "=='SR Research Ltd'"
      }
     ],
     "enabled": []
    }
   },
   "elSimMode": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Eyetracking",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Mouse simulation mode",
    "hint": "Set the EyeLink to run in mouse simulation mode.",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "eyetracker",
       "condition": "=='SR Research Ltd'"
      }
     ],
     "enabled": []
    }
   },
   "mgMove": {
    "val": "CONTINUOUS",
    "valType": "str",
    "inputType": "choice",
    "categ": "Eyetracking",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "CONTINUOUS",
     "LEFT_BUTTON",
     "MIDDLE_BUTTON",
     "RIGHT_BUTTON"
    ],
    "allowedLabels": [],
    "label": "Move button",
    "hint": "Mouse button to press for eye movement.",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "eyetracker",
       "condition": "=='MouseGaze'"
      },
      {
       "param": "eyetracker",
       "condition": "== 'eyetracker.hw.mouse.EyeTracker'"
      }
     ],
     "enabled": []
    }
   },
   "mgBlink": {
    "val": "MIDDLE_BUTTON",
    "valType": "list",
    "inputType": "multiChoice",
    "categ": "Eyetracking",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "LEFT_BUTTON",
     "MIDDLE_BUTTON",
     "RIGHT_BUTTON"
    ],
    "allowedLabels": [],
    "label": "Blink button",
    "hint": "Mouse button to press for a blink.",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "eyetracker",
       "condition": "=='MouseGaze'"
      },
      {
       "param": "eyetracker",
       "condition": "== 'eyetracker.hw.mouse.EyeTracker'"
      }
     ],
     "enabled": []
    }
   },
   "mgSaccade": {
    "val": 0.5,
    "valType": "num",
    "inputType": "single",
    "categ": "Eyetracking",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Saccade threshold",
    "hint": "Visual degree threshold for Saccade event creation.",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "eyetracker",
       "condition": "=='MouseGaze'"
      },
      {
       "param": "eyetracker",
       "condition": "== 'eyetracker.hw.mouse.EyeTracker'"
      }
     ],
     "enabled": []
    }
   },
   "elSampleRate": {
    "val": 1000,
    "valType": "num",
    "inputType": "choice",
    "categ": "Eyetracking",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "250",
     "500",
     "1000",
     "2000"
    ],
    "allowedLabels": [],
    "label": "Sampling rate",
    "hint": "Eye tracker sampling rate.",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "eyetracker",
       "condition": "=='SR Research Ltd'"
      }
     ],
     "enabled": []
    }
   },
   "elTrackEyes": {
    "val": "RIGHT_EYE",
    "valType": "str",
    "inputType": "choice",
    "categ": "Eyetracking",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "LEFT_EYE",
     "RIGHT_EYE",
     "BOTH"
    ],
    "allowedLabels": [],
    "label": "Track eyes",
    "hint": "Select with eye(s) to track.",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "eyetracker",
       "condition": "=='SR Research Ltd'"
      }
     ],
     "enabled": []
    }
   },
   "elLiveFiltering": {
    "val": "FILTER_LEVEL_OFF",
    "valType": "str",
    "inputType": "choice",
    "categ": "Eyetracking",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "FILTER_LEVEL_OFF",
     "FILTER_LEVEL_1",
     "FILTER_LEVEL_2"
    ],
    "allowedLabels": [],
    "label": "Live sample filtering",
    "hint": "Filter eye sample data live, as it is streamed to the driving device. This may reduce the sampling speed.",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "eyetracker",
       "condition": "=='SR Research Ltd'"
      }
     ],
     "enabled": []
    }
   },
   "elDataFiltering": {
    "val": "FILTER_LEVEL_2",
    "valType": "str",
    "inputType": "choice",
    "categ": "Eyetracking",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "FILTER_LEVEL_OFF",
     "FILTER_LEVEL_1",
     "FILTER_LEVEL_2"
    ],
    "allowedLabels": [],
    "label": "Saved sample filtering",
    "hint": "Filter eye sample data when it is saved to the output file. This will not affect the sampling speed.",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "eyetracker",
       "condition": "=='SR Research Ltd'"
      }
     ],
     "enabled": []
    }
   },
   "elTrackingMode": {
    "val": "PUPIL_CR_TRACKING",
    "valType": "str",
    "inputType": "choice",
    "categ": "Eyetracking",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "PUPIL_CR_TRACKING",
     "PUPIL_ONLY_TRACKING"
    ],
    "allowedLabels": [],
    "label": "Pupil tracking mode",
    "hint": "Track Pupil-CR or Pupil only.",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "eyetracker",
       "condition": "=='SR Research Ltd'"
      }
     ],
     "enabled": []
    }
   },
   "elPupilAlgorithm": {
    "val": "ELLIPSE_FIT",
    "valType": "str",
    "inputType": "choice",
    "categ": "Eyetracking",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "ELLIPSE_FIT",
     "CENTROID_FIT"
    ],
    "allowedLabels": [],
    "label": "Pupil center algorithm",
    "hint": "Algorithm used to detect the pupil center.",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "eyetracker",
       "condition": "=='SR Research Ltd'"
      }
     ],
     "enabled": []
    }
   },
   "elPupilMeasure": {
    "val": "PUPIL_AREA",
    "valType": "str",
    "inputType": "choice",
    "categ": "Eyetracking",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "PUPIL_AREA",
     "PUPIL_DIAMETER",
     "NEITHER"
    ],
    "allowedLabels": [],
    "label": "Pupil data type",
    "hint": "Type of pupil data to record.",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "eyetracker",
       "condition": "=='SR Research Ltd'"
      }
     ],
     "enabled": []
    }
   },
   "tbModel": {
    "val": "",
    "valType": "str",
    "inputType": "single",
    "categ": "Eyetracking",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Model name",
    "hint": "Eye tracker model.",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "eyetracker",
       "condition": "=='Tobii Technology'"
      }
     ],
     "enabled": []
    }
   },
   "tbLicenseFile": {
    "val": "",
    "valType": "str",
    "inputType": "file",
    "categ": "Eyetracking",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "License file",
    "hint": "Eye tracker license file (optional).",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "eyetracker",
       "condition": "=='Tobii Technology'"
      }
     ],
     "enabled": []
    }
   },
   "tbSerialNo": {
    "val": "",
    "valType": "str",
    "inputType": "single",
    "categ": "Eyetracking",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Serial number",
    "hint": "Eye tracker serial number (optional).",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "eyetracker",
       "condition": "=='Tobii Technology'"
      }
     ],
     "enabled": []
    }
   },
   "tbSampleRate": {
    "val": 60,
    "valType": "num",
    "inputType": "single",
    "categ": "Eyetracking",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Sampling rate",
    "hint": "Eye tracker sampling rate.",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "eyetracker",
       "condition": "=='Tobii Technology'"
      }
     ],
     "enabled": []
    }
   },
   "plPupillometryOnly": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Eyetracking",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Pupillometry only",
    "hint": "Subscribe to pupil data only, does not require calibration or surface setup",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "eyetracker",
       "condition": "=='Pupil Labs'"
      }
     ],
     "enabled": []
    }
   },
   "plSurfaceName": {
    "val": "psychopy_iohub_surface",
    "valType": "str",
    "inputType": "single",
    "categ": "Eyetracking",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Surface name",
    "hint": "Name of the Pupil Capture surface",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "eyetracker",
       "condition": "=='Pupil Labs'"
      }
     ],
     "enabled": []
    }
   },
   "plConfidenceThreshold": {
    "val": 0.6,
    "valType": "num",
    "inputType": "single",
    "categ": "Eyetracking",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Gaze confidence threshold",
    "hint": "Gaze confidence threshold",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "eyetracker",
       "condition": "=='Pupil Labs'"
      }
     ],
     "enabled": []
    }
   },
   "plPupilRemoteAddress": {
    "val": "127.0.0.1",
    "valType": "str",
    "inputType": "single",
    "categ": "Eyetracking",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Pupil remote address",
    "hint": "Pupil remote address",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "eyetracker",
       "condition": "=='Pupil Labs'"
      }
     ],
     "enabled": []
    }
   },
   "plPupilRemotePort": {
    "val": 50020,
    "valType": "num",
    "inputType": "single",
    "categ": "Eyetracking",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Pupil remote port",
    "hint": "Pupil remote port",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "eyetracker",
       "condition": "=='Pupil Labs'"
      }
     ],
     "enabled": []
    }
   },
   "plPupilRemoteTimeoutMs": {
    "val": 1000,
    "valType": "num",
    "inputType": "single",
    "categ": "Eyetracking",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Pupil remote timeout (ms)",
    "hint": "Pupil remote timeout (ms)",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "eyetracker",
       "condition": "=='Pupil Labs'"
      }
     ],
     "enabled": []
    }
   },
   "plPupilCaptureRecordingLocation": {
    "val": "",
    "valType": "str",
    "inputType": "single",
    "categ": "Eyetracking",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Pupil capture recording location",
    "hint": "Pupil capture recording location",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "eyetracker",
       "condition": "=='Pupil Labs'"
      }
     ],
     "enabled": []
    }
   },
   "plCompanionAddress": {
    "val": "neon.local",
    "valType": "str",
    "inputType": "single",
    "categ": "Eyetracking",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Companion address",
    "hint": "Companion address",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "eyetracker",
       "condition": "=='Pupil Labs (Neon)'"
      }
     ],
     "enabled": []
    }
   },
   "plCompanionPort": {
    "val": 8080,
    "valType": "num",
    "inputType": "single",
    "categ": "Eyetracking",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Companion port",
    "hint": "Companion port",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "eyetracker",
       "condition": "=='Pupil Labs (Neon)'"
      }
     ],
     "enabled": []
    }
   },
   "ecSampleRate": {
    "val": "default",
    "valType": "str",
    "inputType": "single",
    "categ": "Eyetracking",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Sampling rate",
    "hint": "Eyetracker sampling rate: 'default' or <integer>[Hz]. Defaults to tracking mode '0'.",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "eyetracker",
       "condition": "=='EyeLogic'"
      }
     ],
     "enabled": []
    }
   },
   "keyboardBackend": {
    "val": "PsychToolbox",
    "valType": "str",
    "inputType": "choice",
    "categ": "Input",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "ioHub",
     "PsychToolbox",
     "Pyglet"
    ],
    "allowedLabels": [],
    "label": "Keyboard backend",
    "hint": "What Python package should PsychoPy use to get keyboard input?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   }
  }
 },
 "SliderComponent": {
  "__class__": "psychopy.experiment.components.slider:SliderComponent",
  "__name__": "SliderComponent",
  "categories": [
   "Responses"
  ],
  "targets": [
   "PsychoPy",
   "PsychoJS"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\slider\\slider.png",
  "tooltip": "Slider: A simple, flexible object for getting ratings",
  "version": "0.0.0",
  "beta": false,
  "validatorClasses": [
   "VisualValidatorRoutine"
  ],
  "hidden": false,
  "params": {
   "name": {
    "val": "slider",
    "valType": "code",
    "inputType": "name",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Name",
    "hint": "Name of this Component (alphanumeric or _, no spaces)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startVal": {
    "val": "0.0",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Start",
    "hint": "When does the Component start?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startEstim": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Expected start (s)",
    "hint": "(Optional) expected start (s), purely for representing in the timeline",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startType": {
    "val": "time (s)",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "time (s)",
     "frame N",
     "condition"
    ],
    "allowedLabels": [],
    "label": "Start type",
    "hint": "How do you want to define your start point?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "stopVal": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": [],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Stop",
    "hint": "When does the Component end? (blank is endless)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "durationEstim": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Expected duration (s)",
    "hint": "(Optional) expected duration (s), purely for representing in the timeline",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "stopType": {
    "val": "condition",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "duration (s)",
     "duration (frames)",
     "time (s)",
     "frame N",
     "condition"
    ],
    "allowedLabels": [],
    "label": "Stop type",
    "hint": "How do you want to define your end point?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "color": {
    "val": "LightGray",
    "valType": "color",
    "inputType": "color",
    "categ": "Appearance",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Label color",
    "hint": "Color of all labels on this slider (might be overridden by the style setting)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "fillColor": {
    "val": "Red",
    "valType": "color",
    "inputType": "color",
    "categ": "Appearance",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Marker color",
    "hint": "Color of the marker on this slider (might be overridden by the style setting)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "borderColor": {
    "val": "White",
    "valType": "color",
    "inputType": "color",
    "categ": "Appearance",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Line color",
    "hint": "Color of all lines on this slider (might be overridden by the style setting)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "colorSpace": {
    "val": "rgb",
    "valType": "str",
    "inputType": "choice",
    "categ": "Appearance",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [
     "rgb",
     "dkl",
     "lms",
     "hsv"
    ],
    "allowedLabels": [],
    "label": "Color space",
    "hint": "In what format (color space) have you specified the colors? (rgb, dkl, lms, hsv)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "opacity": {
    "val": "",
    "valType": "num",
    "inputType": "single",
    "categ": "Appearance",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Opacity",
    "hint": "Opacity of the stimulus (1=opaque, 0=fully transparent, 0.5=translucent). Leave blank for each color to have its own opacity (recommended if any color is None).",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "size": {
    "val": "(1.0, 0.1)",
    "valType": "list",
    "inputType": "single",
    "categ": "Layout",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Size [w,h]",
    "hint": "Size of this stimulus (either a single value or x,y pair, e.g. 2.5, [1,2] ",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "pos": {
    "val": "(0, -0.4)",
    "valType": "list",
    "inputType": "single",
    "categ": "Layout",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Position [x,y]",
    "hint": "Position of this stimulus (e.g. [1,2] )",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "units": {
    "val": "from exp settings",
    "valType": "str",
    "inputType": "choice",
    "categ": "Layout",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "from exp settings",
     "deg",
     "cm",
     "pix",
     "norm",
     "height",
     "degFlatPos",
     "degFlat"
    ],
    "allowedLabels": [],
    "label": "Spatial units",
    "hint": "Units of dimensions for this stimulus",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "ori": {
    "val": 0,
    "valType": "num",
    "inputType": "spin",
    "categ": "Layout",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [
     -360,
     360
    ],
    "allowedLabels": [],
    "label": "Orientation",
    "hint": "Orientation of this stimulus (in deg)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "forceEndRoutine": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": [],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Force end of Routine",
    "hint": "Should setting a rating (releasing the mouse) cause the end of the Routine (e.g. trial)?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "contrast": {
    "val": 1,
    "valType": "num",
    "inputType": "single",
    "categ": "Appearance",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Contrast",
    "hint": "Contrast of the stimulus (1.0=unchanged contrast, 0.5=decrease contrast, 0.0=uniform/no contrast, -0.5=slightly inverted, -1.0=totally inverted)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "styles": {
    "val": "rating",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [
     "slider",
     "rating",
     "radio",
     "scrollbar",
     "choice"
    ],
    "allowedLabels": [],
    "label": "Styles",
    "hint": "Discrete styles to control the overall appearance of the slider.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "styleTweaks": {
    "val": [],
    "valType": "list",
    "inputType": "multiChoice",
    "categ": "Appearance",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [
     "labels45",
     "triangleMarker"
    ],
    "allowedLabels": [],
    "label": "Style tweaks",
    "hint": "Tweaks to change the appearance of the slider beyond its style.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "font": {
    "val": "Noto Sans",
    "valType": "str",
    "inputType": "font",
    "categ": "Formatting",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Font",
    "hint": "Font for the labels",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "flip": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Layout",
    "updates": "constant",
    "allowedUpdates": [],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Flip",
    "hint": "By default the labels will be on the bottom or left of the scale, but this can be flipped to the other side.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "ticks": {
    "val": "(1, 2, 3, 4, 5)",
    "valType": "list",
    "inputType": "single",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": [
     "constant"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Ticks",
    "hint": "Tick positions (numerical) on the scale, separated by commas",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "labels": {
    "val": "",
    "valType": "list",
    "inputType": "single",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": [
     "constant"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Labels",
    "hint": "Labels for the tick marks on the scale, separated by commas",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "granularity": {
    "val": 0,
    "valType": "num",
    "inputType": "single",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": [
     "constant"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Granularity",
    "hint": "Specifies the minimum step size (0 for a continuous scale, 1 for integer rating scale)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "readOnly": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": "constant",
    "allowedUpdates": [],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Read only",
    "hint": "Should participant be able to change the rating on the Slider?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "saveStartStop": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Save onset/offset times",
    "hint": "Store the onset/offset times in the data file (as well as in the log file).",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "syncScreenRefresh": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Sync timing with screen refresh",
    "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "disabled": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Disable Component",
    "hint": "Disable this Component",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "validator": {
    "val": "",
    "valType": "code",
    "inputType": "choice",
    "categ": "Testing",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": "python:///psychopy.experiment.components._base:BaseComponent.getAllValidatorRoutineVals",
    "allowedLabels": "python:///psychopy.experiment.components._base:BaseComponent.getAllValidatorRoutineLabels",
    "label": "Validate with...",
    "hint": "Name of validator Component/Routine to use to check the timing of this stimulus.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "initVal": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Starting value",
    "hint": "Value of the slider befre any response, leave blank to hide the marker until clicked on",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "letterHeight": {
    "val": 0.05,
    "valType": "num",
    "inputType": "single",
    "categ": "Formatting",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Letter height",
    "hint": "Letter height for text in labels",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "storeRating": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": "constant",
    "allowedUpdates": [],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Store rating",
    "hint": "store the rating",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "storeRatingTime": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": "constant",
    "allowedUpdates": [],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Store rating time",
    "hint": "Store the time taken to make the choice (in seconds)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "storeHistory": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": "constant",
    "allowedUpdates": [],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Store history",
    "hint": "store the history of (selection, time)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   }
  }
 },
 "SoundComponent": {
  "__class__": "psychopy.experiment.components.sound:SoundComponent",
  "__name__": "SoundComponent",
  "categories": [
   "Stimuli"
  ],
  "targets": [
   "PsychoPy",
   "PsychoJS"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\sound\\sound.png",
  "tooltip": "Sound: play recorded files or generated sounds",
  "version": "0.0.0",
  "beta": false,
  "validatorClasses": [
   "AudioValidatorRoutine"
  ],
  "hidden": false,
  "params": {
   "name": {
    "val": "sound_1",
    "valType": "code",
    "inputType": "name",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Name",
    "hint": "Name of this Component (alphanumeric or _, no spaces)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startVal": {
    "val": "0.0",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Start",
    "hint": "When does the Component start?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startEstim": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Expected start (s)",
    "hint": "(Optional) expected start (s), purely for representing in the timeline",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startType": {
    "val": "time (s)",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "time (s)",
     "frame N",
     "condition"
    ],
    "allowedLabels": [],
    "label": "Start type",
    "hint": "How do you want to define your start point?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "stopVal": {
    "val": "1.0",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": [],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Stop",
    "hint": "When does the Component end? (blank to use the duration of the media)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "durationEstim": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Expected duration (s)",
    "hint": "(Optional) expected duration (s), purely for representing in the timeline",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "stopType": {
    "val": "duration (s)",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "duration (s)",
     "duration (frames)",
     "time (s)",
     "frame N",
     "condition"
    ],
    "allowedLabels": [],
    "label": "Stop type",
    "hint": "How do you want to define your end point?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "deviceLabel": {
    "val": "",
    "valType": "device",
    "inputType": "device",
    "categ": "Device",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": "python:///psychopy.experiment.devices:DeviceMixin.addDeviceParams.<locals>.getValues",
    "allowedLabels": "python:///psychopy.experiment.devices:DeviceMixin.addDeviceParams.<locals>.getLabels",
    "label": "Device",
    "hint": "The named device from Device Manager to use for this Component.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "sound": {
    "val": "A",
    "valType": "str",
    "inputType": "soundFile",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": [
     "set every repeat"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Sound",
    "hint": "A sound can be a note name (e.g. A or Bf), a number to specify Hz (e.g. 440) or a filename",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "syncScreenRefresh": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Sync start with screen",
    "hint": "A reaction time to a sound stimulus should be based on when the screen flipped",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "volume": {
    "val": 1,
    "valType": "num",
    "inputType": "single",
    "categ": "Playback",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Volume",
    "hint": "The volume (in range 0 to 1)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "hamming": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Playback",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Hamming window",
    "hint": "For tones we can apply a hamming window to prevent 'clicks' that are caused by a sudden onset. This delays onset by roughly 1ms.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "stopWithRoutine": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Playback",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Stop with Routine?",
    "hint": "Should playback cease when the Routine ends? Untick to continue playing after the Routine has finished.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "forceEndRoutine": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Playback",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Force end of Routine",
    "hint": "Should the end of the sound cause the end of the Routine (e.g. trial)?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "saveStartStop": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Save onset/offset times",
    "hint": "Store the onset/offset times in the data file (as well as in the log file).",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "disabled": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Disable Component",
    "hint": "Disable this Component",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "validator": {
    "val": "",
    "valType": "code",
    "inputType": "choice",
    "categ": "Testing",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": "python:///psychopy.experiment.components._base:BaseComponent.getAllValidatorRoutineVals",
    "allowedLabels": "python:///psychopy.experiment.components._base:BaseComponent.getAllValidatorRoutineLabels",
    "label": "Validate with...",
    "hint": "Name of validator Component/Routine to use to check the timing of this stimulus.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   }
  }
 },
 "SoundSensorComponent": {
  "__class__": "psychopy.experiment.components.soundsensor:SoundSensorComponent",
  "__name__": "SoundSensorComponent",
  "categories": [
   "Responses"
  ],
  "targets": [
   "PsychoPy"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\soundsensor\\soundsensor.png",
  "tooltip": "Voice Key: Get input from a microphone as simple true/false values",
  "version": "0.0.0",
  "beta": true,
  "validatorClasses": [],
  "hidden": false,
  "params": {
   "name": {
    "val": "soundSensor",
    "valType": "code",
    "inputType": "name",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Name",
    "hint": "Name of this Component (alphanumeric or _, no spaces)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startVal": {
    "val": 0.0,
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Start",
    "hint": "When does the Component start?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startEstim": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Expected start (s)",
    "hint": "(Optional) expected start (s), purely for representing in the timeline",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startType": {
    "val": "time (s)",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "time (s)",
     "frame N",
     "condition"
    ],
    "allowedLabels": [],
    "label": "Start type",
    "hint": "How do you want to define your start point?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "stopVal": {
    "val": 1.0,
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": [],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Stop",
    "hint": "When does the Component end? (blank is endless)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "durationEstim": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Expected duration (s)",
    "hint": "(Optional) expected duration (s), purely for representing in the timeline",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "stopType": {
    "val": "duration (s)",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "duration (s)",
     "duration (frames)",
     "time (s)",
     "frame N",
     "condition"
    ],
    "allowedLabels": [],
    "label": "Stop type",
    "hint": "How do you want to define your end point?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "deviceLabel": {
    "val": "",
    "valType": "device",
    "inputType": "device",
    "categ": "Device",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": "python:///psychopy.experiment.devices:DeviceMixin.addDeviceParams.<locals>.getValues",
    "allowedLabels": "python:///psychopy.experiment.devices:DeviceMixin.addDeviceParams.<locals>.getLabels",
    "label": "Device",
    "hint": "The named device from Device Manager to use for this Component.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "forceEndRoutine": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Force end of Routine",
    "hint": "Should a response force the end of the Routine (e.g end the trial)?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "registerOn": {
    "val": true,
    "valType": "code",
    "inputType": "choice",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     true,
     false
    ],
    "allowedLabels": [
     "Press",
     "Release"
    ],
    "label": "Register button press on...",
    "hint": "When should the response be registered? When the sound starts, or when it stops?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "store": {
    "val": "first",
    "valType": "str",
    "inputType": "choice",
    "categ": "Data",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [
     "last",
     "first",
     "all",
     "nothing"
    ],
    "allowedLabels": [
     "Last response",
     "First response",
     "All responses",
     "Nothing"
    ],
    "label": "Store",
    "hint": "Choose which (if any) responses to store at the end of a trial",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "storeCorrect": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Store correct",
    "hint": "Do you want to save the response as correct/incorrect?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "correctAns": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Correct answer",
    "hint": "What is the 'correct' response (True/False)? Might be helpful to add a correctAns column and use $correctAns to compare to the response. ",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "storeCorrect",
       "condition": "== True"
      }
     ],
     "enabled": []
    }
   },
   "saveStartStop": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Save onset/offset times",
    "hint": "Store the onset/offset times in the data file (as well as in the log file).",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "syncScreenRefresh": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Sync timing with screen refresh",
    "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "disabled": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Disable Component",
    "hint": "Disable this Component",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   }
  }
 },
 "StaticComponent": {
  "__class__": "psychopy.experiment.components.static:StaticComponent",
  "__name__": "StaticComponent",
  "categories": [
   "Custom"
  ],
  "targets": [
   "PsychoPy",
   "PsychoJS"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\static\\static.png",
  "tooltip": "Static: Static screen period (e.g. an ISI). Useful for pre-loading stimuli.",
  "version": "0.0.0",
  "beta": false,
  "validatorClasses": [],
  "hidden": false,
  "params": {
   "name": {
    "val": "ISI",
    "valType": "code",
    "inputType": "name",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Name",
    "hint": "Name of this Component (alphanumeric or _, no spaces)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startVal": {
    "val": 0.0,
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Start",
    "hint": "When does the Component start?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startEstim": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Expected start (s)",
    "hint": "(Optional) expected start (s), purely for representing in the timeline",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startType": {
    "val": "time (s)",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "time (s)",
     "frame N",
     "condition"
    ],
    "allowedLabels": [],
    "label": "Start type",
    "hint": "How do you want to define your start point?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "stopVal": {
    "val": 0.5,
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": [],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Stop",
    "hint": "When does the Component end? (blank is endless)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "durationEstim": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Expected duration (s)",
    "hint": "(Optional) expected duration (s), purely for representing in the timeline",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "stopType": {
    "val": "duration (s)",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "duration (s)",
     "duration (frames)",
     "time (s)",
     "frame N",
     "condition"
    ],
    "allowedLabels": [],
    "label": "Stop type",
    "hint": "How do you want to define your end point?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "code": {
    "val": "",
    "valType": "code",
    "inputType": "multi",
    "categ": "Custom",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Custom code",
    "hint": "Custom code to be run during the static period (after updates)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "saveData": {
    "val": false,
    "valType": "code",
    "inputType": "bool",
    "categ": "Custom",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Save data during",
    "hint": "While the frame loop is paused, should we take the opportunity to save data now? This is only relevant locally, online data saving is either periodic or on close.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "saveStartStop": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Save onset/offset times",
    "hint": "Store the onset/offset times in the data file (as well as in the log file).",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "syncScreenRefresh": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Sync timing with screen refresh",
    "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "disabled": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Disable Component",
    "hint": "Disable this Component",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   }
  }
 },
 "TextComponent": {
  "__class__": "psychopy.experiment.components.text:TextComponent",
  "__name__": "TextComponent",
  "categories": [
   "Stimuli"
  ],
  "targets": [
   "PsychoPy",
   "PsychoJS"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\text\\text.png",
  "tooltip": "Text: present text stimuli",
  "version": "0.0.0",
  "beta": false,
  "validatorClasses": [
   "VisualValidatorRoutine"
  ],
  "hidden": false,
  "params": {
   "name": {
    "val": "text",
    "valType": "code",
    "inputType": "name",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Name",
    "hint": "Name of this Component (alphanumeric or _, no spaces)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startVal": {
    "val": 0.0,
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Start",
    "hint": "When does the Component start?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startEstim": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Expected start (s)",
    "hint": "(Optional) expected start (s), purely for representing in the timeline",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startType": {
    "val": "time (s)",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "time (s)",
     "frame N",
     "condition"
    ],
    "allowedLabels": [],
    "label": "Start type",
    "hint": "How do you want to define your start point?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "stopVal": {
    "val": 1.0,
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": [],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Stop",
    "hint": "When does the Component end? (blank is endless)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "durationEstim": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Expected duration (s)",
    "hint": "(Optional) expected duration (s), purely for representing in the timeline",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "stopType": {
    "val": "duration (s)",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "duration (s)",
     "duration (frames)",
     "time (s)",
     "frame N",
     "condition"
    ],
    "allowedLabels": [],
    "label": "Stop type",
    "hint": "How do you want to define your end point?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "color": {
    "val": "white",
    "valType": "color",
    "inputType": "color",
    "categ": "Appearance",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Foreground color",
    "hint": "Foreground color of this stimulus (e.g. $[1,1,0], red )",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "colorSpace": {
    "val": "rgb",
    "valType": "str",
    "inputType": "choice",
    "categ": "Appearance",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [
     "rgb",
     "dkl",
     "lms",
     "hsv"
    ],
    "allowedLabels": [],
    "label": "Color space",
    "hint": "In what format (color space) have you specified the colors? (rgb, dkl, lms, hsv)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "opacity": {
    "val": "",
    "valType": "num",
    "inputType": "single",
    "categ": "Appearance",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Opacity",
    "hint": "Opacity of the stimulus (1=opaque, 0=fully transparent, 0.5=translucent). Leave blank for each color to have its own opacity (recommended if any color is None).",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "pos": {
    "val": [
     0,
     0
    ],
    "valType": "list",
    "inputType": "single",
    "categ": "Layout",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Position [x,y]",
    "hint": "Position of this stimulus (e.g. [1,2] )",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "units": {
    "val": "from exp settings",
    "valType": "str",
    "inputType": "choice",
    "categ": "Layout",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "from exp settings",
     "deg",
     "cm",
     "pix",
     "norm",
     "height",
     "degFlatPos",
     "degFlat"
    ],
    "allowedLabels": [],
    "label": "Spatial units",
    "hint": "Units of dimensions for this stimulus",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "ori": {
    "val": 0,
    "valType": "num",
    "inputType": "spin",
    "categ": "Layout",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [
     -360,
     360
    ],
    "allowedLabels": [],
    "label": "Orientation",
    "hint": "Orientation of this stimulus (in deg)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "saveStartStop": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Save onset/offset times",
    "hint": "Store the onset/offset times in the data file (as well as in the log file).",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "syncScreenRefresh": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Sync timing with screen refresh",
    "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "disabled": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Disable Component",
    "hint": "Disable this Component",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "contrast": {
    "val": 1,
    "valType": "num",
    "inputType": "single",
    "categ": "Appearance",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Contrast",
    "hint": "Contrast of the stimulus (1.0=unchanged contrast, 0.5=decrease contrast, 0.0=uniform/no contrast, -0.5=slightly inverted, -1.0=totally inverted)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "validator": {
    "val": "",
    "valType": "code",
    "inputType": "choice",
    "categ": "Testing",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": "python:///psychopy.experiment.components._base:BaseComponent.getAllValidatorRoutineVals",
    "allowedLabels": "python:///psychopy.experiment.components._base:BaseComponent.getAllValidatorRoutineLabels",
    "label": "Validate with...",
    "hint": "Name of validator Component/Routine to use to check the timing of this stimulus.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "text": {
    "val": "Any text\n\nincluding line breaks",
    "valType": "str",
    "inputType": "multi",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Text",
    "hint": "The text to be displayed",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "font": {
    "val": "Arial",
    "valType": "str",
    "inputType": "font",
    "categ": "Formatting",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Font",
    "hint": "The font name (e.g. Comic Sans)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "draggable": {
    "val": false,
    "valType": "code",
    "inputType": "bool",
    "categ": "Layout",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Draggable?",
    "hint": "Should this stimulus be moveble by clicking and dragging?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "letterHeight": {
    "val": 0.05,
    "valType": "num",
    "inputType": "single",
    "categ": "Formatting",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Letter height",
    "hint": "Specifies the height of the letter (the width is then determined by the font)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "wrapWidth": {
    "val": "",
    "valType": "num",
    "inputType": "single",
    "categ": "Layout",
    "updates": "constant",
    "allowedUpdates": [
     "constant"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Wrap width",
    "hint": "How wide should the text get when it wraps? (in the specified units)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "flip": {
    "val": "None",
    "valType": "str",
    "inputType": "single",
    "categ": "Layout",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [
     "horiz",
     "vert",
     "None"
    ],
    "allowedLabels": [],
    "label": "Flip (mirror)",
    "hint": "horiz = left-right reversed; vert = up-down reversed; $var = variable",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "languageStyle": {
    "val": "LTR",
    "valType": "str",
    "inputType": "choice",
    "categ": "Formatting",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "LTR",
     "RTL",
     "Arabic"
    ],
    "allowedLabels": [],
    "label": "Language style",
    "hint": "Handle right-to-left (RTL) languages and Arabic reshaping",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   }
  }
 },
 "TextboxComponent": {
  "__class__": "psychopy.experiment.components.textbox:TextboxComponent",
  "__name__": "TextboxComponent",
  "categories": [
   "Stimuli",
   "Responses"
  ],
  "targets": [
   "PsychoPy",
   "PsychoJS"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\textbox\\textbox.png",
  "tooltip": "Textbox: present text stimuli but cooler",
  "version": "2020.2.0",
  "beta": false,
  "validatorClasses": [
   "VisualValidatorRoutine"
  ],
  "hidden": false,
  "params": {
   "name": {
    "val": "textbox",
    "valType": "code",
    "inputType": "name",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Name",
    "hint": "Name of this Component (alphanumeric or _, no spaces)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startVal": {
    "val": 0.0,
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Start",
    "hint": "When does the Component start?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startEstim": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Expected start (s)",
    "hint": "(Optional) expected start (s), purely for representing in the timeline",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startType": {
    "val": "time (s)",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "time (s)",
     "frame N",
     "condition"
    ],
    "allowedLabels": [],
    "label": "Start type",
    "hint": "How do you want to define your start point?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "stopVal": {
    "val": 1.0,
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": [],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Stop",
    "hint": "When does the Component end? (blank is endless)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "durationEstim": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Expected duration (s)",
    "hint": "(Optional) expected duration (s), purely for representing in the timeline",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "stopType": {
    "val": "duration (s)",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "duration (s)",
     "duration (frames)",
     "time (s)",
     "frame N",
     "condition"
    ],
    "allowedLabels": [],
    "label": "Stop type",
    "hint": "How do you want to define your end point?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "color": {
    "val": "white",
    "valType": "color",
    "inputType": "color",
    "categ": "Appearance",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Text color",
    "hint": "Foreground color of this stimulus (e.g. $[1,1,0], red )",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "fillColor": {
    "val": "None",
    "valType": "color",
    "inputType": "color",
    "categ": "Appearance",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Fill color",
    "hint": "Fill color of this stimulus (e.g. $[1,1,0], red )",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "borderColor": {
    "val": "None",
    "valType": "color",
    "inputType": "color",
    "categ": "Appearance",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Border color",
    "hint": "Border color of this stimulus (e.g. $[1,1,0], red )",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "colorSpace": {
    "val": "rgb",
    "valType": "str",
    "inputType": "choice",
    "categ": "Appearance",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [
     "rgb",
     "dkl",
     "lms",
     "hsv"
    ],
    "allowedLabels": [],
    "label": "Color space",
    "hint": "In what format (color space) have you specified the colors? (rgb, dkl, lms, hsv)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "opacity": {
    "val": "",
    "valType": "num",
    "inputType": "single",
    "categ": "Appearance",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Opacity",
    "hint": "Opacity of the stimulus (1=opaque, 0=fully transparent, 0.5=translucent). Leave blank for each color to have its own opacity (recommended if any color is None).",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "size": {
    "val": [
     0.5,
     0.5
    ],
    "valType": "list",
    "inputType": "single",
    "categ": "Layout",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Size [w,h]",
    "hint": "Size of this stimulus (either a single value or x,y pair, e.g. 2.5, [1,2] ",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "pos": {
    "val": [
     0,
     0
    ],
    "valType": "list",
    "inputType": "single",
    "categ": "Layout",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Position [x,y]",
    "hint": "Position of this stimulus (e.g. [1,2] )",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "padding": {
    "val": 0,
    "valType": "num",
    "inputType": "single",
    "categ": "Layout",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Padding",
    "hint": "Defines the space between text and the textbox border",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "units": {
    "val": "from exp settings",
    "valType": "str",
    "inputType": "choice",
    "categ": "Layout",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "from exp settings",
     "deg",
     "cm",
     "pix",
     "norm",
     "height",
     "degFlatPos",
     "degFlat"
    ],
    "allowedLabels": [],
    "label": "Spatial units",
    "hint": "Units of dimensions for this stimulus",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "anchor": {
    "val": "center",
    "valType": "str",
    "inputType": "choice",
    "categ": "Layout",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [
     "center",
     "top-center",
     "bottom-center",
     "center-left",
     "center-right",
     "top-left",
     "top-right",
     "bottom-left",
     "bottom-right"
    ],
    "allowedLabels": [],
    "label": "Anchor",
    "hint": "Which point on the stimulus should be anchored to its exact position?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "ori": {
    "val": 0,
    "valType": "num",
    "inputType": "spin",
    "categ": "Layout",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [
     -360,
     360
    ],
    "allowedLabels": [],
    "label": "Orientation",
    "hint": "Orientation of this stimulus (in deg)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "editable": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Editable?",
    "hint": "Should textbox be editable?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "text": {
    "val": "Any text\n\nincluding line breaks",
    "valType": "str",
    "inputType": "multi",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Text",
    "hint": "The text to be displayed",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "placeholder": {
    "val": "Type here...",
    "valType": "str",
    "inputType": "single",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Placeholder text",
    "hint": "Placeholder text to show when there is no text contents.",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "editable",
       "condition": "==True"
      }
     ],
     "enabled": []
    }
   },
   "borderWidth": {
    "val": 2,
    "valType": "num",
    "inputType": "single",
    "categ": "Appearance",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Border width",
    "hint": "Textbox border width",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "font": {
    "val": "Arial",
    "valType": "str",
    "inputType": "font",
    "categ": "Formatting",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Font",
    "hint": "The font name (e.g. Comic Sans)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "letterHeight": {
    "val": 0.05,
    "valType": "num",
    "inputType": "single",
    "categ": "Formatting",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Letter height",
    "hint": "Specifies the height of the letter (the width is then determined by the font)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "lineSpacing": {
    "val": 1.0,
    "valType": "num",
    "inputType": "single",
    "categ": "Formatting",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Line spacing",
    "hint": "Defines the space between lines",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "bold": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Formatting",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Bold",
    "hint": "Should text be bold?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "italic": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Formatting",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Italic",
    "hint": "Should text be italic?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "saveStartStop": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Save onset/offset times",
    "hint": "Store the onset/offset times in the data file (as well as in the log file).",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "syncScreenRefresh": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Sync timing with screen refresh",
    "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "disabled": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Disable Component",
    "hint": "Disable this Component",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "contrast": {
    "val": 1,
    "valType": "num",
    "inputType": "single",
    "categ": "Appearance",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Contrast",
    "hint": "Contrast of the stimulus (1.0=unchanged contrast, 0.5=decrease contrast, 0.0=uniform/no contrast, -0.5=slightly inverted, -1.0=totally inverted)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "validator": {
    "val": "",
    "valType": "code",
    "inputType": "choice",
    "categ": "Testing",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": "python:///psychopy.experiment.components._base:BaseComponent.getAllValidatorRoutineVals",
    "allowedLabels": "python:///psychopy.experiment.components._base:BaseComponent.getAllValidatorRoutineLabels",
    "label": "Validate with...",
    "hint": "Name of validator Component/Routine to use to check the timing of this stimulus.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "flipHoriz": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Layout",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Flip horizontal",
    "hint": "horiz = left-right reversed; vert = up-down reversed; $var = variable",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "flipVert": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Layout",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Flip vertical",
    "hint": "horiz = left-right reversed; vert = up-down reversed; $var = variable",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "draggable": {
    "val": false,
    "valType": "code",
    "inputType": "bool",
    "categ": "Layout",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Draggable?",
    "hint": "Should this stimulus be moveble by clicking and dragging?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "languageStyle": {
    "val": "LTR",
    "valType": "str",
    "inputType": "choice",
    "categ": "Formatting",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "LTR",
     "RTL",
     "Arabic"
    ],
    "allowedLabels": [],
    "label": "Language style",
    "hint": "Handle right-to-left (RTL) languages and Arabic reshaping",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "alignment": {
    "val": "center",
    "valType": "str",
    "inputType": "choice",
    "categ": "Formatting",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [
     "center",
     "top-center",
     "bottom-center",
     "center-left",
     "center-right",
     "top-left",
     "top-right",
     "bottom-left",
     "bottom-right"
    ],
    "allowedLabels": [],
    "label": "Alignment",
    "hint": "How should text be laid out within the box?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "overflow": {
    "val": "visible",
    "valType": "str",
    "inputType": "choice",
    "categ": "Layout",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [
     "visible",
     "scroll",
     "hidden"
    ],
    "allowedLabels": [],
    "label": "Overflow",
    "hint": "If the text is bigger than the textbox, how should it behave?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "speechPoint": {
    "val": "",
    "valType": "list",
    "inputType": "single",
    "categ": "Appearance",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Speech point [x,y]",
    "hint": "If specified, adds a speech bubble tail going to that point on screen.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "autoLog": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Auto log",
    "hint": "Automatically record all changes to this in the log file",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   }
  }
 },
 "UnknownComponent": {
  "__class__": "psychopy.experiment.components.unknown:UnknownComponent",
  "__name__": "UnknownComponent",
  "categories": [
   "Other"
  ],
  "targets": [
   "PsychoPy"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\unknown\\unknown.png",
  "tooltip": "Unknown: A component that is not known by the current installed version of PsychoPy\n(most likely from the future)",
  "version": "0.0.0",
  "beta": false,
  "validatorClasses": [],
  "hidden": true,
  "params": {
   "name": {
    "val": "",
    "valType": "code",
    "inputType": "name",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Name",
    "hint": "Name of this Component (alphanumeric or _, no spaces)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startVal": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Start",
    "hint": "When does the Component start?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startEstim": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Expected start (s)",
    "hint": "(Optional) expected start (s), purely for representing in the timeline",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startType": {
    "val": "time (s)",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "time (s)",
     "frame N",
     "condition"
    ],
    "allowedLabels": [],
    "label": "Start type",
    "hint": "How do you want to define your start point?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "stopVal": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": [],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Stop",
    "hint": "When does the Component end? (blank is endless)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "durationEstim": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Expected duration (s)",
    "hint": "(Optional) expected duration (s), purely for representing in the timeline",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "stopType": {
    "val": "duration (s)",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "duration (s)",
     "duration (frames)",
     "time (s)",
     "frame N",
     "condition"
    ],
    "allowedLabels": [],
    "label": "Stop type",
    "hint": "How do you want to define your end point?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "saveStartStop": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Save onset/offset times",
    "hint": "Store the onset/offset times in the data file (as well as in the log file).",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "syncScreenRefresh": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Sync timing with screen refresh",
    "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "disabled": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Disable Component",
    "hint": "Disable this Component",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   }
  }
 },
 "UnknownPluginComponent": {
  "__class__": "psychopy.experiment.components.unknownPlugin:UnknownPluginComponent",
  "__name__": "UnknownPluginComponent",
  "categories": [
   "Other"
  ],
  "targets": [
   "PsychoPy"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\unknownPlugin\\unknownPlugin.png",
  "tooltip": "Unknown: A component which comes from a plugin which you do not have installed & activated.",
  "version": "0.0.0",
  "beta": false,
  "validatorClasses": [],
  "hidden": true,
  "params": {
   "name": {
    "val": "",
    "valType": "code",
    "inputType": "name",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Name",
    "hint": "Name of this Component (alphanumeric or _, no spaces)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startVal": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Start",
    "hint": "When does the Component start?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startEstim": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Expected start (s)",
    "hint": "(Optional) expected start (s), purely for representing in the timeline",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startType": {
    "val": "time (s)",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "time (s)",
     "frame N",
     "condition"
    ],
    "allowedLabels": [],
    "label": "Start type",
    "hint": "How do you want to define your start point?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "stopVal": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": [],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Stop",
    "hint": "When does the Component end? (blank is endless)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "durationEstim": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Expected duration (s)",
    "hint": "(Optional) expected duration (s), purely for representing in the timeline",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "stopType": {
    "val": "duration (s)",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "duration (s)",
     "duration (frames)",
     "time (s)",
     "frame N",
     "condition"
    ],
    "allowedLabels": [],
    "label": "Stop type",
    "hint": "How do you want to define your end point?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "saveStartStop": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Save onset/offset times",
    "hint": "Store the onset/offset times in the data file (as well as in the log file).",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "syncScreenRefresh": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Sync timing with screen refresh",
    "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "disabled": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Disable Component",
    "hint": "Disable this Component",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   }
  }
 },
 "VariableComponent": {
  "__class__": "psychopy.experiment.components.variable:VariableComponent",
  "__name__": "VariableComponent",
  "categories": [
   "Custom"
  ],
  "targets": [
   "PsychoPy"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\variable\\variable.png",
  "tooltip": "Variable: create a new variable",
  "version": "0.0.0",
  "beta": false,
  "validatorClasses": [],
  "hidden": false,
  "params": {
   "name": {
    "val": "var1",
    "valType": "code",
    "inputType": "name",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Name",
    "hint": "Name of this Component (alphanumeric or _, no spaces)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startVal": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Start",
    "hint": "When does the Component start?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startEstim": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Expected start (s)",
    "hint": "(Optional) expected start (s), purely for representing in the timeline",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startType": {
    "val": "time (s)",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "time (s)",
     "frame N",
     "condition"
    ],
    "allowedLabels": [],
    "label": "Start type",
    "hint": "How do you want to define your start point?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "stopVal": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": [],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Stop",
    "hint": "When does the Component end? (blank is endless)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "durationEstim": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Expected duration (s)",
    "hint": "(Optional) expected duration (s), purely for representing in the timeline",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "stopType": {
    "val": "duration (s)",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "duration (s)",
     "duration (frames)",
     "time (s)",
     "frame N",
     "condition"
    ],
    "allowedLabels": [],
    "label": "Stop type",
    "hint": "How do you want to define your end point?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startExpValue": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Experiment start value",
    "hint": "The start value. A variable can be set to any value.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "saveStartExp": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Save exp start value",
    "hint": "Save the experiment start value in data file.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startRoutineValue": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Routine start value",
    "hint": "Set the value for the beginning of each Routine.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "saveStartRoutine": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Save Routine start value",
    "hint": "Save the Routine start value in data file.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "startFrameValue": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Frame start value",
    "hint": "Set the value for the beginning of every screen refresh.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "saveFrameValue": {
    "val": "never",
    "valType": "str",
    "inputType": "choice",
    "categ": "Data",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [
     "first",
     "last",
     "all",
     "never"
    ],
    "allowedLabels": [],
    "label": "Save frame value",
    "hint": "Save choice of frame value in data file.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "saveEndRoutine": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Save Routine end value",
    "hint": "Save the Routine end value in data file.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "saveEndExp": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": "constant",
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Save exp end value",
    "hint": "Save the experiment end value in data file.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "saveStartStop": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Save onset/offset times",
    "hint": "Store the onset/offset times in the data file (as well as in the log file).",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "syncScreenRefresh": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Sync timing with screen refresh",
    "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "disabled": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Disable Component",
    "hint": "Disable this Component",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   }
  }
 },
 "BaseStandaloneRoutine": {
  "__class__": "psychopy.experiment.routines._base:BaseStandaloneRoutine",
  "__name__": "BaseStandaloneRoutine",
  "categories": [
   "Custom"
  ],
  "targets": [],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\routines\\unknown\\unknown.png",
  "tooltip": "",
  "version": "0.0.0",
  "beta": false,
  "hidden": false,
  "params": {
   "stopVal": {
    "val": "",
    "valType": "num",
    "inputType": "single",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": [],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Stop",
    "hint": "When does the Routine end? (blank is endless)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "stopType": {
    "val": "duration (s)",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "duration (s)",
     "duration (frames)",
     "condition"
    ],
    "allowedLabels": [],
    "label": "Stop type...",
    "hint": "How do you want to define your end point?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "name": {
    "val": "",
    "valType": "code",
    "inputType": "name",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Name",
    "hint": "Name of this Routine (alphanumeric or _, no spaces)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "disabled": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Disable Routine",
    "hint": "Disable this Routine",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   }
  }
 },
 "BaseDeviceRoutine": {
  "__class__": "psychopy.experiment.routines._base:BaseDeviceRoutine",
  "__name__": "BaseDeviceRoutine",
  "categories": [
   "Custom"
  ],
  "targets": [],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\routines\\unknown\\unknown.png",
  "tooltip": "",
  "version": "0.0.0",
  "beta": false,
  "hidden": false,
  "params": {
   "stopVal": {
    "val": "",
    "valType": "num",
    "inputType": "single",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": [],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Stop",
    "hint": "When does the Routine end? (blank is endless)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "stopType": {
    "val": "duration (s)",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "duration (s)",
     "duration (frames)",
     "condition"
    ],
    "allowedLabels": [],
    "label": "Stop type...",
    "hint": "How do you want to define your end point?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "name": {
    "val": "",
    "valType": "code",
    "inputType": "name",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Name",
    "hint": "Name of this Routine (alphanumeric or _, no spaces)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "deviceLabel": {
    "val": "",
    "valType": "device",
    "inputType": "device",
    "categ": "Device",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": "python:///psychopy.experiment.devices:DeviceMixin.addDeviceParams.<locals>.getValues",
    "allowedLabels": "python:///psychopy.experiment.devices:DeviceMixin.addDeviceParams.<locals>.getLabels",
    "label": "Device",
    "hint": "The named device from Device Manager to use for this Component.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "disabled": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Disable Routine",
    "hint": "Disable this Routine",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   }
  }
 },
 "BaseValidatorRoutine": {
  "__class__": "psychopy.experiment.routines._base:BaseValidatorRoutine",
  "__name__": "BaseValidatorRoutine",
  "categories": [
   "Custom"
  ],
  "targets": [],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\routines\\unknown\\unknown.png",
  "tooltip": "",
  "version": "0.0.0",
  "beta": false,
  "hidden": false,
  "params": {
   "stopVal": {
    "val": "",
    "valType": "num",
    "inputType": "single",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": [],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Stop",
    "hint": "When does the Routine end? (blank is endless)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "stopType": {
    "val": "duration (s)",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "duration (s)",
     "duration (frames)",
     "condition"
    ],
    "allowedLabels": [],
    "label": "Stop type...",
    "hint": "How do you want to define your end point?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "name": {
    "val": "",
    "valType": "code",
    "inputType": "name",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Name",
    "hint": "Name of this Routine (alphanumeric or _, no spaces)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "deviceLabel": {
    "val": "",
    "valType": "device",
    "inputType": "device",
    "categ": "Device",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": "python:///psychopy.experiment.devices:DeviceMixin.addDeviceParams.<locals>.getValues",
    "allowedLabels": "python:///psychopy.experiment.devices:DeviceMixin.addDeviceParams.<locals>.getLabels",
    "label": "Device",
    "hint": "The named device from Device Manager to use for this Component.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "disabled": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Disable Routine",
    "hint": "Disable this Routine",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   }
  }
 },
 "VisualValidatorRoutine": {
  "__class__": "psychopy.experiment.routines.visualValidator:VisualValidatorRoutine",
  "__name__": "VisualValidatorRoutine",
  "categories": [
   "Validation"
  ],
  "targets": [
   "PsychoPy"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\routines\\visualValidator\\visual_validator.png",
  "tooltip": "Use a light sensor to confirm that visual stimuli are presented when they should be.",
  "version": "2025.1.0",
  "beta": false,
  "hidden": false,
  "params": {
   "name": {
    "val": "visualVal",
    "valType": "code",
    "inputType": "name",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Name",
    "hint": "Name of this Routine (alphanumeric or _, no spaces)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "deviceLabel": {
    "val": "",
    "valType": "device",
    "inputType": "device",
    "categ": "Device",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": "python:///psychopy.experiment.devices:DeviceMixin.addDeviceParams.<locals>.getValues",
    "allowedLabels": "python:///psychopy.experiment.devices:DeviceMixin.addDeviceParams.<locals>.getLabels",
    "label": "Device",
    "hint": "The named device from Device Manager to use for this Component.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "findThreshold": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Find best threshold?",
    "hint": "Run a brief Routine to find the best threshold for the light sensor at experiment start?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "threshold": {
    "val": 0.5,
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Threshold",
    "hint": "Light threshold at which the light sensor should register a positive, units go from 0 (least sensitive) to 1 (most sensitive).",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "findSensor": {
    "val": true,
    "valType": "code",
    "inputType": "bool",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Find sensor?",
    "hint": "Run a brief Routine to find the size and position of the light sensor at experiment start?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "sensorPos": {
    "val": "(1, 1)",
    "valType": "list",
    "inputType": "single",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Position [x,y]",
    "hint": "Position of the light sensor on the window.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "sensorSize": {
    "val": "(0.1, 0.1)",
    "valType": "list",
    "inputType": "single",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Size [x,y]",
    "hint": "Size of the area covered by the light sensor on the window.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "sensorUnits": {
    "val": "norm",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "from exp settings",
     "deg",
     "cm",
     "pix",
     "norm",
     "height",
     "degFlatPos",
     "degFlat"
    ],
    "allowedLabels": [],
    "label": "Spatial units",
    "hint": "Spatial units in which the light sensor size and position are specified.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "channel": {
    "val": "0",
    "valType": "code",
    "inputType": "single",
    "categ": "Device",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Light sensor channel",
    "hint": "If relevant, a channel number attached to the light sensor, to distinguish it from other light sensors on the same port. Leave blank to use the first light sensor which can detect the Window.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "disabled": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Disable Routine",
    "hint": "Disable this Routine",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   }
  }
 },
 "AudioValidatorRoutine": {
  "__class__": "psychopy.experiment.routines.audioValidator:AudioValidatorRoutine",
  "__name__": "AudioValidatorRoutine",
  "categories": [
   "Validation"
  ],
  "targets": [
   "PsychoPy"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\routines\\audioValidator\\audio_validator.png",
  "tooltip": "Use a sound sensor to confirm that audio stimuli are presented when they should be.",
  "version": "2025.1.0",
  "beta": false,
  "hidden": false,
  "params": {
   "name": {
    "val": "audioVal",
    "valType": "code",
    "inputType": "name",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Name",
    "hint": "Name of this Routine (alphanumeric or _, no spaces)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "deviceLabel": {
    "val": "",
    "valType": "device",
    "inputType": "device",
    "categ": "Device",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": "python:///psychopy.experiment.devices:DeviceMixin.addDeviceParams.<locals>.getValues",
    "allowedLabels": "python:///psychopy.experiment.devices:DeviceMixin.addDeviceParams.<locals>.getLabels",
    "label": "Device",
    "hint": "The named device from Device Manager to use for this Component.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "threshold": {
    "val": 0.5,
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Threshold",
    "hint": "Arbitrary volume threshold at which the sound sensor should register a positive, units go from 0 (least volume) to 1 (most volume).",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "channel": {
    "val": "0",
    "valType": "code",
    "inputType": "single",
    "categ": "Device",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Sound sensor channel",
    "hint": "If relevant, a channel number attached to the sound sensor, to distinguish it from other sound sensors on the same port. Leave blank to use the first sound sensor which can detect the speaker.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "disabled": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Disable Routine",
    "hint": "Disable this Routine",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   }
  }
 },
 "UnknownRoutine": {
  "__class__": "psychopy.experiment.routines.unknown:UnknownRoutine",
  "__name__": "UnknownRoutine",
  "categories": [
   "Other"
  ],
  "targets": [],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\routines\\unknown\\unknown.png",
  "tooltip": "Unknown routine",
  "version": "0.0.0",
  "beta": false,
  "hidden": true,
  "params": {
   "stopVal": {
    "val": "",
    "valType": "num",
    "inputType": "single",
    "categ": "Basic",
    "updates": "constant",
    "allowedUpdates": [],
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Stop",
    "hint": "When does the Routine end? (blank is endless)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "stopType": {
    "val": "duration (s)",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "duration (s)",
     "duration (frames)",
     "condition"
    ],
    "allowedLabels": [],
    "label": "Stop type...",
    "hint": "How do you want to define your end point?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "name": {
    "val": "",
    "valType": "code",
    "inputType": "name",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Name",
    "hint": "Name of this Routine (alphanumeric or _, no spaces)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "disabled": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Disable Routine",
    "hint": "Disable this Routine",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   }
  }
 },
 "EyetrackerCalibrationRoutine": {
  "__class__": "psychopy.experiment.routines.eyetracker_calibrate:EyetrackerCalibrationRoutine",
  "__name__": "EyetrackerCalibrationRoutine",
  "categories": [
   "Eyetracking"
  ],
  "targets": [
   "PsychoPy"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\routines\\eyetracker_calibrate\\eyetracker_calib.png",
  "tooltip": "Calibration routine for eyetrackers",
  "version": "2021.2.0",
  "beta": true,
  "hidden": false,
  "params": {
   "name": {
    "val": "calibration",
    "valType": "code",
    "inputType": "name",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Name",
    "hint": "Name of this Routine (alphanumeric or _, no spaces)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "targetLayout": {
    "val": "NINE_POINTS",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "THREE_POINTS",
     "FIVE_POINTS",
     "NINE_POINTS",
     "THIRTEEN_POINTS"
    ],
    "allowedLabels": [],
    "label": "Target layout",
    "hint": "How many targets do you want to be presented for calibration? Points will be displayed in a grid.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "randomisePos": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Randomise target positions",
    "hint": "Should the order of target positions be randomised?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "textColor": {
    "val": "white",
    "valType": "color",
    "inputType": "color",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Text color",
    "hint": "Text foreground color",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "useCustom": {
    "val": false,
    "valType": "code",
    "inputType": "bool",
    "categ": "Target",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Use custom?",
    "hint": "Check this box to use a custom stimulus as a calibration target, rather than creating one from params.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "customTarget": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Target",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Custom target",
    "hint": "Give the name of any visual Component to use it as a calibration target.",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "useCustom",
       "condition": ""
      }
     ],
     "enabled": []
    }
   },
   "fillColor": {
    "val": "",
    "valType": "color",
    "inputType": "color",
    "categ": "Target",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Outer fill color",
    "hint": "Fill color of the outer part of the target",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "borderColor": {
    "val": "black",
    "valType": "color",
    "inputType": "color",
    "categ": "Target",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Outer border color",
    "hint": "Border color of the outer part of the target",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "innerFillColor": {
    "val": "green",
    "valType": "color",
    "inputType": "color",
    "categ": "Target",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Inner fill color",
    "hint": "Fill color of the inner part of the target",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "innerBorderColor": {
    "val": "black",
    "valType": "color",
    "inputType": "color",
    "categ": "Target",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Inner border color",
    "hint": "Border color of the inner part of the target",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "colorSpace": {
    "val": "rgb",
    "valType": "str",
    "inputType": "choice",
    "categ": "Target",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "rgb",
     "dkl",
     "lms",
     "hsv"
    ],
    "allowedLabels": [],
    "label": "Color space",
    "hint": "In what format (color space) have you specified the colors? (rgb, dkl, lms, hsv)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "borderWidth": {
    "val": 2,
    "valType": "num",
    "inputType": "single",
    "categ": "Target",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Outer border width",
    "hint": "Width of the line around the outer part of the target",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "innerBorderWidth": {
    "val": 2,
    "valType": "num",
    "inputType": "single",
    "categ": "Target",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Inner border width",
    "hint": "Width of the line around the inner part of the target",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "outerRadius": {
    "val": 0.01,
    "valType": "num",
    "inputType": "single",
    "categ": "Target",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Outer radius",
    "hint": "Size (radius) of the outer part of the target",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "innerRadius": {
    "val": 0.0035,
    "valType": "num",
    "inputType": "single",
    "categ": "Target",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Inner radius",
    "hint": "Size (radius) of the inner part of the target",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "progressMode": {
    "val": "time",
    "valType": "str",
    "inputType": "choice",
    "categ": "Animation",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "space key",
     "time"
    ],
    "allowedLabels": [],
    "label": "Progress mode",
    "hint": "Should the target move to the next position after a keypress or after an amount of time?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "targetDur": {
    "val": 1.5,
    "valType": "num",
    "inputType": "single",
    "categ": "Animation",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Target duration",
    "hint": "Time limit (s) after which progress to next position",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "progressMode",
       "condition": "in ['time', 'either']"
      }
     ],
     "enabled": []
    }
   },
   "expandDur": {
    "val": 1,
    "valType": "num",
    "inputType": "single",
    "categ": "Animation",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Expand / contract duration",
    "hint": "Duration of the target expand/contract animation",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "progressMode",
       "condition": "in ['space key', 'either']"
      }
     ],
     "enabled": []
    }
   },
   "expandScale": {
    "val": 1.5,
    "valType": "num",
    "inputType": "single",
    "categ": "Animation",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Expand scale",
    "hint": "How many times bigger than its size the target grows",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "movementAnimation": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Animation",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Animate position changes",
    "hint": "Enable / disable animations as target stim changes position",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "movementDur": {
    "val": 1.0,
    "valType": "num",
    "inputType": "single",
    "categ": "Animation",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Movement duration",
    "hint": "Duration of the animation during position changes.",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "movementAnimation",
       "condition": "== True"
      }
     ],
     "enabled": []
    }
   },
   "targetDelay": {
    "val": 1.0,
    "valType": "num",
    "inputType": "single",
    "categ": "Animation",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Target delay",
    "hint": "Duration of the delay between positions.",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "movementAnimation",
       "condition": "== False"
      }
     ],
     "enabled": []
    }
   },
   "disabled": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Disable Routine",
    "hint": "Disable this Routine",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "units": {
    "val": "from exp settings",
    "valType": "str",
    "inputType": "choice",
    "categ": "Target",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "from exp settings"
    ],
    "allowedLabels": [],
    "label": "Spatial units",
    "hint": "Units of dimensions for this stimulus",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   }
  }
 },
 "CounterbalanceRoutine": {
  "__class__": "psychopy.experiment.routines.counterbalance:CounterbalanceRoutine",
  "__name__": "CounterbalanceRoutine",
  "categories": [
   "Custom"
  ],
  "targets": [
   "PsychoPy",
   "PsychoJS"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\routines\\counterbalance\\counterbalance.png",
  "tooltip": "Counterbalance Routine: use the Shelf to choose a value taking into account previous runs of this experiment.",
  "version": "0.0.0",
  "beta": true,
  "hidden": false,
  "params": {
   "name": {
    "val": "counterbalance",
    "valType": "code",
    "inputType": "name",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Name",
    "hint": "Name of this Routine (alphanumeric or _, no spaces)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "specMode": {
    "val": "uniform",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "uniform",
     "file"
    ],
    "allowedLabels": [
     "Num. groups",
     "Conditions file (local only)"
    ],
    "label": "Groups from...",
    "hint": "Specify groups using an Excel file (for fine tuned control), specify as a variable name, or specify a number of groups to create equally likely groups with a uniform cap.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "conditionsFile": {
    "val": "",
    "valType": "file",
    "inputType": "table",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Conditions",
    "hint": "Name of a file specifying the parameters for each group (.csv, .xlsx, or .pkl). Browse to select a file. Right-click to preview file contents, or create a new file.",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "specMode",
       "condition": "=='file'"
      }
     ],
     "enabled": []
    }
   },
   "nGroups": {
    "val": 2,
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Num. groups",
    "hint": "Number of groups to use.",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "specMode",
       "condition": "=='uniform'"
      }
     ],
     "enabled": []
    }
   },
   "nSlots": {
    "val": 10,
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Slots per group",
    "hint": "Max number of participants in each group for each repeat.",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "specMode",
       "condition": "=='uniform'"
      }
     ],
     "enabled": []
    }
   },
   "nReps": {
    "val": 1,
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Num. repeats",
    "hint": "How many times to run slots down to depletion?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "endExperimentOnDepletion": {
    "val": "ignore",
    "valType": "code",
    "inputType": "bool",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "End experiment on depletion",
    "hint": "When all slots and repetitions are depleted, should the experiment end or continue with .finished on this Routine as True?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "saveData": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Save data",
    "hint": "Save chosen group and associated params this repeat to the data file?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "saveRemaining": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Save remaining cap",
    "hint": "Save the remaining cap for the chosen group this repeat to the data file?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "disabled": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Disable Routine",
    "hint": "Disable this Routine",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "conditionsVariable": {
    "val": "",
    "valType": "code",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Conditions",
    "hint": "Name of a variable specifying the parameters for each group. Should be a list of dicts, like the output of data.conditionsFromFile",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "specMode",
       "condition": "=='variable'"
      }
     ],
     "enabled": []
    }
   }
  }
 },
 "EyetrackerValidationRoutine": {
  "__class__": "psychopy.experiment.routines.eyetracker_validate:EyetrackerValidationRoutine",
  "__name__": "EyetrackerValidationRoutine",
  "categories": [
   "Eyetracking"
  ],
  "targets": [
   "PsychoPy"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\routines\\eyetracker_validate\\eyetracker_valid.png",
  "tooltip": "Validation routine for eyetrackers",
  "version": "2021.2.0",
  "beta": true,
  "hidden": false,
  "params": {
   "name": {
    "val": "validation",
    "valType": "code",
    "inputType": "name",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Name",
    "hint": "Name of this Routine (alphanumeric or _, no spaces)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "targetLayout": {
    "val": "NINE_POINTS",
    "valType": "str",
    "inputType": "choice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "THREE_POINTS",
     "FIVE_POINTS",
     "NINE_POINTS",
     "THIRTEEN_POINTS",
     "SEVENTEEN_POINTS",
     "CUSTOM..."
    ],
    "allowedLabels": [],
    "label": "Target layout",
    "hint": "How many targets do you want to be presented for calibration? Points will be displayed in a grid.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "targetPositions": {
    "val": "NINE_POINTS",
    "valType": "list",
    "inputType": "single",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Target positions",
    "hint": "List of positions (x, y) at which the target can appear",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "targetLayout",
       "condition": "not in ['THREE_POINTS', 'FIVE_POINTS', 'NINE_POINTS', 'THIRTEEN_POINTS', 'SEVENTEEN_POINTS']"
      }
     ],
     "enabled": []
    }
   },
   "randomisePos": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Randomise target positions",
    "hint": "Should the order of target positions be randomised?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "cursorFillColor": {
    "val": "green",
    "valType": "color",
    "inputType": "color",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Gaze cursor color",
    "hint": "Fill color of the gaze cursor",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "textColor": {
    "val": "auto",
    "valType": "color",
    "inputType": "color",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Text color",
    "hint": "Color of text used in validation procedure.",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "fillColor": {
    "val": "",
    "valType": "color",
    "inputType": "color",
    "categ": "Target",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Outer fill color",
    "hint": "Fill color of the outer part of the target",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "borderColor": {
    "val": "black",
    "valType": "color",
    "inputType": "color",
    "categ": "Target",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Outer border color",
    "hint": "Border color of the outer part of the target",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "innerFillColor": {
    "val": "green",
    "valType": "color",
    "inputType": "color",
    "categ": "Target",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Inner fill color",
    "hint": "Fill color of the inner part of the target",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "innerBorderColor": {
    "val": "black",
    "valType": "color",
    "inputType": "color",
    "categ": "Target",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Inner border color",
    "hint": "Border color of the inner part of the target",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "colorSpace": {
    "val": "rgb",
    "valType": "str",
    "inputType": "choice",
    "categ": "Target",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "rgb",
     "dkl",
     "lms",
     "hsv"
    ],
    "allowedLabels": [],
    "label": "Color space",
    "hint": "In what format (color space) have you specified the colors? (rgb, dkl, lms, hsv)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "borderWidth": {
    "val": 2,
    "valType": "num",
    "inputType": "single",
    "categ": "Target",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Outer border width",
    "hint": "Width of the line around the outer part of the target",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "innerBorderWidth": {
    "val": 2,
    "valType": "num",
    "inputType": "single",
    "categ": "Target",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Inner border width",
    "hint": "Width of the line around the inner part of the target",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "outerRadius": {
    "val": 0.01,
    "valType": "num",
    "inputType": "single",
    "categ": "Target",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Outer radius",
    "hint": "Size (radius) of the outer part of the target",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "innerRadius": {
    "val": 0.0035,
    "valType": "num",
    "inputType": "single",
    "categ": "Target",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Inner radius",
    "hint": "Size (radius) of the inner part of the target",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "progressMode": {
    "val": "time",
    "valType": "str",
    "inputType": "choice",
    "categ": "Animation",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "space key",
     "time"
    ],
    "allowedLabels": [],
    "label": "Progress mode",
    "hint": "Should the target move to the next position after a keypress or after an amount of time?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "targetDur": {
    "val": 1.5,
    "valType": "num",
    "inputType": "single",
    "categ": "Animation",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Target duration",
    "hint": "Time limit (s) after which progress to next position",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "progressMode",
       "condition": "in ['time', 'either']"
      }
     ],
     "enabled": []
    }
   },
   "expandDur": {
    "val": 1,
    "valType": "num",
    "inputType": "single",
    "categ": "Animation",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Expand / contract duration",
    "hint": "Duration of the target expand/contract animation",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "progressMode",
       "condition": "in ['space key', 'either']"
      }
     ],
     "enabled": []
    }
   },
   "expandScale": {
    "val": 1.5,
    "valType": "num",
    "inputType": "single",
    "categ": "Animation",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Expand scale",
    "hint": "How many times bigger than its size the target grows",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "movementAnimation": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Animation",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Animate position changes",
    "hint": "Enable / disable animations as target stim changes position",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "movementDur": {
    "val": 1.0,
    "valType": "num",
    "inputType": "single",
    "categ": "Animation",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Movement duration",
    "hint": "Duration of the animation during position changes.",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "movementAnimation",
       "condition": "== True"
      }
     ],
     "enabled": []
    }
   },
   "targetDelay": {
    "val": 1.0,
    "valType": "num",
    "inputType": "single",
    "categ": "Animation",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Target delay",
    "hint": "Duration of the delay between positions.",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "movementAnimation",
       "condition": "== False"
      }
     ],
     "enabled": []
    }
   },
   "saveAsImg": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Save as image",
    "hint": "Save results as an image",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "showResults": {
    "val": true,
    "valType": "bool",
    "inputType": "bool",
    "categ": "Data",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Show results screen",
    "hint": "Show a screen with results after completion?",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "disabled": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Disable Routine",
    "hint": "Disable this Routine",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "units": {
    "val": "from exp settings",
    "valType": "str",
    "inputType": "choice",
    "categ": "Target",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "from exp settings"
    ],
    "allowedLabels": [],
    "label": "Spatial units",
    "hint": "Units of dimensions for this stimulus",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   }
  }
 },
 "PavloviaSurveyRoutine": {
  "__class__": "psychopy.experiment.routines.pavlovia_survey:PavloviaSurveyRoutine",
  "__name__": "PavloviaSurveyRoutine",
  "categories": [
   "Responses"
  ],
  "targets": [
   "PsychoJS"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\routines\\pavlovia_survey\\survey.png",
  "tooltip": "Run a SurveyJS survey in Pavlovia",
  "version": "2023.1.0",
  "beta": false,
  "hidden": false,
  "params": {
   "name": {
    "val": "survey",
    "valType": "code",
    "inputType": "name",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Name",
    "hint": "Name of this Routine (alphanumeric or _, no spaces)",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "surveyType": {
    "val": "id",
    "valType": "code",
    "inputType": "richChoice",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [
     "id",
     "json"
    ],
    "allowedLabels": [
     {
      "label": "Survey id",
      "body": "Linking to a survey ID from Pavlovia Surveys means that the content will automatically update if that survey changes (better for dynamic use)",
      "linkText": "How do I get my survey ID?",
      "link": "https://psychopy.org/builder/components/advanced_survey.html#get-id",
      "startShown": "always"
     },
     {
      "label": "Survey Model File",
      "body": "Inserting a JSON file (exported from Pavlovia Surveys) means that the survey is embedded within this project and will not change unless you import it again (better for archiving)",
      "linkText": "How do I get my survey model file?",
      "link": "https://psychopy.org/builder/components/advanced_survey.html#get-json",
      "startShown": "always"
     }
    ],
    "label": "Survey type",
    "hint": "",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   },
   "surveyId": {
    "val": "",
    "valType": "str",
    "inputType": "survey",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Survey id",
    "hint": "The ID for your survey on Pavlovia. Tip: Right click to open the survey in your browser!",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "surveyType",
       "condition": "=='id'"
      }
     ],
     "enabled": []
    }
   },
   "surveyJson": {
    "val": "",
    "valType": "str",
    "inputType": "file",
    "categ": "Basic",
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Survey JSON",
    "hint": "File path of the JSON file used to construct the survey",
    "plugin": null,
    "depends": {
     "shown": [
      {
       "param": "surveyType",
       "condition": "=='json'"
      }
     ],
     "enabled": []
    }
   },
   "disabled": {
    "val": false,
    "valType": "bool",
    "inputType": "bool",
    "categ": null,
    "updates": null,
    "allowedUpdates": null,
    "allowedVals": [],
    "allowedLabels": [],
    "label": "Disable Routine",
    "hint": "Disable this Routine",
    "plugin": null,
    "depends": {
     "shown": [],
     "enabled": []
    }
   }
  }
 }
}