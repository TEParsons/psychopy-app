{
 "ApertureComponent": {
  "__class__": "psychopy.experiment.components.aperture:ApertureComponent",
  "__name__": "ApertureComponent",
  "categories": [
   "Stimuli"
  ],
  "targets": [
   "PsychoPy"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\aperture\\light\\aperture.png",
  "tooltip": "Aperture: restrict the drawing of stimuli to a given region",
  "version": "0.0.0",
  "beta": false,
  "validatorClasses": [
   "VisualValidatorRoutine"
  ],
  "hidden": false,
  "params": {
   "name": {
    "val": "aperture",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "name",
    "updates": null,
    "allowedUpdates": null,
    "label": "Name",
    "hint": "Name of this Component (alphanumeric or _, no spaces)",
    "plugin": null
   },
   "startType": {
    "val": "time (s)",
    "categ": "Basic",
    "allowedVals": [
     "time (s)",
     "frame N",
     "condition"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Start type",
    "hint": "How do you want to define your start point?",
    "plugin": null
   },
   "stopType": {
    "val": "duration (s)",
    "categ": "Basic",
    "allowedVals": [
     "duration (s)",
     "duration (frames)",
     "time (s)",
     "frame N",
     "condition"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Stop type",
    "hint": "How do you want to define your end point?",
    "plugin": null
   },
   "startVal": {
    "val": 0.0,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Start",
    "hint": "When does the Component start?",
    "plugin": null
   },
   "stopVal": {
    "val": 1.0,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [],
    "label": "Stop",
    "hint": "When does the Component end? (blank is endless)",
    "plugin": null
   },
   "startEstim": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Expected start (s)",
    "hint": "(Optional) expected start (s), purely for representing in the timeline",
    "plugin": null
   },
   "durationEstim": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Expected duration (s)",
    "hint": "(Optional) expected duration (s), purely for representing in the timeline",
    "plugin": null
   },
   "saveStartStop": {
    "val": true,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Save onset/offset times",
    "hint": "Store the onset/offset times in the data file (as well as in the log file).",
    "plugin": null
   },
   "syncScreenRefresh": {
    "val": true,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Sync timing with screen refresh",
    "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
    "plugin": null
   },
   "disabled": {
    "val": false,
    "categ": "Testing",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Disable Component",
    "hint": "Disable this Component",
    "plugin": null
   },
   "units": {
    "val": "norm",
    "categ": "Layout",
    "allowedVals": [
     "from exp settings",
     "deg",
     "cm",
     "pix",
     "norm",
     "height",
     "degFlatPos",
     "degFlat"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Spatial units",
    "hint": "Units of dimensions for this stimulus",
    "plugin": null
   },
   "pos": {
    "val": [
     0,
     0
    ],
    "categ": "Layout",
    "allowedVals": [],
    "valType": "list",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Position [x,y]",
    "hint": "Where is the aperture centred?",
    "plugin": null
   },
   "size": {
    "val": 1,
    "categ": "Layout",
    "allowedVals": [],
    "valType": "list",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Size",
    "hint": "How big is the aperture? (a single number for diameter)",
    "plugin": null
   },
   "ori": {
    "val": 0,
    "categ": "Layout",
    "allowedVals": [
     -360,
     360
    ],
    "valType": "num",
    "inputType": "spin",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Orientation",
    "hint": "Orientation of this stimulus (in deg)",
    "plugin": null
   },
   "validator": {
    "val": "",
    "categ": "Testing",
    "allowedVals": [
     ""
    ],
    "valType": "code",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Validate with...",
    "hint": "Name of validator Component/Routine to use to check the timing of this stimulus.",
    "plugin": null
   },
   "nVertices": {
    "val": 4,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "int",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Num. vertices",
    "hint": "How many vertices in your regular polygon?",
    "plugin": null
   },
   "vertices": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "list",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Vertices",
    "hint": "What are the vertices of your polygon? Should be an nx2 array or a list of [x, y] lists",
    "plugin": null
   },
   "anchor": {
    "val": "center",
    "categ": "Layout",
    "allowedVals": [
     "center",
     "top-center",
     "bottom-center",
     "center-left",
     "center-right",
     "top-left",
     "top-right",
     "bottom-left",
     "bottom-right"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Anchor",
    "hint": "Which point on the aperture should be anchored to its exact position?",
    "plugin": null
   },
   "draggable": {
    "val": false,
    "categ": "Layout",
    "allowedVals": [],
    "valType": "code",
    "inputType": "bool",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Draggable?",
    "hint": "Should this stimulus be moveble by clicking and dragging?",
    "plugin": null
   },
   "shape": {
    "val": "triangle",
    "categ": "Basic",
    "allowedVals": [
     "line",
     "triangle",
     "rectangle",
     "circle",
     "cross",
     "star7",
     "arrow",
     "regular polygon...",
     "custom polygon..."
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Shape",
    "hint": "What shape is this? With 'regular polygon...' you can set number of vertices and with 'custom polygon...' you can set vertices",
    "plugin": null
   }
  }
 },
 "PolygonComponent": {
  "__class__": "psychopy.experiment.components.polygon:PolygonComponent",
  "__name__": "PolygonComponent",
  "categories": [
   "Stimuli"
  ],
  "targets": [
   "PsychoPy",
   "PsychoJS"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\polygon\\light\\polygon.png",
  "tooltip": "Polygon: any regular polygon (line, triangle, square...circle)",
  "version": "0.0.0",
  "beta": false,
  "validatorClasses": [
   "VisualValidatorRoutine"
  ],
  "hidden": false,
  "params": {
   "name": {
    "val": "polygon",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "name",
    "updates": null,
    "allowedUpdates": null,
    "label": "Name",
    "hint": "Name of this Component (alphanumeric or _, no spaces)",
    "plugin": null
   },
   "startType": {
    "val": "time (s)",
    "categ": "Basic",
    "allowedVals": [
     "time (s)",
     "frame N",
     "condition"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Start type",
    "hint": "How do you want to define your start point?",
    "plugin": null
   },
   "stopType": {
    "val": "duration (s)",
    "categ": "Basic",
    "allowedVals": [
     "duration (s)",
     "duration (frames)",
     "time (s)",
     "frame N",
     "condition"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Stop type",
    "hint": "How do you want to define your end point?",
    "plugin": null
   },
   "startVal": {
    "val": 0.0,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Start",
    "hint": "When does the Component start?",
    "plugin": null
   },
   "stopVal": {
    "val": 1.0,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [],
    "label": "Stop",
    "hint": "When does the Component end? (blank is endless)",
    "plugin": null
   },
   "startEstim": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Expected start (s)",
    "hint": "(Optional) expected start (s), purely for representing in the timeline",
    "plugin": null
   },
   "durationEstim": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Expected duration (s)",
    "hint": "(Optional) expected duration (s), purely for representing in the timeline",
    "plugin": null
   },
   "saveStartStop": {
    "val": true,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Save onset/offset times",
    "hint": "Store the onset/offset times in the data file (as well as in the log file).",
    "plugin": null
   },
   "syncScreenRefresh": {
    "val": true,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Sync timing with screen refresh",
    "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
    "plugin": null
   },
   "disabled": {
    "val": false,
    "categ": "Testing",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Disable Component",
    "hint": "Disable this Component",
    "plugin": null
   },
   "units": {
    "val": "from exp settings",
    "categ": "Layout",
    "allowedVals": [
     "from exp settings",
     "deg",
     "cm",
     "pix",
     "norm",
     "height",
     "degFlatPos",
     "degFlat"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Spatial units",
    "hint": "Units of dimensions for this stimulus",
    "plugin": null
   },
   "colorSpace": {
    "val": "rgb",
    "categ": "Appearance",
    "allowedVals": [
     "rgb",
     "dkl",
     "lms",
     "hsv"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Color space",
    "hint": "In what format (color space) have you specified the colors? (rgb, dkl, lms, hsv)",
    "plugin": null
   },
   "fillColor": {
    "val": "white",
    "categ": "Appearance",
    "allowedVals": [],
    "valType": "color",
    "inputType": "color",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Fill color",
    "hint": "Fill color of this stimulus (e.g. $[1,1,0], red )",
    "plugin": null
   },
   "opacity": {
    "val": "",
    "categ": "Appearance",
    "allowedVals": [],
    "valType": "num",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Opacity",
    "hint": "Opacity of the stimulus (1=opaque, 0=fully transparent, 0.5=translucent). Leave blank for each color to have its own opacity (recommended if any color is None).",
    "plugin": null
   },
   "contrast": {
    "val": 1,
    "categ": "Appearance",
    "allowedVals": [],
    "valType": "num",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Contrast",
    "hint": "Contrast of the stimulus (1.0=unchanged contrast, 0.5=decrease contrast, 0.0=uniform/no contrast, -0.5=slightly inverted, -1.0=totally inverted)",
    "plugin": null
   },
   "pos": {
    "val": [
     0,
     0
    ],
    "categ": "Layout",
    "allowedVals": [],
    "valType": "list",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Position [x,y]",
    "hint": "Position of this stimulus (e.g. [1,2] )",
    "plugin": null
   },
   "size": {
    "val": [
     0.5,
     0.5
    ],
    "categ": "Layout",
    "allowedVals": [],
    "valType": "list",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Size [w,h]",
    "hint": "Size of this stimulus [w,h]. Note that for a line only the first value is used, for triangle and rect the [w,h] is as expected,\n but for higher-order polygons it represents the [w,h] of the ellipse that the polygon sits on!! ",
    "plugin": null
   },
   "ori": {
    "val": 0,
    "categ": "Layout",
    "allowedVals": [
     -360,
     360
    ],
    "valType": "num",
    "inputType": "spin",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Orientation",
    "hint": "Orientation of this stimulus (in deg)",
    "plugin": null
   },
   "validator": {
    "val": "",
    "categ": "Testing",
    "allowedVals": [
     ""
    ],
    "valType": "code",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Validate with...",
    "hint": "Name of validator Component/Routine to use to check the timing of this stimulus.",
    "plugin": null
   },
   "nVertices": {
    "val": 4,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "int",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Num. vertices",
    "hint": "How many vertices in your regular polygon?",
    "plugin": null
   },
   "vertices": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "list",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Vertices",
    "hint": "What are the vertices of your polygon? Should be an nx2 array or a list of [x, y] lists",
    "plugin": null
   },
   "anchor": {
    "val": "center",
    "categ": "Layout",
    "allowedVals": [
     "center",
     "top-center",
     "bottom-center",
     "center-left",
     "center-right",
     "top-left",
     "top-right",
     "bottom-left",
     "bottom-right"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Anchor",
    "hint": "Which point on the stimulus should be anchored to its exact position?",
    "plugin": null
   },
   "draggable": {
    "val": false,
    "categ": "Layout",
    "allowedVals": [],
    "valType": "code",
    "inputType": "bool",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Draggable?",
    "hint": "Should this stimulus be moveble by clicking and dragging?",
    "plugin": null
   },
   "shape": {
    "val": "triangle",
    "categ": "Basic",
    "allowedVals": [
     "line",
     "triangle",
     "rectangle",
     "circle",
     "cross",
     "star7",
     "arrow",
     "regular polygon...",
     "custom polygon..."
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Shape",
    "hint": "What shape is this? With 'regular polygon...' you can set number of vertices and with 'custom polygon...' you can set vertices",
    "plugin": null
   },
   "lineColor": {
    "val": "white",
    "categ": "Appearance",
    "allowedVals": [],
    "valType": "color",
    "inputType": "color",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Border color",
    "hint": "Border color of this stimulus (e.g. $[1,1,0], red )",
    "plugin": null
   },
   "lineWidth": {
    "val": 1,
    "categ": "Appearance",
    "allowedVals": [],
    "valType": "num",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Line width",
    "hint": "Width of the shape's line (always in pixels - this does NOT use 'units')",
    "plugin": null
   },
   "interpolate": {
    "val": "linear",
    "categ": "Texture",
    "allowedVals": [
     "linear",
     "nearest"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": "constant",
    "allowedUpdates": [],
    "label": "Interpolate",
    "hint": "How should the image be interpolated if/when rescaled",
    "plugin": null
   }
  }
 },
 "BrushComponent": {
  "__class__": "psychopy.experiment.components.brush:BrushComponent",
  "__name__": "BrushComponent",
  "categories": [
   "Responses"
  ],
  "targets": [
   "PsychoPy",
   "PsychoJS"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\brush\\light\\brush.png",
  "tooltip": "Brush: a drawing tool",
  "version": "0.0.0",
  "beta": false,
  "validatorClasses": [
   "VisualValidatorRoutine"
  ],
  "hidden": false,
  "params": {
   "name": {
    "val": "brush",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "name",
    "updates": null,
    "allowedUpdates": null,
    "label": "Name",
    "hint": "Name of this Component (alphanumeric or _, no spaces)",
    "plugin": null
   },
   "startType": {
    "val": "time (s)",
    "categ": "Basic",
    "allowedVals": [
     "time (s)",
     "frame N",
     "condition"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Start type",
    "hint": "How do you want to define your start point?",
    "plugin": null
   },
   "stopType": {
    "val": "duration (s)",
    "categ": "Basic",
    "allowedVals": [
     "duration (s)",
     "duration (frames)",
     "time (s)",
     "frame N",
     "condition"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Stop type",
    "hint": "How do you want to define your end point?",
    "plugin": null
   },
   "startVal": {
    "val": 0.0,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Start",
    "hint": "When does the Component start?",
    "plugin": null
   },
   "stopVal": {
    "val": 1.0,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [],
    "label": "Stop",
    "hint": "When does the Component end? (blank is endless)",
    "plugin": null
   },
   "startEstim": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Expected start (s)",
    "hint": "(Optional) expected start (s), purely for representing in the timeline",
    "plugin": null
   },
   "durationEstim": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Expected duration (s)",
    "hint": "(Optional) expected duration (s), purely for representing in the timeline",
    "plugin": null
   },
   "saveStartStop": {
    "val": true,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Save onset/offset times",
    "hint": "Store the onset/offset times in the data file (as well as in the log file).",
    "plugin": null
   },
   "syncScreenRefresh": {
    "val": true,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Sync timing with screen refresh",
    "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
    "plugin": null
   },
   "disabled": {
    "val": false,
    "categ": "Testing",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Disable Component",
    "hint": "Disable this Component",
    "plugin": null
   },
   "opacity": {
    "val": "",
    "categ": "Appearance",
    "allowedVals": [],
    "valType": "num",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Opacity",
    "hint": "The line opacity",
    "plugin": null
   },
   "contrast": {
    "val": 1,
    "categ": "Appearance",
    "allowedVals": [],
    "valType": "num",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Contrast",
    "hint": "Contrast of the stimulus (1.0=unchanged contrast, 0.5=decrease contrast, 0.0=uniform/no contrast, -0.5=slightly inverted, -1.0=totally inverted)",
    "plugin": null
   },
   "validator": {
    "val": "",
    "categ": "Testing",
    "allowedVals": [
     ""
    ],
    "valType": "code",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Validate with...",
    "hint": "Name of validator Component/Routine to use to check the timing of this stimulus.",
    "plugin": null
   },
   "lineColor": {
    "val": "$[1,1,1]",
    "categ": "Appearance",
    "allowedVals": [],
    "valType": "color",
    "inputType": "color",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat"
    ],
    "label": "Brush color",
    "hint": "Fill color of this brush",
    "plugin": null
   },
   "lineWidth": {
    "val": 1.5,
    "categ": "Appearance",
    "allowedVals": [],
    "valType": "num",
    "inputType": "spin",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat"
    ],
    "label": "Brush size",
    "hint": "Width of the brush's line (always in pixels and limited to 10px max width)",
    "plugin": null
   },
   "lineColorSpace": {
    "val": "rgb",
    "categ": "Appearance",
    "allowedVals": [
     "rgb",
     "dkl",
     "lms",
     "hsv"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Color space",
    "hint": "In what format (color space) have you specified the colors? (rgb, dkl, lms, hsv)",
    "plugin": null
   },
   "buttonRequired": {
    "val": true,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat"
    ],
    "label": "Press button",
    "hint": "Should the participant have to press a button to paint (True), or should it be always on (False)?",
    "plugin": null
   }
  }
 },
 "ButtonComponent": {
  "__class__": "psychopy.experiment.components.button:ButtonComponent",
  "__name__": "ButtonComponent",
  "categories": [
   "Responses"
  ],
  "targets": [
   "PsychoPy",
   "PsychoJS"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\button\\light\\button.png",
  "tooltip": "Button: A clickable textbox",
  "version": "2021.1.0",
  "beta": true,
  "validatorClasses": [
   "VisualValidatorRoutine"
  ],
  "hidden": false,
  "params": {
   "name": {
    "val": "button",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "name",
    "updates": null,
    "allowedUpdates": null,
    "label": "Name",
    "hint": "Name of this Component (alphanumeric or _, no spaces)",
    "plugin": null
   },
   "startType": {
    "val": "time (s)",
    "categ": "Basic",
    "allowedVals": [
     "time (s)",
     "frame N",
     "condition"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Start type",
    "hint": "How do you want to define your start point?",
    "plugin": null
   },
   "stopType": {
    "val": "duration (s)",
    "categ": "Basic",
    "allowedVals": [
     "duration (s)",
     "duration (frames)",
     "time (s)",
     "frame N",
     "condition"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Stop type",
    "hint": "How do you want to define your end point?",
    "plugin": null
   },
   "startVal": {
    "val": 0,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Start",
    "hint": "When does the Component start?",
    "plugin": null
   },
   "stopVal": {
    "val": 1.0,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [],
    "label": "Stop",
    "hint": "When does the Component end? (blank is endless)",
    "plugin": null
   },
   "startEstim": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Expected start (s)",
    "hint": "(Optional) expected start (s), purely for representing in the timeline",
    "plugin": null
   },
   "durationEstim": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Expected duration (s)",
    "hint": "(Optional) expected duration (s), purely for representing in the timeline",
    "plugin": null
   },
   "saveStartStop": {
    "val": true,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Save onset/offset times",
    "hint": "Store the onset/offset times in the data file (as well as in the log file).",
    "plugin": null
   },
   "syncScreenRefresh": {
    "val": true,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Sync timing with screen refresh",
    "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
    "plugin": null
   },
   "disabled": {
    "val": false,
    "categ": "Testing",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Disable Component",
    "hint": "Disable this Component",
    "plugin": null
   },
   "units": {
    "val": "from exp settings",
    "categ": "Layout",
    "allowedVals": [
     "from exp settings",
     "deg",
     "cm",
     "pix",
     "norm",
     "height",
     "degFlatPos",
     "degFlat"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Spatial units",
    "hint": "Units of dimensions for this stimulus",
    "plugin": null
   },
   "color": {
    "val": "white",
    "categ": "Appearance",
    "allowedVals": [],
    "valType": "color",
    "inputType": "color",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Text color",
    "hint": "Foreground color of this stimulus (e.g. $[1,1,0], red )",
    "plugin": null
   },
   "colorSpace": {
    "val": "rgb",
    "categ": "Appearance",
    "allowedVals": [
     "rgb",
     "dkl",
     "lms",
     "hsv"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Color space",
    "hint": "In what format (color space) have you specified the colors? (rgb, dkl, lms, hsv)",
    "plugin": null
   },
   "fillColor": {
    "val": "darkgrey",
    "categ": "Appearance",
    "allowedVals": [],
    "valType": "color",
    "inputType": "color",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Fill color",
    "hint": "Fill color of this stimulus (e.g. $[1,1,0], red )",
    "plugin": null
   },
   "borderColor": {
    "val": "None",
    "categ": "Appearance",
    "allowedVals": [],
    "valType": "color",
    "inputType": "color",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Border color",
    "hint": "Border color of this stimulus (e.g. $[1,1,0], red )",
    "plugin": null
   },
   "opacity": {
    "val": "",
    "categ": "Appearance",
    "allowedVals": [],
    "valType": "num",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Opacity",
    "hint": "Opacity of the stimulus (1=opaque, 0=fully transparent, 0.5=translucent). Leave blank for each color to have its own opacity (recommended if any color is None).",
    "plugin": null
   },
   "contrast": {
    "val": 1,
    "categ": "Appearance",
    "allowedVals": [],
    "valType": "num",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Contrast",
    "hint": "Contrast of the stimulus (1.0=unchanged contrast, 0.5=decrease contrast, 0.0=uniform/no contrast, -0.5=slightly inverted, -1.0=totally inverted)",
    "plugin": null
   },
   "pos": {
    "val": [
     0,
     0
    ],
    "categ": "Layout",
    "allowedVals": [],
    "valType": "list",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Position [x,y]",
    "hint": "Position of this stimulus (e.g. [1,2] )",
    "plugin": null
   },
   "size": {
    "val": [
     0.5,
     0.5
    ],
    "categ": "Layout",
    "allowedVals": [],
    "valType": "list",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Size [w,h]",
    "hint": "Size of this stimulus (either a single value or x,y pair, e.g. 2.5, [1,2] ",
    "plugin": null
   },
   "ori": {
    "val": 0,
    "categ": "Layout",
    "allowedVals": [
     -360,
     360
    ],
    "valType": "num",
    "inputType": "spin",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Orientation",
    "hint": "Orientation of this stimulus (in deg)",
    "plugin": null
   },
   "validator": {
    "val": "",
    "categ": "Testing",
    "allowedVals": [
     ""
    ],
    "valType": "code",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Validate with...",
    "hint": "Name of validator Component/Routine to use to check the timing of this stimulus.",
    "plugin": null
   },
   "forceEndRoutine": {
    "val": true,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Force end of Routine",
    "hint": "Should a response force the end of the Routine (e.g end the trial)?",
    "plugin": null
   },
   "oncePerClick": {
    "val": true,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Run once per click",
    "hint": "Should the callback run once per click (True), or each frame until click is released (False)",
    "plugin": null
   },
   "callback": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "extendedCode",
    "inputType": "multi",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Callback function",
    "hint": "Code to run when button is clicked",
    "plugin": null
   },
   "text": {
    "val": "Click here",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "str",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Button text",
    "hint": "The text to be displayed",
    "plugin": null
   },
   "font": {
    "val": "Arvo",
    "categ": "Formatting",
    "allowedVals": [],
    "valType": "str",
    "inputType": "font",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Font",
    "hint": "The font name (e.g. Comic Sans)",
    "plugin": null
   },
   "letterHeight": {
    "val": 0.05,
    "categ": "Formatting",
    "allowedVals": [],
    "valType": "num",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Letter height",
    "hint": "Specifies the height of the letter (the width is then determined by the font)",
    "plugin": null
   },
   "italic": {
    "val": false,
    "categ": "Formatting",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Italic",
    "hint": "Should text be italic?",
    "plugin": null
   },
   "bold": {
    "val": true,
    "categ": "Formatting",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Bold",
    "hint": "Should text be bold?",
    "plugin": null
   },
   "padding": {
    "val": "",
    "categ": "Layout",
    "allowedVals": [],
    "valType": "num",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Padding",
    "hint": "Defines the space between text and the textbox border",
    "plugin": null
   },
   "anchor": {
    "val": "center",
    "categ": "Layout",
    "allowedVals": [
     "center",
     "top-center",
     "bottom-center",
     "center-left",
     "center-right",
     "top-left",
     "top-right",
     "bottom-left",
     "bottom-right"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Anchor",
    "hint": "Should text anchor to the top, center or bottom of the box?",
    "plugin": null
   },
   "borderWidth": {
    "val": 0,
    "categ": "Appearance",
    "allowedVals": [],
    "valType": "num",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Border width",
    "hint": "Textbox border width",
    "plugin": null
   },
   "save": {
    "val": "every click",
    "categ": "Data",
    "allowedVals": [
     "first click",
     "last click",
     "every click",
     "none"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Record clicks",
    "hint": "What clicks on this button should be saved to the data output?",
    "plugin": null
   },
   "timeRelativeTo": {
    "val": "button onset",
    "categ": "Data",
    "allowedVals": [
     "button onset",
     "experiment",
     "routine"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Time relative to",
    "hint": "What should the values of mouse.time should be relative to?",
    "plugin": null
   }
  }
 },
 "ButtonBoxComponent": {
  "__class__": "psychopy.experiment.components.buttonBox:ButtonBoxComponent",
  "__name__": "ButtonBoxComponent",
  "categories": [
   "Responses"
  ],
  "targets": [
   "PsychoPy"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\buttonBox\\light\\buttonBox.png",
  "tooltip": "Button Box: Get input from a button box",
  "version": "0.0.0",
  "beta": true,
  "validatorClasses": [],
  "hidden": false,
  "params": {
   "name": {
    "val": "buttonBox",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "name",
    "updates": null,
    "allowedUpdates": null,
    "label": "Name",
    "hint": "Name of this Component (alphanumeric or _, no spaces)",
    "plugin": null
   },
   "startType": {
    "val": "time (s)",
    "categ": "Basic",
    "allowedVals": [
     "time (s)",
     "frame N",
     "condition"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Start type",
    "hint": "How do you want to define your start point?",
    "plugin": null
   },
   "stopType": {
    "val": "duration (s)",
    "categ": "Basic",
    "allowedVals": [
     "duration (s)",
     "duration (frames)",
     "time (s)",
     "frame N",
     "condition"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Stop type",
    "hint": "How do you want to define your end point?",
    "plugin": null
   },
   "startVal": {
    "val": 0.0,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Start",
    "hint": "When does the Component start?",
    "plugin": null
   },
   "stopVal": {
    "val": 1.0,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [],
    "label": "Stop",
    "hint": "When does the Component end? (blank is endless)",
    "plugin": null
   },
   "startEstim": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Expected start (s)",
    "hint": "(Optional) expected start (s), purely for representing in the timeline",
    "plugin": null
   },
   "durationEstim": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Expected duration (s)",
    "hint": "(Optional) expected duration (s), purely for representing in the timeline",
    "plugin": null
   },
   "saveStartStop": {
    "val": true,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Save onset/offset times",
    "hint": "Store the onset/offset times in the data file (as well as in the log file).",
    "plugin": null
   },
   "syncScreenRefresh": {
    "val": false,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Sync timing with screen refresh",
    "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
    "plugin": null
   },
   "disabled": {
    "val": false,
    "categ": "Testing",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Disable Component",
    "hint": "Disable this Component",
    "plugin": null
   },
   "deviceLabel": {
    "val": "",
    "categ": "Device",
    "allowedVals": [],
    "valType": "str",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Device label",
    "hint": "A label to refer to this Component's associated hardware device by. If using the same device for multiple components, be sure to use the same label here.",
    "plugin": null
   },
   "forceEndRoutine": {
    "val": true,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Force end of Routine",
    "hint": "Should a response force the end of the Routine (e.g end the trial)?",
    "plugin": null
   },
   "registerOn": {
    "val": true,
    "categ": "Data",
    "allowedVals": [
     true,
     false
    ],
    "valType": "code",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Register button press on...",
    "hint": "When should the button press be registered? As soon as pressed, or when released?",
    "plugin": null
   },
   "store": {
    "val": "first",
    "categ": "Data",
    "allowedVals": [
     "last",
     "first",
     "all",
     "nothing"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Store",
    "hint": "Choose which (if any) responses to store at the end of a trial",
    "plugin": null
   },
   "allowedButtons": {
    "val": "",
    "categ": "Data",
    "allowedVals": [],
    "valType": "list",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Allowed buttons",
    "hint": "A comma-separated list of button indices (should be whole numbers), leave blank to listen for all buttons.",
    "plugin": null
   },
   "storeCorrect": {
    "val": false,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Store correct",
    "hint": "Do you want to save the response as correct/incorrect?",
    "plugin": null
   },
   "correctAns": {
    "val": "",
    "categ": "Data",
    "allowedVals": [],
    "valType": "list",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Correct answer",
    "hint": "What is the 'correct' key? Might be helpful to add a correctAns column and use $correctAns to compare to the key press. ",
    "plugin": null
   },
   "deviceBackend": {
    "val": "keyboard",
    "categ": "Device",
    "allowedVals": [
     "keyboard"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Device backend",
    "hint": "What kind of button box is it? What package/plugin should be used to talk to it?",
    "plugin": null
   },
   "kbButtonAliases": {
    "val": "'q', 'w', 'e'",
    "categ": "Device",
    "allowedVals": [],
    "valType": "list",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Buttons",
    "hint": "Keys to treat as buttons (in order of what button index you want them to be). Must be the same length as the number of buttons.",
    "plugin": null
   }
  }
 },
 "CameraComponent": {
  "__class__": "psychopy.experiment.components.camera:CameraComponent",
  "__name__": "CameraComponent",
  "categories": [
   "Responses"
  ],
  "targets": [
   "PsychoPy",
   "PsychoJS"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\camera\\light\\webcam.png",
  "tooltip": "Webcam: Record video from a webcam.",
  "version": "2022.2.0",
  "beta": false,
  "validatorClasses": [],
  "hidden": false,
  "params": {
   "name": {
    "val": "cam",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "name",
    "updates": null,
    "allowedUpdates": null,
    "label": "Name",
    "hint": "Name of this Component (alphanumeric or _, no spaces)",
    "plugin": null
   },
   "startType": {
    "val": "time (s)",
    "categ": "Basic",
    "allowedVals": [
     "time (s)",
     "frame N",
     "condition"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Start type",
    "hint": "How do you want to define your start point?",
    "plugin": null
   },
   "stopType": {
    "val": "duration (s)",
    "categ": "Basic",
    "allowedVals": [
     "duration (s)",
     "duration (frames)",
     "time (s)",
     "frame N",
     "condition"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Stop type",
    "hint": "How do you want to define your end point?",
    "plugin": null
   },
   "startVal": {
    "val": "0",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Start",
    "hint": "When does the Component start?",
    "plugin": null
   },
   "stopVal": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [],
    "label": "Stop",
    "hint": "When does the Component end? (blank is endless)",
    "plugin": null
   },
   "startEstim": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Expected start (s)",
    "hint": "(Optional) expected start (s), purely for representing in the timeline",
    "plugin": null
   },
   "durationEstim": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Expected duration (s)",
    "hint": "(Optional) expected duration (s), purely for representing in the timeline",
    "plugin": null
   },
   "saveStartStop": {
    "val": true,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Save onset/offset times",
    "hint": "Store the onset/offset times in the data file (as well as in the log file).",
    "plugin": null
   },
   "syncScreenRefresh": {
    "val": false,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Sync timing with screen refresh",
    "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
    "plugin": null
   },
   "disabled": {
    "val": false,
    "categ": "Testing",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Disable Component",
    "hint": "Disable this Component",
    "plugin": null
   },
   "deviceLabel": {
    "val": "",
    "categ": "Device",
    "allowedVals": [],
    "valType": "str",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Device label",
    "hint": "A label to refer to this Component's associated hardware device by. If using the same device for multiple components, be sure to use the same label here.",
    "plugin": null
   },
   "cameraLib": {
    "val": "ffpyplayer",
    "categ": "Device",
    "allowedVals": [
     "ffpyplayer",
     "opencv"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Backend",
    "hint": "Python package to use behind the scenes.",
    "plugin": null
   },
   "device": {
    "val": "default",
    "categ": "Device",
    "allowedVals": [
     "default",
     "Logitech BRIO",
     "OBS Virtual Camera"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Video device",
    "hint": "What device would you like to use to record video? This will only affect local experiments - online experiments ask the participant which device to use.",
    "plugin": null
   },
   "deviceManual": {
    "val": "",
    "categ": "Device",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Video device",
    "hint": "What device would you like to use to record video? This will only affect local experiments - online experiments ask the participant which device to use.",
    "plugin": null
   },
   "resolution": {
    "val": "",
    "categ": "Device",
    "allowedVals": [
     "",
     [
      4096,
      2160
     ],
     [
      3840,
      2160
     ],
     [
      2560,
      1440
     ],
     [
      1920,
      1080
     ],
     [
      1600,
      896
     ],
     [
      1280,
      720
     ],
     [
      1024,
      576
     ],
     [
      960,
      540
     ],
     [
      848,
      480
     ],
     [
      800,
      448
     ],
     [
      800,
      600
     ],
     [
      640,
      480
     ],
     [
      640,
      360
     ],
     [
      480,
      270
     ],
     [
      440,
      440
     ],
     [
      424,
      240
     ],
     [
      352,
      288
     ],
     [
      340,
      340
     ],
     [
      320,
      180
     ],
     [
      320,
      240
     ],
     [
      176,
      144
     ],
     [
      160,
      120
     ]
    ],
    "valType": "list",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Resolution",
    "hint": "Resolution (w x h) to record to, leave blank to use device default.",
    "plugin": null
   },
   "resolutionManual": {
    "val": "",
    "categ": "Device",
    "allowedVals": [],
    "valType": "list",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Resolution",
    "hint": "Resolution (w x h) to record to, leave blank to use device default.",
    "plugin": null
   },
   "frameRate": {
    "val": "",
    "categ": "Device",
    "allowedVals": [
     "",
     120,
     90,
     60,
     30
    ],
    "valType": "int",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Frame rate",
    "hint": "Frame rate (frames per second) to record at, leave blank to use device default.",
    "plugin": null
   },
   "frameRateManual": {
    "val": "",
    "categ": "Device",
    "allowedVals": [],
    "valType": "int",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Frame rate",
    "hint": "Frame rate (frames per second) to record at, leave blank to use device default. For some cameras, you may need to use `camera.CAMERA_FRAMERATE_NTSC` or `camera.CAMERA_FRAMERATE_NTSC / 2`.",
    "plugin": null
   },
   "micDeviceLabel": {
    "val": "",
    "categ": "Audio",
    "allowedVals": [],
    "valType": "str",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Microphone device label",
    "hint": "A label to refer to this Component's associated microphone device by. If using the same device for multiple components, be sure to use the same label here.",
    "plugin": null
   },
   "mic": {
    "val": null,
    "categ": "Audio",
    "allowedVals": [
     null,
     "Microphone (Steam Streaming Microphone)",
     "Microphone (Logitech BRIO)",
     "Microphone (PowerConf S3)",
     "Speakers (Steam Streaming Speakers) [Loopback]",
     "Digital Audio (S/PDIF) (High Definition Audio Device) [Loopback]",
     "Speakers (Steam Streaming Microphone) [Loopback]",
     "Speakers (PowerConf S3) [Loopback]",
     "Headphones (Office Speaker Stereo) [Loopback]"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Microphone",
    "hint": "What microphone device would you like the use to record? This will only affect local experiments - online experiments ask the participant which mic to use.",
    "plugin": null
   },
   "micChannels": {
    "val": "auto",
    "categ": "Audio",
    "allowedVals": [
     "auto",
     "mono",
     "stereo"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Channels",
    "hint": "Record two channels (stereo) or one (mono, smaller file). Select 'auto' to use as many channels as the selected device allows.",
    "plugin": null
   },
   "micSampleRate": {
    "val": "DVD Audio (48kHz)",
    "categ": "Audio",
    "allowedVals": [
     8000,
     16000,
     44100,
     48000,
     96000,
     192000
    ],
    "valType": "num",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Sample rate (hz)",
    "hint": "How many samples per second (Hz) to record at",
    "plugin": null
   },
   "micMaxRecSize": {
    "val": 24000,
    "categ": "Audio",
    "allowedVals": [],
    "valType": "num",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Max recording size (kb)",
    "hint": "To avoid excessively large output files, what is the biggest file size you are likely to expect?",
    "plugin": null
   },
   "saveFile": {
    "val": true,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Save file?",
    "hint": "Save webcam output to a file?",
    "plugin": null
   }
  }
 },
 "CodeComponent": {
  "__class__": "psychopy.experiment.components.code:CodeComponent",
  "__name__": "CodeComponent",
  "categories": [
   "Custom"
  ],
  "targets": [
   "PsychoPy",
   "PsychoJS"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\code\\light\\code.png",
  "tooltip": "Code: insert python commands into an experiment",
  "version": "0.0.0",
  "beta": false,
  "validatorClasses": [],
  "hidden": false,
  "params": {
   "name": {
    "val": "code",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "name",
    "updates": null,
    "allowedUpdates": null,
    "label": "Name",
    "hint": "Name of this Component (alphanumeric or _, no spaces)",
    "plugin": null
   },
   "disabled": {
    "val": false,
    "categ": "Testing",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Disable Component",
    "hint": "Disable this Component",
    "plugin": null
   },
   "Code Type": {
    "val": "Auto->JS",
    "categ": "Basic",
    "allowedVals": [
     "Py",
     "JS",
     "Both",
     "Auto->JS"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Code type",
    "hint": "Display Python or JS Code",
    "plugin": null
   },
   "Before Experiment": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "extendedCode",
    "inputType": "multi",
    "updates": "constant",
    "allowedUpdates": [],
    "label": "Before experiment",
    "hint": "Code to run before the experiment starts (initialization); right-click checks syntax",
    "plugin": null
   },
   "Begin Experiment": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "extendedCode",
    "inputType": "multi",
    "updates": "constant",
    "allowedUpdates": [],
    "label": "Begin experiment",
    "hint": "Code at the start of the experiment ; right-click checks syntax",
    "plugin": null
   },
   "Begin Routine": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "extendedCode",
    "inputType": "multi",
    "updates": "constant",
    "allowedUpdates": [],
    "label": "Begin Routine",
    "hint": "Code to be run at the start of each repeat of the Routine (e.g. each trial); right-click checks syntax",
    "plugin": null
   },
   "Each Frame": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "extendedCode",
    "inputType": "multi",
    "updates": "constant",
    "allowedUpdates": [],
    "label": "Each frame",
    "hint": "Code to be run on every video frame during for the duration of this Routine; right-click checks syntax",
    "plugin": null
   },
   "End Routine": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "extendedCode",
    "inputType": "multi",
    "updates": "constant",
    "allowedUpdates": [],
    "label": "End Routine",
    "hint": "Code at the end of this repeat of the Routine (e.g. getting/storing responses); right-click checks syntax",
    "plugin": null
   },
   "End Experiment": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "extendedCode",
    "inputType": "multi",
    "updates": "constant",
    "allowedUpdates": [],
    "label": "End experiment",
    "hint": "Code at the end of the entire experiment (e.g. saving files, resetting computer); right-click checks syntax",
    "plugin": null
   },
   "Before JS Experiment": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "extendedCode",
    "inputType": "multi",
    "updates": "constant",
    "allowedUpdates": [],
    "label": "Before JS experiment",
    "hint": "Code before the start of the experiment (initialization); right-click checks syntax",
    "plugin": null
   },
   "Begin JS Experiment": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "extendedCode",
    "inputType": "multi",
    "updates": "constant",
    "allowedUpdates": [],
    "label": "Begin JS experiment",
    "hint": "Code at the start of the experiment (initialization); right-click checks syntax",
    "plugin": null
   },
   "Begin JS Routine": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "extendedCode",
    "inputType": "multi",
    "updates": "constant",
    "allowedUpdates": [],
    "label": "Begin JS Routine",
    "hint": "Code to be run at the start of each repeat of the Routine (e.g. each trial); right-click checks syntax",
    "plugin": null
   },
   "Each JS Frame": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "extendedCode",
    "inputType": "multi",
    "updates": "constant",
    "allowedUpdates": [],
    "label": "Each JS frame",
    "hint": "Code to be run on every video frame during for the duration of this Routine; right-click checks syntax",
    "plugin": null
   },
   "End JS Routine": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "extendedCode",
    "inputType": "multi",
    "updates": "constant",
    "allowedUpdates": [],
    "label": "End JS Routine",
    "hint": "Code at the end of this repeat of the Routine (e.g. getting/storing responses); right-click checks syntax",
    "plugin": null
   },
   "End JS Experiment": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "extendedCode",
    "inputType": "multi",
    "updates": "constant",
    "allowedUpdates": [],
    "label": "End JS experiment",
    "hint": "Code at the end of the entire experiment (e.g. saving files, resetting computer); right-click checks syntax",
    "plugin": null
   }
  }
 },
 "DotsComponent": {
  "__class__": "psychopy.experiment.components.dots:DotsComponent",
  "__name__": "DotsComponent",
  "categories": [
   "Stimuli"
  ],
  "targets": [
   "PsychoPy"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\dots\\light\\dots.png",
  "tooltip": "Dots: Random Dot Kinematogram",
  "version": "0.0.0",
  "beta": false,
  "validatorClasses": [
   "VisualValidatorRoutine"
  ],
  "hidden": false,
  "params": {
   "name": {
    "val": "dots",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "name",
    "updates": null,
    "allowedUpdates": null,
    "label": "Name",
    "hint": "Name of this Component (alphanumeric or _, no spaces)",
    "plugin": null
   },
   "startType": {
    "val": "time (s)",
    "categ": "Basic",
    "allowedVals": [
     "time (s)",
     "frame N",
     "condition"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Start type",
    "hint": "How do you want to define your start point?",
    "plugin": null
   },
   "stopType": {
    "val": "duration (s)",
    "categ": "Basic",
    "allowedVals": [
     "duration (s)",
     "duration (frames)",
     "time (s)",
     "frame N",
     "condition"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Stop type",
    "hint": "How do you want to define your end point?",
    "plugin": null
   },
   "startVal": {
    "val": 0.0,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Start",
    "hint": "When does the Component start?",
    "plugin": null
   },
   "stopVal": {
    "val": 1.0,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [],
    "label": "Stop",
    "hint": "When does the Component end? (blank is endless)",
    "plugin": null
   },
   "startEstim": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Expected start (s)",
    "hint": "(Optional) expected start (s), purely for representing in the timeline",
    "plugin": null
   },
   "durationEstim": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Expected duration (s)",
    "hint": "(Optional) expected duration (s), purely for representing in the timeline",
    "plugin": null
   },
   "saveStartStop": {
    "val": true,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Save onset/offset times",
    "hint": "Store the onset/offset times in the data file (as well as in the log file).",
    "plugin": null
   },
   "syncScreenRefresh": {
    "val": true,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Sync timing with screen refresh",
    "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
    "plugin": null
   },
   "disabled": {
    "val": false,
    "categ": "Testing",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Disable Component",
    "hint": "Disable this Component",
    "plugin": null
   },
   "units": {
    "val": "from exp settings",
    "categ": "Layout",
    "allowedVals": [
     "from exp settings",
     "deg",
     "cm",
     "pix",
     "norm",
     "height",
     "degFlatPos",
     "degFlat"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Spatial units",
    "hint": "Units of dimensions for this stimulus",
    "plugin": null
   },
   "color": {
    "val": "$[1.0,1.0,1.0]",
    "categ": "Appearance",
    "allowedVals": [],
    "valType": "color",
    "inputType": "color",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Dot color",
    "hint": "Foreground color of this stimulus (e.g. $[1,1,0], red )",
    "plugin": null
   },
   "colorSpace": {
    "val": "rgb",
    "categ": "Appearance",
    "allowedVals": [
     "rgb",
     "dkl",
     "lms",
     "hsv"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Dot color space",
    "hint": "In what format (color space) have you specified the colors? (rgb, dkl, lms, hsv)",
    "plugin": null
   },
   "opacity": {
    "val": "",
    "categ": "Appearance",
    "allowedVals": [],
    "valType": "num",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Opacity",
    "hint": "Opacity of the stimulus (1=opaque, 0=fully transparent, 0.5=translucent). Leave blank for each color to have its own opacity (recommended if any color is None).",
    "plugin": null
   },
   "contrast": {
    "val": 1,
    "categ": "Appearance",
    "allowedVals": [],
    "valType": "num",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Contrast",
    "hint": "Contrast of the stimulus (1.0=unchanged contrast, 0.5=decrease contrast, 0.0=uniform/no contrast, -0.5=slightly inverted, -1.0=totally inverted)",
    "plugin": null
   },
   "validator": {
    "val": "",
    "categ": "Testing",
    "allowedVals": [
     ""
    ],
    "valType": "code",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Validate with...",
    "hint": "Name of validator Component/Routine to use to check the timing of this stimulus.",
    "plugin": null
   },
   "nDots": {
    "val": 100,
    "categ": "Dots",
    "allowedVals": [],
    "valType": "int",
    "inputType": "spin",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Number of dots",
    "hint": "Number of dots in the field (for circular fields this will be average number of dots)",
    "plugin": null
   },
   "dir": {
    "val": 0.0,
    "categ": "Dots",
    "allowedVals": [],
    "valType": "num",
    "inputType": "spin",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Direction",
    "hint": "Direction of motion for the signal dots (degrees)",
    "plugin": null
   },
   "speed": {
    "val": 0.1,
    "categ": "Dots",
    "allowedVals": [],
    "valType": "num",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Speed",
    "hint": "Speed of the dots (displacement per frame in the specified units)",
    "plugin": null
   },
   "coherence": {
    "val": 1.0,
    "categ": "Dots",
    "allowedVals": [],
    "valType": "num",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Coherence",
    "hint": "Coherence of the dots (fraction moving in the signal direction on any one frame)",
    "plugin": null
   },
   "dotSize": {
    "val": 2,
    "categ": "Layout",
    "allowedVals": [],
    "valType": "num",
    "inputType": "spin",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Dot size",
    "hint": "Size of the dots IN PIXELS regardless of the set units",
    "plugin": null
   },
   "dotLife": {
    "val": 3,
    "categ": "Dots",
    "allowedVals": [],
    "valType": "num",
    "inputType": "spin",
    "updates": null,
    "allowedUpdates": null,
    "label": "Dot life-time",
    "hint": "Number of frames before each dot is killed and randomly assigned a new position",
    "plugin": null
   },
   "signalDots": {
    "val": "same",
    "categ": "Dots",
    "allowedVals": [
     "same",
     "different"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Signal dots",
    "hint": "On each frame are the signals dots remaining the same or changing? See Scase et al.",
    "plugin": null
   },
   "refreshDots": {
    "val": "repeat",
    "categ": "Dots",
    "allowedVals": [
     "none",
     "repeat"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": [],
    "label": "Dot refresh rule",
    "hint": "When should the whole sample of dots be refreshed",
    "plugin": null
   },
   "noiseDots": {
    "val": "direction",
    "categ": "Dots",
    "allowedVals": [
     "direction",
     "position",
     "walk"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Noise dots",
    "hint": "What governs the behaviour of the noise dots? See Scase et al.",
    "plugin": null
   },
   "fieldShape": {
    "val": "circle",
    "categ": "Layout",
    "allowedVals": [
     "circle",
     "square"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Field shape",
    "hint": "What is the shape of the field?",
    "plugin": null
   },
   "fieldSize": {
    "val": 1.0,
    "categ": "Layout",
    "allowedVals": [],
    "valType": "num",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Field size",
    "hint": "What is the size of the field (in the specified units)?",
    "plugin": null
   },
   "fieldPos": {
    "val": [
     0.0,
     0.0
    ],
    "categ": "Layout",
    "allowedVals": [],
    "valType": "list",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Field position",
    "hint": "Where is the field centred (in the specified units)?",
    "plugin": null
   },
   "anchor": {
    "val": "center",
    "categ": "Layout",
    "allowedVals": [
     "center",
     "top-center",
     "bottom-center",
     "center-left",
     "center-right",
     "top-left",
     "top-right",
     "bottom-left",
     "bottom-right"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Field anchor",
    "hint": "Which point on the field should be anchored to its exact position?",
    "plugin": null
   }
  }
 },
 "EyetrackerRecordComponent": {
  "__class__": "psychopy.experiment.components.eyetracker_record:EyetrackerRecordComponent",
  "__name__": "EyetrackerRecordComponent",
  "categories": [
   "Eyetracking"
  ],
  "targets": [
   "PsychoPy"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\eyetracker_record\\light\\eyetracker_record.png",
  "tooltip": "Start and / or Stop recording data from the eye tracker",
  "version": "2021.2.0",
  "beta": false,
  "validatorClasses": [],
  "hidden": false,
  "params": {
   "name": {
    "val": "etRecord",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "name",
    "updates": null,
    "allowedUpdates": null,
    "label": "Name",
    "hint": "Name of this Component (alphanumeric or _, no spaces)",
    "plugin": null
   },
   "startType": {
    "val": "time (s)",
    "categ": "Basic",
    "allowedVals": [
     "time (s)",
     "frame N",
     "condition"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Start type",
    "hint": "How do you want to define your start point?",
    "plugin": null
   },
   "stopType": {
    "val": "duration (s)",
    "categ": "Basic",
    "allowedVals": [
     "duration (s)",
     "duration (frames)",
     "time (s)",
     "frame N",
     "condition"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Stop type",
    "hint": "How do you want to define your end point?",
    "plugin": null
   },
   "startVal": {
    "val": 0.0,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Start",
    "hint": "When does the Component start?",
    "plugin": null
   },
   "stopVal": {
    "val": 1.0,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [],
    "label": "Stop",
    "hint": "When does the Component end? (blank is endless)",
    "plugin": null
   },
   "startEstim": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Expected start (s)",
    "hint": "(Optional) expected start (s), purely for representing in the timeline",
    "plugin": null
   },
   "durationEstim": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Expected duration (s)",
    "hint": "(Optional) expected duration (s), purely for representing in the timeline",
    "plugin": null
   },
   "saveStartStop": {
    "val": true,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Save onset/offset times",
    "hint": "Store the onset/offset times in the data file (as well as in the log file).",
    "plugin": null
   },
   "syncScreenRefresh": {
    "val": false,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Sync timing with screen refresh",
    "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
    "plugin": null
   },
   "disabled": {
    "val": false,
    "categ": "Testing",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Disable Component",
    "hint": "Disable this Component",
    "plugin": null
   },
   "actionType": {
    "val": "Start and Stop",
    "categ": "Basic",
    "allowedVals": [
     "Start and Stop",
     "Start Only",
     "Stop Only"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Record actions",
    "hint": "Should this Component start and / or stop eye tracker recording?",
    "plugin": null
   },
   "stopWithRoutine": {
    "val": false,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Stop with Routine?",
    "hint": "Should eyetracking stop when the Routine ends? Tick to force stopping after the Routine has finished.",
    "plugin": null
   }
  }
 },
 "FormComponent": {
  "__class__": "psychopy.experiment.components.form:FormComponent",
  "__name__": "FormComponent",
  "categories": [
   "Responses"
  ],
  "targets": [
   "PsychoPy",
   "PsychoJS"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\form\\light\\form.png",
  "tooltip": "Form: a Psychopy survey tool",
  "version": "2020.2.0",
  "beta": false,
  "validatorClasses": [
   "VisualValidatorRoutine"
  ],
  "hidden": false,
  "params": {
   "name": {
    "val": "form",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "name",
    "updates": null,
    "allowedUpdates": null,
    "label": "Name",
    "hint": "Name of this Component (alphanumeric or _, no spaces)",
    "plugin": null
   },
   "startType": {
    "val": "time (s)",
    "categ": "Basic",
    "allowedVals": [
     "time (s)",
     "frame N",
     "condition"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Start type",
    "hint": "How do you want to define your start point?",
    "plugin": null
   },
   "stopType": {
    "val": "duration (s)",
    "categ": "Basic",
    "allowedVals": [
     "duration (s)",
     "duration (frames)",
     "time (s)",
     "frame N",
     "condition"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Stop type",
    "hint": "How do you want to define your end point?",
    "plugin": null
   },
   "startVal": {
    "val": "0.0",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Start",
    "hint": "When does the Component start?",
    "plugin": null
   },
   "stopVal": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [],
    "label": "Stop",
    "hint": "When does the Component end? (blank is endless)",
    "plugin": null
   },
   "startEstim": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Expected start (s)",
    "hint": "(Optional) expected start (s), purely for representing in the timeline",
    "plugin": null
   },
   "durationEstim": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Expected duration (s)",
    "hint": "(Optional) expected duration (s), purely for representing in the timeline",
    "plugin": null
   },
   "saveStartStop": {
    "val": true,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Save onset/offset times",
    "hint": "Store the onset/offset times in the data file (as well as in the log file).",
    "plugin": null
   },
   "syncScreenRefresh": {
    "val": true,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Sync timing with screen refresh",
    "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
    "plugin": null
   },
   "disabled": {
    "val": false,
    "categ": "Testing",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Disable Component",
    "hint": "Disable this Component",
    "plugin": null
   },
   "colorSpace": {
    "val": "rgb",
    "categ": "Appearance",
    "allowedVals": [
     "rgb",
     "dkl",
     "lms",
     "hsv"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Color space",
    "hint": "In what format (color space) have you specified the colors? (rgb, dkl, lms, hsv)",
    "plugin": null
   },
   "fillColor": {
    "val": "",
    "categ": "Appearance",
    "allowedVals": [],
    "valType": "color",
    "inputType": "color",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Fill color",
    "hint": "Color of the form's background",
    "plugin": null
   },
   "borderColor": {
    "val": "",
    "categ": "Appearance",
    "allowedVals": [],
    "valType": "color",
    "inputType": "color",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Border color",
    "hint": "Color of the outline around the form",
    "plugin": null
   },
   "opacity": {
    "val": "",
    "categ": "Appearance",
    "allowedVals": [],
    "valType": "num",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Opacity",
    "hint": "Opacity of the stimulus (1=opaque, 0=fully transparent, 0.5=translucent). Leave blank for each color to have its own opacity (recommended if any color is None).",
    "plugin": null
   },
   "contrast": {
    "val": 1,
    "categ": "Appearance",
    "allowedVals": [],
    "valType": "num",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Contrast",
    "hint": "Contrast of the stimulus (1.0=unchanged contrast, 0.5=decrease contrast, 0.0=uniform/no contrast, -0.5=slightly inverted, -1.0=totally inverted)",
    "plugin": null
   },
   "pos": {
    "val": [
     0,
     0
    ],
    "categ": "Layout",
    "allowedVals": [],
    "valType": "list",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [],
    "label": "Position [x,y]",
    "hint": "Position of this stimulus (e.g. [1,2] )",
    "plugin": null
   },
   "size": {
    "val": [
     1,
     0.7
    ],
    "categ": "Layout",
    "allowedVals": [],
    "valType": "list",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [],
    "label": "Size [w,h]",
    "hint": "Size of this stimulus (either a single value or x,y pair, e.g. 2.5, [1,2] ",
    "plugin": null
   },
   "validator": {
    "val": "",
    "categ": "Testing",
    "allowedVals": [
     ""
    ],
    "valType": "code",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Validate with...",
    "hint": "Name of validator Component/Routine to use to check the timing of this stimulus.",
    "plugin": null
   },
   "Items": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "file",
    "inputType": "table",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Items",
    "hint": "The csv filename containing the items for your survey.",
    "plugin": null
   },
   "Text Height": {
    "val": 0.03,
    "categ": "Formatting",
    "allowedVals": [],
    "valType": "num",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Text height",
    "hint": "The size of the item text for Form",
    "plugin": null
   },
   "Font": {
    "val": "Noto Sans",
    "categ": "Formatting",
    "allowedVals": [],
    "valType": "str",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant"
    ],
    "label": "Font",
    "hint": "The font name (e.g. Comic Sans)",
    "plugin": null
   },
   "Randomize": {
    "val": false,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Randomize",
    "hint": "Do you want to randomize the order of your questions?",
    "plugin": null
   },
   "Item Padding": {
    "val": 0.05,
    "categ": "Layout",
    "allowedVals": [],
    "valType": "num",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Item padding",
    "hint": "The padding or space between items.",
    "plugin": null
   },
   "Data Format": {
    "val": "rows",
    "categ": "Basic",
    "allowedVals": [
     "columns",
     "rows"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Data format",
    "hint": "Store item data by columns, or rows",
    "plugin": null
   },
   "Style": {
    "val": "dark",
    "categ": "Appearance",
    "allowedVals": [
     "light",
     "dark",
     "custom..."
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Styles",
    "hint": "Styles determine the appearance of the form",
    "plugin": null
   },
   "itemColor": {
    "val": "white",
    "categ": "Appearance",
    "allowedVals": [],
    "valType": "color",
    "inputType": "color",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Item color",
    "hint": "Base text color for questions",
    "plugin": null
   },
   "responseColor": {
    "val": "white",
    "categ": "Appearance",
    "allowedVals": [],
    "valType": "color",
    "inputType": "color",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Response color",
    "hint": "Base text color for responses, also sets color of lines in sliders and borders of textboxes",
    "plugin": null
   },
   "markerColor": {
    "val": "red",
    "categ": "Appearance",
    "allowedVals": [],
    "valType": "color",
    "inputType": "color",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Marker color",
    "hint": "Color of markers and the scrollbar",
    "plugin": null
   }
  }
 },
 "GratingComponent": {
  "__class__": "psychopy.experiment.components.grating:GratingComponent",
  "__name__": "GratingComponent",
  "categories": [
   "Stimuli"
  ],
  "targets": [
   "PsychoPy",
   "PsychoJS"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\grating\\light\\grating.png",
  "tooltip": "Grating: present cyclic textures, prebuilt or from a file",
  "version": "0.0.0",
  "beta": false,
  "validatorClasses": [
   "VisualValidatorRoutine"
  ],
  "hidden": false,
  "params": {
   "name": {
    "val": "grating",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "name",
    "updates": null,
    "allowedUpdates": null,
    "label": "Name",
    "hint": "Name of this Component (alphanumeric or _, no spaces)",
    "plugin": null
   },
   "startType": {
    "val": "time (s)",
    "categ": "Basic",
    "allowedVals": [
     "time (s)",
     "frame N",
     "condition"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Start type",
    "hint": "How do you want to define your start point?",
    "plugin": null
   },
   "stopType": {
    "val": "duration (s)",
    "categ": "Basic",
    "allowedVals": [
     "duration (s)",
     "duration (frames)",
     "time (s)",
     "frame N",
     "condition"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Stop type",
    "hint": "How do you want to define your end point?",
    "plugin": null
   },
   "startVal": {
    "val": 0.0,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Start",
    "hint": "When does the Component start?",
    "plugin": null
   },
   "stopVal": {
    "val": 1.0,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [],
    "label": "Stop",
    "hint": "When does the Component end? (blank is endless)",
    "plugin": null
   },
   "startEstim": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Expected start (s)",
    "hint": "(Optional) expected start (s), purely for representing in the timeline",
    "plugin": null
   },
   "durationEstim": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Expected duration (s)",
    "hint": "(Optional) expected duration (s), purely for representing in the timeline",
    "plugin": null
   },
   "saveStartStop": {
    "val": true,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Save onset/offset times",
    "hint": "Store the onset/offset times in the data file (as well as in the log file).",
    "plugin": null
   },
   "syncScreenRefresh": {
    "val": true,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Sync timing with screen refresh",
    "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
    "plugin": null
   },
   "disabled": {
    "val": false,
    "categ": "Testing",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Disable Component",
    "hint": "Disable this Component",
    "plugin": null
   },
   "units": {
    "val": "from exp settings",
    "categ": "Layout",
    "allowedVals": [
     "from exp settings",
     "deg",
     "cm",
     "pix",
     "norm",
     "height",
     "degFlatPos",
     "degFlat"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Spatial units",
    "hint": "Units of dimensions for this stimulus",
    "plugin": null
   },
   "color": {
    "val": "$[1,1,1]",
    "categ": "Appearance",
    "allowedVals": [],
    "valType": "color",
    "inputType": "color",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Foreground color",
    "hint": "Foreground color of this stimulus (e.g. $[1,1,0], red )",
    "plugin": null
   },
   "colorSpace": {
    "val": "rgb",
    "categ": "Appearance",
    "allowedVals": [
     "rgb",
     "dkl",
     "lms",
     "hsv"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Color space",
    "hint": "In what format (color space) have you specified the colors? (rgb, dkl, lms, hsv)",
    "plugin": null
   },
   "opacity": {
    "val": "",
    "categ": "Appearance",
    "allowedVals": [],
    "valType": "num",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Opacity",
    "hint": "Opacity of the stimulus (1=opaque, 0=fully transparent, 0.5=translucent). Leave blank for each color to have its own opacity (recommended if any color is None).",
    "plugin": null
   },
   "contrast": {
    "val": 1.0,
    "categ": "Appearance",
    "allowedVals": [],
    "valType": "num",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Contrast",
    "hint": "Contrast of the stimulus (1.0=unchanged contrast, 0.5=decrease contrast, 0.0=uniform/no contrast, -0.5=slightly inverted, -1.0=totally inverted)",
    "plugin": null
   },
   "pos": {
    "val": [
     0,
     0
    ],
    "categ": "Layout",
    "allowedVals": [],
    "valType": "list",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Position [x,y]",
    "hint": "Position of this stimulus (e.g. [1,2] )",
    "plugin": null
   },
   "size": {
    "val": [
     0.5,
     0.5
    ],
    "categ": "Layout",
    "allowedVals": [],
    "valType": "list",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Size [w,h]",
    "hint": "Size of this stimulus (either a single value or x,y pair, e.g. 2.5, [1,2] ",
    "plugin": null
   },
   "ori": {
    "val": 0,
    "categ": "Layout",
    "allowedVals": [
     -360,
     360
    ],
    "valType": "num",
    "inputType": "spin",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Orientation",
    "hint": "Orientation of this stimulus (in deg)",
    "plugin": null
   },
   "validator": {
    "val": "",
    "categ": "Testing",
    "allowedVals": [
     ""
    ],
    "valType": "code",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Validate with...",
    "hint": "Name of validator Component/Routine to use to check the timing of this stimulus.",
    "plugin": null
   },
   "tex": {
    "val": "sin",
    "categ": "Texture",
    "allowedVals": [
     "sin",
     "sqr",
     "sinXsin"
    ],
    "valType": "file",
    "inputType": "file",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Texture",
    "hint": "The (2D) texture of the grating - can be sin, sqr, sinXsin... or a filename (including path)",
    "plugin": null
   },
   "mask": {
    "val": "",
    "categ": "Texture",
    "allowedVals": [
     "gauss",
     "circle"
    ],
    "valType": "file",
    "inputType": "file",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Mask",
    "hint": "An image to define the alpha mask (ie shape)- gauss, circle... or a filename (including path)",
    "plugin": null
   },
   "sf": {
    "val": "",
    "categ": "Texture",
    "allowedVals": [],
    "valType": "num",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Spatial frequency",
    "hint": "Spatial frequency of image repeats across the grating in 1 or 2 dimensions, e.g. 4 or [2,3]",
    "plugin": null
   },
   "anchor": {
    "val": "center",
    "categ": "Layout",
    "allowedVals": [
     "center",
     "top-center",
     "bottom-center",
     "center-left",
     "center-right",
     "top-left",
     "top-right",
     "bottom-left",
     "bottom-right"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Anchor",
    "hint": "Which point on the stimulus should be anchored to its exact position?",
    "plugin": null
   },
   "draggable": {
    "val": false,
    "categ": "Layout",
    "allowedVals": [],
    "valType": "code",
    "inputType": "bool",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Draggable?",
    "hint": "Should this stimulus be moveble by clicking and dragging?",
    "plugin": null
   },
   "phase": {
    "val": 0.0,
    "categ": "Texture",
    "allowedVals": [],
    "valType": "num",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Phase (in cycles)",
    "hint": "Spatial positioning of the image on the grating (wraps in range 0-1.0)",
    "plugin": null
   },
   "texture resolution": {
    "val": "128",
    "categ": "Texture",
    "allowedVals": [
     "32",
     "64",
     "128",
     "256",
     "512"
    ],
    "valType": "num",
    "inputType": "choice",
    "updates": "constant",
    "allowedUpdates": [],
    "label": "Texture resolution",
    "hint": "Resolution of the texture for standard ones such as sin, sqr etc. For most cases a value of 256 pixels will suffice",
    "plugin": null
   },
   "interpolate": {
    "val": "linear",
    "categ": "Texture",
    "allowedVals": [
     "linear",
     "nearest"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": "constant",
    "allowedUpdates": [],
    "label": "Interpolate",
    "hint": "How should the image be interpolated if/when rescaled",
    "plugin": null
   },
   "blendmode": {
    "val": "avg",
    "categ": "Appearance",
    "allowedVals": [
     "avg",
     "add"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "OpenGL blend mode",
    "hint": "OpenGL Blendmode: avg gives traditional transparency, add is important to combine gratings)]",
    "plugin": null
   }
  }
 },
 "ImageComponent": {
  "__class__": "psychopy.experiment.components.image:ImageComponent",
  "__name__": "ImageComponent",
  "categories": [
   "Stimuli"
  ],
  "targets": [
   "PsychoPy",
   "PsychoJS"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\image\\light\\image.png",
  "tooltip": "Image: present images (bmp, jpg, tif...)",
  "version": "0.0.0",
  "beta": false,
  "validatorClasses": [
   "VisualValidatorRoutine"
  ],
  "hidden": false,
  "params": {
   "name": {
    "val": "image",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "name",
    "updates": null,
    "allowedUpdates": null,
    "label": "Name",
    "hint": "Name of this Component (alphanumeric or _, no spaces)",
    "plugin": null
   },
   "startType": {
    "val": "time (s)",
    "categ": "Basic",
    "allowedVals": [
     "time (s)",
     "frame N",
     "condition"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Start type",
    "hint": "How do you want to define your start point?",
    "plugin": null
   },
   "stopType": {
    "val": "duration (s)",
    "categ": "Basic",
    "allowedVals": [
     "duration (s)",
     "duration (frames)",
     "time (s)",
     "frame N",
     "condition"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Stop type",
    "hint": "How do you want to define your end point?",
    "plugin": null
   },
   "startVal": {
    "val": 0.0,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Start",
    "hint": "When does the Component start?",
    "plugin": null
   },
   "stopVal": {
    "val": 1.0,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [],
    "label": "Stop",
    "hint": "When does the Component end? (blank is endless)",
    "plugin": null
   },
   "startEstim": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Expected start (s)",
    "hint": "(Optional) expected start (s), purely for representing in the timeline",
    "plugin": null
   },
   "durationEstim": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Expected duration (s)",
    "hint": "(Optional) expected duration (s), purely for representing in the timeline",
    "plugin": null
   },
   "saveStartStop": {
    "val": true,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Save onset/offset times",
    "hint": "Store the onset/offset times in the data file (as well as in the log file).",
    "plugin": null
   },
   "syncScreenRefresh": {
    "val": true,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Sync timing with screen refresh",
    "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
    "plugin": null
   },
   "disabled": {
    "val": false,
    "categ": "Testing",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Disable Component",
    "hint": "Disable this Component",
    "plugin": null
   },
   "units": {
    "val": "from exp settings",
    "categ": "Layout",
    "allowedVals": [
     "from exp settings",
     "deg",
     "cm",
     "pix",
     "norm",
     "height",
     "degFlatPos",
     "degFlat"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Spatial units",
    "hint": "Units of dimensions for this stimulus",
    "plugin": null
   },
   "color": {
    "val": "$[1,1,1]",
    "categ": "Appearance",
    "allowedVals": [],
    "valType": "color",
    "inputType": "color",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Foreground color",
    "hint": "Foreground color of this stimulus (e.g. $[1,1,0], red )",
    "plugin": null
   },
   "colorSpace": {
    "val": "rgb",
    "categ": "Appearance",
    "allowedVals": [
     "rgb",
     "dkl",
     "lms",
     "hsv"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Color space",
    "hint": "In what format (color space) have you specified the colors? (rgb, dkl, lms, hsv)",
    "plugin": null
   },
   "opacity": {
    "val": "",
    "categ": "Appearance",
    "allowedVals": [],
    "valType": "num",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Opacity",
    "hint": "Opacity of the stimulus (1=opaque, 0=fully transparent, 0.5=translucent). Leave blank for each color to have its own opacity (recommended if any color is None).",
    "plugin": null
   },
   "contrast": {
    "val": 1,
    "categ": "Appearance",
    "allowedVals": [],
    "valType": "num",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Contrast",
    "hint": "Contrast of the stimulus (1.0=unchanged contrast, 0.5=decrease contrast, 0.0=uniform/no contrast, -0.5=slightly inverted, -1.0=totally inverted)",
    "plugin": null
   },
   "pos": {
    "val": [
     0,
     0
    ],
    "categ": "Layout",
    "allowedVals": [],
    "valType": "list",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Position [x,y]",
    "hint": "Position of this stimulus (e.g. [1,2] )",
    "plugin": null
   },
   "size": {
    "val": [
     0.5,
     0.5
    ],
    "categ": "Layout",
    "allowedVals": [],
    "valType": "list",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Size [w,h]",
    "hint": "Size of this stimulus (either a single value or x,y pair, e.g. 2.5, [1,2] ",
    "plugin": null
   },
   "ori": {
    "val": 0,
    "categ": "Layout",
    "allowedVals": [
     -360,
     360
    ],
    "valType": "num",
    "inputType": "spin",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Orientation",
    "hint": "Orientation of this stimulus (in deg)",
    "plugin": null
   },
   "validator": {
    "val": "",
    "categ": "Testing",
    "allowedVals": [
     ""
    ],
    "valType": "code",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Validate with...",
    "hint": "Name of validator Component/Routine to use to check the timing of this stimulus.",
    "plugin": null
   },
   "image": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [
        {
            "image/png": [".png"],
            "image/bmp": [".bmp"],
            "image/jpeg": [".jpeg", ".jpg"],
            "image/gif": [".gif"],
            "image/avif": [".avif"]
        }
    ],
    "allowedLabels": [
        "Images"
    ],
    "valType": "file",
    "inputType": "file",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Image",
    "hint": "The image to be displayed - a filename, including path",
    "plugin": null
   },
   "mask": {
    "val": "",
    "categ": "Texture",
    "allowedVals": [],
    "valType": "str",
    "inputType": "file",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Mask",
    "hint": "An image to define the alpha mask through which the image is seen - gauss, circle, None or a filename (including path)",
    "plugin": null
   },
   "texture resolution": {
    "val": "128",
    "categ": "Texture",
    "allowedVals": [
     "32",
     "64",
     "128",
     "256",
     "512"
    ],
    "valType": "num",
    "inputType": "choice",
    "updates": "constant",
    "allowedUpdates": [],
    "label": "Texture resolution",
    "hint": "Resolution of the mask if one is used.",
    "plugin": null
   },
   "interpolate": {
    "val": "linear",
    "categ": "Texture",
    "allowedVals": [
     "linear",
     "nearest"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": "constant",
    "allowedUpdates": [],
    "label": "Interpolate",
    "hint": "How should the image be interpolated if/when rescaled",
    "plugin": null
   },
   "flipVert": {
    "val": false,
    "categ": "Layout",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": "constant",
    "allowedUpdates": [],
    "label": "Flip vertically",
    "hint": "Should the image be flipped vertically (top to bottom)?",
    "plugin": null
   },
   "flipHoriz": {
    "val": false,
    "categ": "Layout",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": "constant",
    "allowedUpdates": [],
    "label": "Flip horizontally",
    "hint": "Should the image be flipped horizontally (left to right)?",
    "plugin": null
   },
   "anchor": {
    "val": "center",
    "categ": "Layout",
    "allowedVals": [
     "center",
     "top-center",
     "bottom-center",
     "center-left",
     "center-right",
     "top-left",
     "top-right",
     "bottom-left",
     "bottom-right"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Anchor",
    "hint": "Which point on the stimulus should be anchored to its exact position?",
    "plugin": null
   },
   "draggable": {
    "val": false,
    "categ": "Layout",
    "allowedVals": [],
    "valType": "code",
    "inputType": "bool",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Draggable?",
    "hint": "Should this stimulus be moveble by clicking and dragging?",
    "plugin": null
   }
  }
 },
 "JoyButtonsComponent": {
  "__class__": "psychopy.experiment.components.joyButtons:JoyButtonsComponent",
  "__name__": "JoyButtonsComponent",
  "categories": [
   "Responses"
  ],
  "targets": [
   "PsychoPy"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\joyButtons\\light\\joyButtons.png",
  "tooltip": "JoyButtons: check and record joystick/gamepad button presses",
  "version": "0.0.0",
  "beta": false,
  "validatorClasses": [],
  "hidden": false,
  "params": {
   "name": {
    "val": "button_resp",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "name",
    "updates": null,
    "allowedUpdates": null,
    "label": "Name",
    "hint": "Name of this Component (alphanumeric or _, no spaces)",
    "plugin": null
   },
   "startType": {
    "val": "time (s)",
    "categ": "Basic",
    "allowedVals": [
     "time (s)",
     "frame N",
     "condition"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Start type",
    "hint": "How do you want to define your start point?",
    "plugin": null
   },
   "stopType": {
    "val": "duration (s)",
    "categ": "Basic",
    "allowedVals": [
     "duration (s)",
     "duration (frames)",
     "time (s)",
     "frame N",
     "condition"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Stop type",
    "hint": "How do you want to define your end point?",
    "plugin": null
   },
   "startVal": {
    "val": 0.0,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Start",
    "hint": "When does the Component start?",
    "plugin": null
   },
   "stopVal": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [],
    "label": "Stop",
    "hint": "When does the Component end? (blank is endless)",
    "plugin": null
   },
   "startEstim": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Expected start (s)",
    "hint": "(Optional) expected start (s), purely for representing in the timeline",
    "plugin": null
   },
   "durationEstim": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Expected duration (s)",
    "hint": "(Optional) expected duration (s), purely for representing in the timeline",
    "plugin": null
   },
   "saveStartStop": {
    "val": true,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Save onset/offset times",
    "hint": "Store the onset/offset times in the data file (as well as in the log file).",
    "plugin": null
   },
   "syncScreenRefresh": {
    "val": true,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Sync RT with screen",
    "hint": "A reaction time to a visual stimulus should be based on when the screen flipped",
    "plugin": null
   },
   "disabled": {
    "val": false,
    "categ": "Testing",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Disable Component",
    "hint": "Disable this Component",
    "plugin": null
   },
   "allowedKeys": {
    "val": "0,1,2,3,4",
    "categ": "Data",
    "allowedVals": [],
    "valType": "list",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat"
    ],
    "label": "Allowed buttons",
    "hint": "A comma-separated list of button numbers, such as 0,1,2,3,4",
    "plugin": null
   },
   "store": {
    "val": "last key",
    "categ": "Data",
    "allowedVals": [
     "last key",
     "first key",
     "all keys",
     "nothing"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Store",
    "hint": "Choose which (if any) responses to store at the end of a trial",
    "plugin": null
   },
   "forceEndRoutine": {
    "val": true,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Force end of Routine",
    "hint": "Should a response force the end of the Routine (e.g end the trial)?",
    "plugin": null
   },
   "storeCorrect": {
    "val": false,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Store correct",
    "hint": "Do you want to save the response as correct/incorrect?",
    "plugin": null
   },
   "correctAns": {
    "val": "",
    "categ": "Data",
    "allowedVals": [],
    "valType": "list",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Correct answer",
    "hint": "What is the 'correct' key? Might be helpful to add a correctAns column and use $correctAns to compare to the key press.",
    "plugin": null
   },
   "deviceNumber": {
    "val": "0",
    "categ": "Device",
    "allowedVals": [],
    "valType": "int",
    "inputType": "int",
    "updates": "constant",
    "allowedUpdates": [],
    "label": "Device number",
    "hint": "Device number, if you have multiple devices which one do you want (0, 1, 2...)",
    "plugin": null
   }
  }
 },
 "JoyStickComponent": {
  "__class__": "psychopy.experiment.components.joystick:JoyStickComponent",
  "__name__": "JoyStickComponent",
  "categories": [
   "Responses"
  ],
  "targets": [
   "PsychoPy"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\joystick\\light\\joystick.png",
  "tooltip": "JoyStick: query joystick position and buttons",
  "version": "0.0.0",
  "beta": false,
  "validatorClasses": [],
  "hidden": false,
  "params": {
   "name": {
    "val": "joystick",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "name",
    "updates": null,
    "allowedUpdates": null,
    "label": "Name",
    "hint": "Name of this Component (alphanumeric or _, no spaces)",
    "plugin": null
   },
   "startType": {
    "val": "time (s)",
    "categ": "Basic",
    "allowedVals": [
     "time (s)",
     "frame N",
     "condition"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Start type",
    "hint": "How do you want to define your start point?",
    "plugin": null
   },
   "stopType": {
    "val": "duration (s)",
    "categ": "Basic",
    "allowedVals": [
     "duration (s)",
     "duration (frames)",
     "time (s)",
     "frame N",
     "condition"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Stop type",
    "hint": "How do you want to define your end point?",
    "plugin": null
   },
   "startVal": {
    "val": 0.0,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Start",
    "hint": "When does the Component start?",
    "plugin": null
   },
   "stopVal": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [],
    "label": "Stop",
    "hint": "When does the Component end? (blank is endless)",
    "plugin": null
   },
   "startEstim": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Expected start (s)",
    "hint": "(Optional) expected start (s), purely for representing in the timeline",
    "plugin": null
   },
   "durationEstim": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Expected duration (s)",
    "hint": "(Optional) expected duration (s), purely for representing in the timeline",
    "plugin": null
   },
   "saveStartStop": {
    "val": true,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Save onset/offset times",
    "hint": "Store the onset/offset times in the data file (as well as in the log file).",
    "plugin": null
   },
   "syncScreenRefresh": {
    "val": false,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Sync timing with screen refresh",
    "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
    "plugin": null
   },
   "disabled": {
    "val": false,
    "categ": "Testing",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Disable Component",
    "hint": "Disable this Component",
    "plugin": null
   },
   "saveJoystickState": {
    "val": "final",
    "categ": "Data",
    "allowedVals": [
     "final",
     "on click",
     "every frame",
     "never"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Save joystick state",
    "hint": "How often should the joystick state (x,y,buttons) be stored? On every video frame, every click or just at the end of the Routine?",
    "plugin": null
   },
   "forceEndRoutineOnPress": {
    "val": "any click",
    "categ": "Basic",
    "allowedVals": [
     "never",
     "any click",
     "valid click"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "End Routine on press",
    "hint": "Should a button press force the end of the Routine (e.g end the trial)?",
    "plugin": null
   },
   "timeRelativeTo": {
    "val": "joystick onset",
    "categ": "Data",
    "allowedVals": [
     "joystick onset",
     "experiment",
     "routine"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Time relative to",
    "hint": "What should the values of joystick.time be relative to?",
    "plugin": null
   },
   "clickable": {
    "val": "",
    "categ": "Data",
    "allowedVals": [],
    "valType": "list",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Clickable stimuli",
    "hint": "A comma-separated list of your stimulus names that can be \"clicked\" by the participant. e.g. target, foil",
    "plugin": null
   },
   "saveParamsClickable": {
    "val": "name,",
    "categ": "Data",
    "allowedVals": [],
    "valType": "list",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [],
    "label": "Store params for clicked",
    "hint": "The params (e.g. name, text), for which you want to store the current value, for the stimulus that was\"clicked\" by the joystick. Make sure that all the clickable objects have all these params.",
    "plugin": null
   },
   "deviceNumber": {
    "val": "0",
    "categ": "Device",
    "allowedVals": [],
    "valType": "int",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [],
    "label": "Device number",
    "hint": "Device number, if you have multiple devices which one do you want (0, 1, 2...)",
    "plugin": null
   },
   "allowedButtons": {
    "val": "",
    "categ": "Data",
    "allowedVals": [],
    "valType": "list",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [],
    "label": "Allowed buttons",
    "hint": "Buttons to be read (blank for any) numbers separated by commas",
    "plugin": null
   }
  }
 },
 "KeyboardComponent": {
  "__class__": "psychopy.experiment.components.keyboard:KeyboardComponent",
  "__name__": "KeyboardComponent",
  "categories": [
   "Responses"
  ],
  "targets": [
   "PsychoPy",
   "PsychoJS"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\keyboard\\light\\keyboard.png",
  "tooltip": "Keyboard: check and record keypresses",
  "version": "0.0.0",
  "beta": false,
  "validatorClasses": [],
  "hidden": false,
  "params": {
   "name": {
    "val": "key_resp",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "name",
    "updates": null,
    "allowedUpdates": null,
    "label": "Name",
    "hint": "Name of this Component (alphanumeric or _, no spaces)",
    "plugin": null
   },
   "startType": {
    "val": "time (s)",
    "categ": "Basic",
    "allowedVals": [
     "time (s)",
     "frame N",
     "condition"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Start type",
    "hint": "How do you want to define your start point?",
    "plugin": null
   },
   "stopType": {
    "val": "duration (s)",
    "categ": "Basic",
    "allowedVals": [
     "duration (s)",
     "duration (frames)",
     "time (s)",
     "frame N",
     "condition"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Stop type",
    "hint": "How do you want to define your end point?",
    "plugin": null
   },
   "startVal": {
    "val": 0.0,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Start",
    "hint": "When does the Component start?",
    "plugin": null
   },
   "stopVal": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [],
    "label": "Stop",
    "hint": "When does the Component end? (blank is endless)",
    "plugin": null
   },
   "startEstim": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Expected start (s)",
    "hint": "(Optional) expected start (s), purely for representing in the timeline",
    "plugin": null
   },
   "durationEstim": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Expected duration (s)",
    "hint": "(Optional) expected duration (s), purely for representing in the timeline",
    "plugin": null
   },
   "saveStartStop": {
    "val": true,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Save onset/offset times",
    "hint": "Store the onset/offset times in the data file (as well as in the log file).",
    "plugin": null
   },
   "syncScreenRefresh": {
    "val": true,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Sync timing with screen",
    "hint": "A reaction time to a visual stimulus should be based on when the screen flipped",
    "plugin": null
   },
   "disabled": {
    "val": false,
    "categ": "Testing",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Disable Component",
    "hint": "Disable this Component",
    "plugin": null
   },
   "deviceLabel": {
    "val": "",
    "categ": "Device",
    "allowedVals": [],
    "valType": "str",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Device label",
    "hint": "A label to refer to this Component's associated hardware device by. If using the same device for multiple components, be sure to use the same label here.",
    "plugin": null
   },
   "registerOn": {
    "val": "press",
    "categ": "Basic",
    "allowedVals": [
     "press",
     "release"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Register keypress on...",
    "hint": "When should the keypress be registered? As soon as pressed, or when released?",
    "plugin": null
   },
   "allowedKeys": {
    "val": "'y','n','left','right','space'",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "list",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat"
    ],
    "label": "Allowed keys",
    "hint": "A comma-separated list of keys (with quotes), such as 'q','right','space','left'",
    "plugin": null
   },
   "forceEndRoutine": {
    "val": true,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Force end of Routine",
    "hint": "Should a response force the end of the Routine (e.g end the trial)?",
    "plugin": null
   },
   "discard previous": {
    "val": true,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Discard previous",
    "hint": "Do you want to discard all responses occurring before the onset of this Component?",
    "plugin": null
   },
   "store": {
    "val": "last key",
    "categ": "Data",
    "allowedVals": [
     "last key",
     "first key",
     "all keys",
     "nothing"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Store",
    "hint": "Choose which (if any) responses to store at the end of a trial",
    "plugin": null
   },
   "storeCorrect": {
    "val": false,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Store correct",
    "hint": "Do you want to save the response as correct/incorrect?",
    "plugin": null
   },
   "correctAns": {
    "val": "",
    "categ": "Data",
    "allowedVals": [],
    "valType": "str",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Correct answer",
    "hint": "What is the 'correct' key? Might be helpful to add a correctAns column and use $correctAns to compare to the key press.",
    "plugin": null
   }
  }
 },
 "MicrophoneComponent": {
  "__class__": "psychopy.experiment.components.microphone:MicrophoneComponent",
  "__name__": "MicrophoneComponent",
  "categories": [
   "Responses"
  ],
  "targets": [
   "PsychoPy",
   "PsychoJS"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\microphone\\light\\microphone.png",
  "tooltip": "Microphone: basic sound capture (fixed onset & duration), okay for spoken words",
  "version": "2021.2.0",
  "beta": false,
  "validatorClasses": [],
  "hidden": false,
  "params": {
   "name": {
    "val": "mic",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "name",
    "updates": null,
    "allowedUpdates": null,
    "label": "Name",
    "hint": "Name of this Component (alphanumeric or _, no spaces)",
    "plugin": null
   },
   "startType": {
    "val": "time (s)",
    "categ": "Basic",
    "allowedVals": [
     "time (s)",
     "frame N",
     "condition"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Start type",
    "hint": "How do you want to define your start point?",
    "plugin": null
   },
   "stopType": {
    "val": "duration (s)",
    "categ": "Basic",
    "allowedVals": [
     "duration (s)"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Stop type",
    "hint": "The duration of the recording in seconds; blank = 0 sec",
    "plugin": null
   },
   "startVal": {
    "val": 0.0,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Start",
    "hint": "When does the Component start?",
    "plugin": null
   },
   "stopVal": {
    "val": 2.0,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [],
    "label": "Stop",
    "hint": "When does the Component end? (blank is endless)",
    "plugin": null
   },
   "startEstim": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Expected start (s)",
    "hint": "(Optional) expected start (s), purely for representing in the timeline",
    "plugin": null
   },
   "durationEstim": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Expected duration (s)",
    "hint": "(Optional) expected duration (s), purely for representing in the timeline",
    "plugin": null
   },
   "saveStartStop": {
    "val": true,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Save onset/offset times",
    "hint": "Store the onset/offset times in the data file (as well as in the log file).",
    "plugin": null
   },
   "syncScreenRefresh": {
    "val": false,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Sync timing with screen refresh",
    "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
    "plugin": null
   },
   "disabled": {
    "val": false,
    "categ": "Testing",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Disable Component",
    "hint": "Disable this Component",
    "plugin": null
   },
   "deviceLabel": {
    "val": "",
    "categ": "Device",
    "allowedVals": [],
    "valType": "str",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Device label",
    "hint": "A label to refer to this Component's associated hardware device by. If using the same device for multiple components, be sure to use the same label here.",
    "plugin": null
   },
   "device": {
    "val": null,
    "categ": "Device",
    "allowedVals": [
     "$None",
     "Microphone (Steam Streaming Microphone)",
     "Microphone (Logitech BRIO)",
     "Microphone (PowerConf S3)",
     "Speakers (Steam Streaming Speakers) [Loopback]",
     "Digital Audio (S/PDIF) (High Definition Audio Device) [Loopback]",
     "Speakers (Steam Streaming Microphone) [Loopback]",
     "Speakers (PowerConf S3) [Loopback]",
     "Headphones (Office Speaker Stereo) [Loopback]"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Device",
    "hint": "What microphone device would you like the use to record? This will only affect local experiments - online experiments ask the participant which mic to use.",
    "plugin": null
   },
   "exclusive": {
    "val": false,
    "categ": "Device",
    "allowedVals": [],
    "valType": "code",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Exclusive control",
    "hint": "Take exclusive control of the microphone, so other apps can't use it during your experiment.",
    "plugin": null
   },
   "outputType": {
    "val": "default",
    "categ": "Data",
    "allowedVals": [
     "default",
     "aiff",
     "au",
     "avr",
     "caf",
     "flac",
     "htk",
     "svx",
     "mat4",
     "mat5",
     "mpc2k",
     "mp3",
     "ogg",
     "paf",
     "pvf",
     "raw",
     "rf64",
     "sd2",
     "sds",
     "ircam",
     "voc",
     "w64",
     "wav",
     "nist",
     "wavex",
     "wve",
     "xi"
    ],
    "valType": "code",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Output file type",
    "hint": "What file type should output audio files be saved as?",
    "plugin": null
   },
   "policyWhenFull": {
    "val": "warn",
    "categ": "Data",
    "allowedVals": [
     "warn",
     "roll",
     "error"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": "set every repeat",
    "allowedUpdates": null,
    "label": "Full buffer policy",
    "hint": "What to do when we reach the max amount of audio data which can be safely stored in memory?",
    "plugin": null
   },
   "speakTimes": {
    "val": false,
    "categ": "Transcription",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Speaking start / stop times",
    "hint": "Tick this to save times when the participant starts and stops speaking",
    "plugin": null
   },
   "trimSilent": {
    "val": false,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Trim silent",
    "hint": "Trim periods of silence from the output file",
    "plugin": null
   },
   "transcribe": {
    "val": false,
    "categ": "Transcription",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Transcribe audio",
    "hint": "Whether to transcribe the audio recording and store the transcription",
    "plugin": null
   },
   "transcribeBackend": {
    "val": "none",
    "categ": "Transcription",
    "allowedVals": [
     "none",
     "google"
    ],
    "valType": "code",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Transcription backend",
    "hint": "What transcription service to use to transcribe audio?",
    "plugin": null
   },
   "transcribeLang": {
    "val": "en-US",
    "categ": "Transcription",
    "allowedVals": [],
    "valType": "str",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Transcription language",
    "hint": "What language you expect the recording to be spoken in, e.g. en-US for English",
    "plugin": null
   },
   "transcribeWords": {
    "val": "",
    "categ": "Transcription",
    "allowedVals": [],
    "valType": "list",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Expected words",
    "hint": "Set list of words to listen for - if blank will listen for all words in chosen language. \n\nIf using the built-in transcriber, you can set a minimum % confidence level using a colon after the word, e.g. 'red:100', 'green:80'. Otherwise, default confidence level is 80%.",
    "plugin": null
   },
   "transcribeWhisperModel": {
    "val": "base",
    "categ": "Transcription",
    "allowedVals": [
     "tiny",
     "base",
     "small",
     "medium",
     "large",
     "tiny.en",
     "base.en",
     "small.en",
     "medium.en"
    ],
    "valType": "code",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Whisper model",
    "hint": "Which model of Whisper AI should be used for transcription? Details of each model are available here at github.com/openai/whisper",
    "plugin": null
   },
   "transcribeWhisperDevice": {
    "val": "auto",
    "categ": "Transcription",
    "allowedVals": [
     "auto",
     "gpu",
     "cpu"
    ],
    "valType": "code",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Whisper device",
    "hint": "Which device to use for transcription?",
    "plugin": null
   }
  }
 },
 "MouseComponent": {
  "__class__": "psychopy.experiment.components.mouse:MouseComponent",
  "__name__": "MouseComponent",
  "categories": [
   "Responses"
  ],
  "targets": [
   "PsychoPy",
   "PsychoJS"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\mouse\\light\\mouse.png",
  "tooltip": "Mouse: query mouse position and buttons",
  "version": "0.0.0",
  "beta": false,
  "validatorClasses": [],
  "hidden": false,
  "params": {
   "name": {
    "val": "mouse",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "name",
    "updates": null,
    "allowedUpdates": null,
    "label": "Name",
    "hint": "Name of this Component (alphanumeric or _, no spaces)",
    "plugin": null
   },
   "startType": {
    "val": "time (s)",
    "categ": "Basic",
    "allowedVals": [
     "time (s)",
     "frame N",
     "condition"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Start type",
    "hint": "How do you want to define your start point?",
    "plugin": null
   },
   "stopType": {
    "val": "duration (s)",
    "categ": "Basic",
    "allowedVals": [
     "duration (s)",
     "duration (frames)",
     "time (s)",
     "frame N",
     "condition"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Stop type",
    "hint": "How do you want to define your end point?",
    "plugin": null
   },
   "startVal": {
    "val": 0.0,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Start",
    "hint": "When does the Component start?",
    "plugin": null
   },
   "stopVal": {
    "val": 1.0,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [],
    "label": "Stop",
    "hint": "When does the Component end? (blank is endless)",
    "plugin": null
   },
   "startEstim": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Expected start (s)",
    "hint": "(Optional) expected start (s), purely for representing in the timeline",
    "plugin": null
   },
   "durationEstim": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Expected duration (s)",
    "hint": "(Optional) expected duration (s), purely for representing in the timeline",
    "plugin": null
   },
   "saveStartStop": {
    "val": true,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Save onset/offset times",
    "hint": "Store the onset/offset times in the data file (as well as in the log file).",
    "plugin": null
   },
   "syncScreenRefresh": {
    "val": false,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Sync timing with screen refresh",
    "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
    "plugin": null
   },
   "disabled": {
    "val": false,
    "categ": "Testing",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Disable Component",
    "hint": "Disable this Component",
    "plugin": null
   },
   "saveMouseState": {
    "val": "on click",
    "categ": "Data",
    "allowedVals": [
     "final",
     "on click",
     "on valid click",
     "every frame",
     "never"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Save mouse state",
    "hint": "How often should the mouse state (x,y,buttons) be stored? On every video frame, every click or just at the end of the Routine?",
    "plugin": null
   },
   "forceEndRoutineOnPress": {
    "val": "any click",
    "categ": "Basic",
    "allowedVals": [
     "never",
     "any click",
     "valid click",
     "correct click"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "End Routine on press",
    "hint": "Should a button press force the end of the Routine (e.g end the trial)?",
    "plugin": null
   },
   "timeRelativeTo": {
    "val": "mouse onset",
    "categ": "Data",
    "allowedVals": [
     "mouse onset",
     "experiment",
     "routine"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Time relative to",
    "hint": "What should the values of mouse.time should be relative to?",
    "plugin": null
   },
   "newClicksOnly": {
    "val": true,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "New clicks only",
    "hint": "If the mouse button is already down when we start checking then wait for it to be released before recording as a new click.",
    "plugin": null
   },
   "clickable": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "list",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Clickable stimuli",
    "hint": "A comma-separated list of your stimulus names that can be \"clicked\" by the participant. e.g. target, foil",
    "plugin": null
   },
   "saveParamsClickable": {
    "val": "name,",
    "categ": "Data",
    "allowedVals": [],
    "valType": "list",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [],
    "label": "Store params for clicked",
    "hint": "The params (e.g. name, text), for which you want to store the current value, for the stimulus that was\"clicked\" by the mouse. Make sure that all the clickable objects have all these params.",
    "plugin": null
   },
   "storeCorrect": {
    "val": false,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Store correct",
    "hint": "Do you want to save the response as correct/incorrect?",
    "plugin": null
   },
   "correctAns": {
    "val": "",
    "categ": "Data",
    "allowedVals": [],
    "valType": "list",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Correct answer",
    "hint": "What is the 'correct' object? To specify an area, remember that you can create a shape Component with 0 opacity.",
    "plugin": null
   }
  }
 },
 "MovieComponent": {
  "__class__": "psychopy.experiment.components.movie:MovieComponent",
  "__name__": "MovieComponent",
  "categories": [
   "Stimuli"
  ],
  "targets": [
   "PsychoPy",
   "PsychoJS"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\movie\\light\\movie.png",
  "tooltip": "Movie: play movie files",
  "version": "0.0.0",
  "beta": false,
  "validatorClasses": [
   "VisualValidatorRoutine"
  ],
  "hidden": false,
  "params": {
   "name": {
    "val": "movie",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "name",
    "updates": null,
    "allowedUpdates": null,
    "label": "Name",
    "hint": "Name of this Component (alphanumeric or _, no spaces)",
    "plugin": null
   },
   "startType": {
    "val": "time (s)",
    "categ": "Basic",
    "allowedVals": [
     "time (s)",
     "frame N",
     "condition"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Start type",
    "hint": "How do you want to define your start point?",
    "plugin": null
   },
   "stopType": {
    "val": "duration (s)",
    "categ": "Basic",
    "allowedVals": [
     "duration (s)",
     "duration (frames)",
     "time (s)",
     "frame N",
     "condition"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Stop type",
    "hint": "How do you want to define your end point?",
    "plugin": null
   },
   "startVal": {
    "val": 0.0,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Start",
    "hint": "When does the Component start?",
    "plugin": null
   },
   "stopVal": {
    "val": 1.0,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [],
    "label": "Stop",
    "hint": "When does the Component end? (blank to use the duration of the media)",
    "plugin": null
   },
   "startEstim": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Expected start (s)",
    "hint": "(Optional) expected start (s), purely for representing in the timeline",
    "plugin": null
   },
   "durationEstim": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Expected duration (s)",
    "hint": "(Optional) expected duration (s), purely for representing in the timeline",
    "plugin": null
   },
   "saveStartStop": {
    "val": true,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Save onset/offset times",
    "hint": "Store the onset/offset times in the data file (as well as in the log file).",
    "plugin": null
   },
   "syncScreenRefresh": {
    "val": true,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Sync timing with screen refresh",
    "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
    "plugin": null
   },
   "disabled": {
    "val": false,
    "categ": "Testing",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Disable Component",
    "hint": "Disable this Component",
    "plugin": null
   },
   "units": {
    "val": "from exp settings",
    "categ": "Layout",
    "allowedVals": [
     "from exp settings",
     "deg",
     "cm",
     "pix",
     "norm",
     "height",
     "degFlatPos",
     "degFlat"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Spatial units",
    "hint": "Units of dimensions for this stimulus",
    "plugin": null
   },
   "opacity": {
    "val": "",
    "categ": "Appearance",
    "allowedVals": [],
    "valType": "num",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Opacity",
    "hint": "Opacity of the stimulus (1=opaque, 0=fully transparent, 0.5=translucent). Leave blank for each color to have its own opacity (recommended if any color is None).",
    "plugin": null
   },
   "contrast": {
    "val": 1,
    "categ": "Appearance",
    "allowedVals": [],
    "valType": "num",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Contrast",
    "hint": "Contrast of the stimulus (1.0=unchanged contrast, 0.5=decrease contrast, 0.0=uniform/no contrast, -0.5=slightly inverted, -1.0=totally inverted)",
    "plugin": null
   },
   "pos": {
    "val": [
     0,
     0
    ],
    "categ": "Layout",
    "allowedVals": [],
    "valType": "list",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Position [x,y]",
    "hint": "Position of this stimulus (e.g. [1,2] )",
    "plugin": null
   },
   "size": {
    "val": [
     0.5,
     0.5
    ],
    "categ": "Layout",
    "allowedVals": [],
    "valType": "list",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Size [w,h]",
    "hint": "Size of this stimulus (either a single value or x,y pair, e.g. 2.5, [1,2] ",
    "plugin": null
   },
   "ori": {
    "val": 0,
    "categ": "Layout",
    "allowedVals": [
     -360,
     360
    ],
    "valType": "num",
    "inputType": "spin",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Orientation",
    "hint": "Orientation of this stimulus (in deg)",
    "plugin": null
   },
   "validator": {
    "val": "",
    "categ": "Testing",
    "allowedVals": [
     ""
    ],
    "valType": "code",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Validate with...",
    "hint": "Name of validator Component/Routine to use to check the timing of this stimulus.",
    "plugin": null
   },
   "movie": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "file",
    "inputType": "file",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat"
    ],
    "label": "Movie file",
    "hint": "A filename for the movie (including path)",
    "plugin": null
   },
   "backend": {
    "val": "ffpyplayer",
    "categ": "Playback",
    "allowedVals": [
     "ffpyplayer",
     "moviepy",
     "opencv",
     "vlc"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Backend",
    "hint": "What underlying lib to use for loading movies",
    "plugin": null
   },
   "No audio": {
    "val": false,
    "categ": "Playback",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "No audio",
    "hint": "Prevent the audio stream from being loaded/processed (moviepy and opencv only)",
    "plugin": null
   },
   "volume": {
    "val": 1,
    "categ": "Playback",
    "allowedVals": [],
    "valType": "num",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Volume",
    "hint": "How loud should audio be played?",
    "plugin": null
   },
   "forceEndRoutine": {
    "val": false,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": "constant",
    "allowedUpdates": [],
    "label": "Force end of Routine",
    "hint": "Should the end of the movie cause the end of the Routine (e.g. trial)?",
    "plugin": null
   },
   "loop": {
    "val": false,
    "categ": "Playback",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Loop playback",
    "hint": "Whether the movie should loop back to the beginning on completion.",
    "plugin": null
   },
   "stopWithRoutine": {
    "val": true,
    "categ": "Playback",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Stop with Routine?",
    "hint": "Should playback cease when the Routine ends? Untick to continue playing after the Routine has finished.",
    "plugin": null
   },
   "anchor": {
    "val": "center",
    "categ": "Layout",
    "allowedVals": [
     "center",
     "top-center",
     "bottom-center",
     "center-left",
     "center-right",
     "top-left",
     "top-right",
     "bottom-left",
     "bottom-right"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Anchor",
    "hint": "Which point on the stimulus should be anchored to its exact position?",
    "plugin": null
   }
  }
 },
 "PanoramaComponent": {
  "__class__": "psychopy.experiment.components.panorama:PanoramaComponent",
  "__name__": "PanoramaComponent",
  "categories": [
   "Stimuli"
  ],
  "targets": [
   "PsychoPy"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\panorama\\light\\panorama.png",
  "tooltip": "Panorama: Present a panoramic image (such as from a phone camera in Panorama mode) on screen.",
  "version": "2023.1.0",
  "beta": true,
  "validatorClasses": [
   "VisualValidatorRoutine"
  ],
  "hidden": false,
  "params": {
   "name": {
    "val": "pan",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "name",
    "updates": null,
    "allowedUpdates": null,
    "label": "Name",
    "hint": "Name of this Component (alphanumeric or _, no spaces)",
    "plugin": null
   },
   "startType": {
    "val": "time (s)",
    "categ": "Basic",
    "allowedVals": [
     "time (s)",
     "frame N",
     "condition"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Start type",
    "hint": "How do you want to define your start point?",
    "plugin": null
   },
   "stopType": {
    "val": "duration (s)",
    "categ": "Basic",
    "allowedVals": [
     "duration (s)",
     "duration (frames)",
     "time (s)",
     "frame N",
     "condition"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Stop type",
    "hint": "How do you want to define your end point?",
    "plugin": null
   },
   "startVal": {
    "val": 0,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Start",
    "hint": "When does the Component start?",
    "plugin": null
   },
   "stopVal": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [],
    "label": "Stop",
    "hint": "When does the Component end? (blank is endless)",
    "plugin": null
   },
   "startEstim": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Expected start (s)",
    "hint": "(Optional) expected start (s), purely for representing in the timeline",
    "plugin": null
   },
   "durationEstim": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Expected duration (s)",
    "hint": "(Optional) expected duration (s), purely for representing in the timeline",
    "plugin": null
   },
   "saveStartStop": {
    "val": true,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Save onset/offset times",
    "hint": "Store the onset/offset times in the data file (as well as in the log file).",
    "plugin": null
   },
   "syncScreenRefresh": {
    "val": true,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Sync timing with screen refresh",
    "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
    "plugin": null
   },
   "disabled": {
    "val": false,
    "categ": "Testing",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Disable Component",
    "hint": "Disable this Component",
    "plugin": null
   },
   "validator": {
    "val": "",
    "categ": "Testing",
    "allowedVals": [
     ""
    ],
    "valType": "code",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Validate with...",
    "hint": "Name of validator Component/Routine to use to check the timing of this stimulus.",
    "plugin": null
   },
   "image": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "file",
    "inputType": "file",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Image",
    "hint": "The image to be displayed - a filename, including path",
    "plugin": null
   },
   "interpolate": {
    "val": "linear",
    "categ": "Basic",
    "allowedVals": [
     "linear",
     "nearest"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": "constant",
    "allowedUpdates": [],
    "label": "Interpolate",
    "hint": "How should the image be interpolated if/when rescaled",
    "plugin": null
   },
   "posCtrl": {
    "val": "mouse",
    "categ": "Basic",
    "allowedVals": [
     "mouse",
     "drag",
     "arrows",
     "wasd",
     "keymap",
     "custom"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Position control",
    "hint": "How to control looking around the panorama scene",
    "plugin": null
   },
   "azimuth": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Azimuth",
    "hint": "Horizontal look position, ranging from -1 (fully left) to 1 (fully right)",
    "plugin": null
   },
   "elevation": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Elevation",
    "hint": "Vertical look position, ranging from -1 (fully down) to 1 (fully up)",
    "plugin": null
   },
   "upKey": {
    "val": "w",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "str",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Up",
    "hint": "What key corresponds to the view action 'Up'?",
    "plugin": null
   },
   "leftKey": {
    "val": "a",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "str",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Left",
    "hint": "What key corresponds to the view action 'Left'?",
    "plugin": null
   },
   "downKey": {
    "val": "s",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "str",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Down",
    "hint": "What key corresponds to the view action 'Down'?",
    "plugin": null
   },
   "rightKey": {
    "val": "d",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "str",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Right",
    "hint": "What key corresponds to the view action 'Right'?",
    "plugin": null
   },
   "stopKey": {
    "val": "space",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "str",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Stop",
    "hint": "What key corresponds to the view action 'Stop'?",
    "plugin": null
   },
   "smooth": {
    "val": true,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Smooth?",
    "hint": "Should movement be smoothed, so the view keeps moving a little after a change?",
    "plugin": null
   },
   "posSensitivity": {
    "val": 1,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Movement sensitivity",
    "hint": "Multiplier to apply to view changes. 1 means that moving the mouse from the center of the screen to the edge or holding down a key for 2s will rotate 180\u00b0.",
    "plugin": null
   },
   "zoomCtrl": {
    "val": "wheel",
    "categ": "Basic",
    "allowedVals": [
     "wheel",
     "invwheel",
     "arrows",
     "plusmin",
     "keymap",
     "custom"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Zoom control",
    "hint": "How to control zooming in and out of the panorama scene",
    "plugin": null
   },
   "inKey": {
    "val": "up",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "str",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Zoom in",
    "hint": "What key corresponds to the view action 'Zoom in'?",
    "plugin": null
   },
   "outKey": {
    "val": "down",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "str",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Zoom out",
    "hint": "What key corresponds to the view action 'Zoom out'?",
    "plugin": null
   },
   "zoom": {
    "val": 1,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Zoom",
    "hint": "How zoomed in the scene is, with 1 being no adjustment.",
    "plugin": null
   },
   "zoomSensitivity": {
    "val": 1,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Zoom sensitivity",
    "hint": "Multiplier to apply to zoom changes. 1 means that pressing the zoom in key for 1s or scrolling the mouse wheel 100% zooms in 100%.",
    "plugin": null
   }
  }
 },
 "ParallelOutComponent": {
  "__class__": "psychopy.experiment.components.parallelOut:ParallelOutComponent",
  "__name__": "ParallelOutComponent",
  "categories": [
   "I/O",
   "EEG"
  ],
  "targets": [
   "PsychoPy"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\parallelOut\\light\\parallel.png",
  "tooltip": "Parallel out: send signals from the parallel port",
  "version": "0.0.0",
  "beta": false,
  "validatorClasses": [],
  "hidden": false,
  "params": {
   "name": {
    "val": "p_port",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "name",
    "updates": null,
    "allowedUpdates": null,
    "label": "Name",
    "hint": "Name of this Component (alphanumeric or _, no spaces)",
    "plugin": null
   },
   "startType": {
    "val": "time (s)",
    "categ": "Basic",
    "allowedVals": [
     "time (s)",
     "frame N",
     "condition"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Start type",
    "hint": "How do you want to define your start point?",
    "plugin": null
   },
   "stopType": {
    "val": "duration (s)",
    "categ": "Basic",
    "allowedVals": [
     "duration (s)",
     "duration (frames)",
     "time (s)",
     "frame N",
     "condition"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Stop type",
    "hint": "How do you want to define your end point?",
    "plugin": null
   },
   "startVal": {
    "val": 0.0,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Start",
    "hint": "When does the Component start?",
    "plugin": null
   },
   "stopVal": {
    "val": 1.0,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [],
    "label": "Stop",
    "hint": "When does the Component end? (blank is endless)",
    "plugin": null
   },
   "startEstim": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Expected start (s)",
    "hint": "(Optional) expected start (s), purely for representing in the timeline",
    "plugin": null
   },
   "durationEstim": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Expected duration (s)",
    "hint": "(Optional) expected duration (s), purely for representing in the timeline",
    "plugin": null
   },
   "saveStartStop": {
    "val": true,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Save onset/offset times",
    "hint": "Store the onset/offset times in the data file (as well as in the log file).",
    "plugin": null
   },
   "syncScreenRefresh": {
    "val": false,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Sync timing with screen refresh",
    "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
    "plugin": null
   },
   "disabled": {
    "val": false,
    "categ": "Testing",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Disable Component",
    "hint": "Disable this Component",
    "plugin": null
   },
   "address": {
    "val": "0x0378",
    "categ": "Device",
    "allowedVals": [
     "0x0378",
     "0x03BC",
     "LabJack U3",
     "USB2TTL8"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Port address",
    "hint": "Parallel port to be used (you can change these options in preferences>general)",
    "plugin": null
   },
   "register": {
    "val": "EIO",
    "categ": "Device",
    "allowedVals": [
     "EIO",
     "FIO"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "U3 register",
    "hint": "U3 Register to write byte to",
    "plugin": null
   },
   "startData": {
    "val": "1",
    "categ": "Data",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Start data",
    "hint": "Data to be sent at 'start'",
    "plugin": null
   },
   "stopData": {
    "val": "0",
    "categ": "Data",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Stop data",
    "hint": "Data to be sent at 'end'",
    "plugin": null
   },
   "syncScreen": {
    "val": true,
    "categ": "Data",
    "allowedVals": [
     true,
     false
    ],
    "valType": "bool",
    "inputType": "bool",
    "updates": "constant",
    "allowedUpdates": [],
    "label": "Sync to screen",
    "hint": "If the parallel port data relates to visual stimuli then sync its pulse to the screen refresh",
    "plugin": null
   }
  }
 },
 "ProgressComponent": {
  "__class__": "psychopy.experiment.components.progress:ProgressComponent",
  "__name__": "ProgressComponent",
  "categories": [
   "Stimuli"
  ],
  "targets": [
   "PsychoPy",
   "PsychoJS"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\progress\\light\\progress.png",
  "tooltip": "Progress: Present a progress bar, with values ranging from 0 to 1.",
  "version": "2023.2.0",
  "beta": true,
  "validatorClasses": [
   "VisualValidatorRoutine"
  ],
  "hidden": false,
  "params": {
   "name": {
    "val": "prog",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "name",
    "updates": null,
    "allowedUpdates": null,
    "label": "Name",
    "hint": "Name of this Component (alphanumeric or _, no spaces)",
    "plugin": null
   },
   "startType": {
    "val": "time (s)",
    "categ": "Basic",
    "allowedVals": [
     "time (s)",
     "frame N",
     "condition"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Start type",
    "hint": "How do you want to define your start point?",
    "plugin": null
   },
   "stopType": {
    "val": "duration (s)",
    "categ": "Basic",
    "allowedVals": [
     "duration (s)",
     "duration (frames)",
     "time (s)",
     "frame N",
     "condition"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Stop type",
    "hint": "How do you want to define your end point?",
    "plugin": null
   },
   "startVal": {
    "val": 0,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Start",
    "hint": "When does the Component start?",
    "plugin": null
   },
   "stopVal": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [],
    "label": "Stop",
    "hint": "When does the Component end? (blank is endless)",
    "plugin": null
   },
   "startEstim": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Expected start (s)",
    "hint": "(Optional) expected start (s), purely for representing in the timeline",
    "plugin": null
   },
   "durationEstim": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Expected duration (s)",
    "hint": "(Optional) expected duration (s), purely for representing in the timeline",
    "plugin": null
   },
   "saveStartStop": {
    "val": true,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Save onset/offset times",
    "hint": "Store the onset/offset times in the data file (as well as in the log file).",
    "plugin": null
   },
   "syncScreenRefresh": {
    "val": true,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Sync timing with screen refresh",
    "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
    "plugin": null
   },
   "disabled": {
    "val": false,
    "categ": "Testing",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Disable Component",
    "hint": "Disable this Component",
    "plugin": null
   },
   "units": {
    "val": "height",
    "categ": "Layout",
    "allowedVals": [
     "from exp settings",
     "deg",
     "cm",
     "pix",
     "norm",
     "height",
     "degFlatPos",
     "degFlat"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Spatial units",
    "hint": "Units of dimensions for this stimulus",
    "plugin": null
   },
   "color": {
    "val": "white",
    "categ": "Appearance",
    "allowedVals": [],
    "valType": "color",
    "inputType": "color",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Bar color",
    "hint": "Color of the filled part of the progress bar.",
    "plugin": null
   },
   "colorSpace": {
    "val": "rgb",
    "categ": "Appearance",
    "allowedVals": [
     "rgb",
     "dkl",
     "lms",
     "hsv"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Color space",
    "hint": "In what format (color space) have you specified the colors? (rgb, dkl, lms, hsv)",
    "plugin": null
   },
   "fillColor": {
    "val": "None",
    "categ": "Appearance",
    "allowedVals": [],
    "valType": "color",
    "inputType": "color",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Back color",
    "hint": "Color of the empty part of the progress bar.",
    "plugin": null
   },
   "borderColor": {
    "val": "white",
    "categ": "Appearance",
    "allowedVals": [],
    "valType": "color",
    "inputType": "color",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Border color",
    "hint": "Color of the line around the progress bar.",
    "plugin": null
   },
   "opacity": {
    "val": 1,
    "categ": "Appearance",
    "allowedVals": [],
    "valType": "num",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Opacity",
    "hint": "Opacity of the stimulus (1=opaque, 0=fully transparent, 0.5=translucent). Leave blank for each color to have its own opacity (recommended if any color is None).",
    "plugin": null
   },
   "contrast": {
    "val": 1,
    "categ": "Appearance",
    "allowedVals": [],
    "valType": "num",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Contrast",
    "hint": "Contrast of the stimulus (1.0=unchanged contrast, 0.5=decrease contrast, 0.0=uniform/no contrast, -0.5=slightly inverted, -1.0=totally inverted)",
    "plugin": null
   },
   "pos": {
    "val": [
     0,
     0
    ],
    "categ": "Layout",
    "allowedVals": [],
    "valType": "list",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Position [x,y]",
    "hint": "Position of this stimulus (e.g. [1,2] )",
    "plugin": null
   },
   "size": {
    "val": [
     0.5,
     0.5
    ],
    "categ": "Layout",
    "allowedVals": [],
    "valType": "list",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Size [w,h]",
    "hint": "Size of this stimulus (either a single value or x,y pair, e.g. 2.5, [1,2] ",
    "plugin": null
   },
   "ori": {
    "val": 0,
    "categ": "Layout",
    "allowedVals": [
     -360,
     360
    ],
    "valType": "num",
    "inputType": "spin",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Orientation",
    "hint": "Orientation of this stimulus (in deg)",
    "plugin": null
   },
   "validator": {
    "val": "",
    "categ": "Testing",
    "allowedVals": [
     ""
    ],
    "valType": "code",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Validate with...",
    "hint": "Name of validator Component/Routine to use to check the timing of this stimulus.",
    "plugin": null
   },
   "progress": {
    "val": 0,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Progress",
    "hint": "Value between 0 (not started) and 1 (complete) to set the progress bar to.",
    "plugin": null
   },
   "lineWidth": {
    "val": 4,
    "categ": "Appearance",
    "allowedVals": [],
    "valType": "num",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Line width",
    "hint": "Width of the shape's line (always in pixels - this does NOT use 'units')",
    "plugin": null
   },
   "anchor": {
    "val": "center-left",
    "categ": "Layout",
    "allowedVals": [
     "center",
     "top-center",
     "bottom-center",
     "center-left",
     "center-right",
     "top-left",
     "top-right",
     "bottom-left",
     "bottom-right"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Anchor",
    "hint": "Which point on the stimulus should be anchored to its exact position?",
    "plugin": null
   }
  }
 },
 "ResourceManagerComponent": {
  "__class__": "psychopy.experiment.components.resourceManager:ResourceManagerComponent",
  "__name__": "ResourceManagerComponent",
  "categories": [
   "Custom"
  ],
  "targets": [
   "PsychoJS"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\resourceManager\\light\\resource_manager.png",
  "tooltip": "Pre-load some resources into memory so that components using them can start without having to load first",
  "version": "0.0.0",
  "beta": true,
  "validatorClasses": [],
  "hidden": false,
  "params": {
   "name": {
    "val": "resources",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "name",
    "updates": null,
    "allowedUpdates": null,
    "label": "Name",
    "hint": "Name of this Component (alphanumeric or _, no spaces)",
    "plugin": null
   },
   "startType": {
    "val": "time (s)",
    "categ": "Basic",
    "allowedVals": [
     "time (s)",
     "frame N",
     "condition"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Start type",
    "hint": "How do you want to define your start point?",
    "plugin": null
   },
   "stopType": {
    "val": "duration (s)",
    "categ": "Basic",
    "allowedVals": [
     "duration (s)",
     "duration (frames)",
     "time (s)",
     "frame N",
     "condition"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Stop type",
    "hint": "How do you want to define your end point?",
    "plugin": null
   },
   "startVal": {
    "val": 0,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Start",
    "hint": "When does the Component start?",
    "plugin": null
   },
   "stopVal": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [],
    "label": "Check",
    "hint": "When does the Component end? (blank is endless)",
    "plugin": null
   },
   "startEstim": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Expected start (s)",
    "hint": "(Optional) expected start (s), purely for representing in the timeline",
    "plugin": null
   },
   "durationEstim": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Expected duration (s)",
    "hint": "(Optional) expected duration (s), purely for representing in the timeline",
    "plugin": null
   },
   "disabled": {
    "val": false,
    "categ": "Testing",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Disable Component",
    "hint": "Disable this Component",
    "plugin": null
   },
   "resources": {
    "val": [],
    "categ": "Basic",
    "allowedVals": [],
    "valType": "list",
    "inputType": "fileList",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Resources",
    "hint": "Resources to download/check",
    "plugin": null
   },
   "checkAll": {
    "val": [],
    "categ": "Basic",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Check all",
    "hint": "When checking these resources, also check for all currently downloading?",
    "plugin": null
   },
   "actionType": {
    "val": "Start and Check",
    "categ": "Basic",
    "allowedVals": [
     "Start and Check",
     "Start Only",
     "Check Only"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Preload actions",
    "hint": "Should this Component start an / or check resource preloading?",
    "plugin": null
   },
   "forceEndRoutine": {
    "val": false,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Force end Routine",
    "hint": "Should we end the Routine when the resource download is complete?",
    "plugin": null
   }
  }
 },
 "RegionOfInterestComponent": {
  "__class__": "psychopy.experiment.components.roi:RegionOfInterestComponent",
  "__name__": "RegionOfInterestComponent",
  "categories": [
   "Eyetracking"
  ],
  "targets": [
   "PsychoPy"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\roi\\light\\eyetracker_roi.png",
  "tooltip": "Region Of Interest: Define a region of interest for use with eyetrackers",
  "version": "2021.2.0",
  "beta": false,
  "validatorClasses": [
   "VisualValidatorRoutine"
  ],
  "hidden": false,
  "params": {
   "name": {
    "val": "roi",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "name",
    "updates": null,
    "allowedUpdates": null,
    "label": "Name",
    "hint": "Name of this Component (alphanumeric or _, no spaces)",
    "plugin": null
   },
   "startType": {
    "val": "time (s)",
    "categ": "Basic",
    "allowedVals": [
     "time (s)",
     "frame N",
     "condition"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Start type",
    "hint": "How do you want to define your start point?",
    "plugin": null
   },
   "stopType": {
    "val": "duration (s)",
    "categ": "Basic",
    "allowedVals": [
     "duration (s)",
     "duration (frames)",
     "time (s)",
     "frame N",
     "condition"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Stop type",
    "hint": "How do you want to define your end point?",
    "plugin": null
   },
   "startVal": {
    "val": 0.0,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Start",
    "hint": "When does the Component start?",
    "plugin": null
   },
   "stopVal": {
    "val": 1.0,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [],
    "label": "Stop",
    "hint": "When does the Component end? (blank is endless)",
    "plugin": null
   },
   "startEstim": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Expected start (s)",
    "hint": "(Optional) expected start (s), purely for representing in the timeline",
    "plugin": null
   },
   "durationEstim": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Expected duration (s)",
    "hint": "(Optional) expected duration (s), purely for representing in the timeline",
    "plugin": null
   },
   "saveStartStop": {
    "val": true,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Save onset/offset times",
    "hint": "Store the onset/offset times in the data file (as well as in the log file).",
    "plugin": null
   },
   "syncScreenRefresh": {
    "val": true,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Sync timing with screen refresh",
    "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
    "plugin": null
   },
   "disabled": {
    "val": false,
    "categ": "Testing",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Disable Component",
    "hint": "Disable this Component",
    "plugin": null
   },
   "units": {
    "val": "from exp settings",
    "categ": "Layout",
    "allowedVals": [
     "from exp settings"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Spatial units",
    "hint": "Units of dimensions for this stimulus",
    "plugin": null
   },
   "pos": {
    "val": [
     0,
     0
    ],
    "categ": "Layout",
    "allowedVals": [],
    "valType": "list",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Position [x,y]",
    "hint": "Position of this stimulus (e.g. [1,2] )",
    "plugin": null
   },
   "size": {
    "val": [
     0.5,
     0.5
    ],
    "categ": "Layout",
    "allowedVals": [],
    "valType": "list",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Size [w,h]",
    "hint": "Size of this stimulus [w,h]. Note that for a line only the first value is used, for triangle and rect the [w,h] is as expected,\n but for higher-order polygons it represents the [w,h] of the ellipse that the polygon sits on!! ",
    "plugin": null
   },
   "ori": {
    "val": 0,
    "categ": "Layout",
    "allowedVals": [
     -360,
     360
    ],
    "valType": "num",
    "inputType": "spin",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Orientation",
    "hint": "Orientation of this stimulus (in deg)",
    "plugin": null
   },
   "validator": {
    "val": "",
    "categ": "Testing",
    "allowedVals": [
     ""
    ],
    "valType": "code",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Validate with...",
    "hint": "Name of validator Component/Routine to use to check the timing of this stimulus.",
    "plugin": null
   },
   "nVertices": {
    "val": 4,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "int",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Num. vertices",
    "hint": "How many vertices in your regular polygon?",
    "plugin": null
   },
   "vertices": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "list",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Vertices",
    "hint": "What are the vertices of your polygon? Should be an nx2 array or a list of [x, y] lists",
    "plugin": null
   },
   "anchor": {
    "val": "center",
    "categ": "Layout",
    "allowedVals": [
     "center",
     "top-center",
     "bottom-center",
     "center-left",
     "center-right",
     "top-left",
     "top-right",
     "bottom-left",
     "bottom-right"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Anchor",
    "hint": "Which point on the stimulus should be anchored to its exact position?",
    "plugin": null
   },
   "draggable": {
    "val": false,
    "categ": "Layout",
    "allowedVals": [],
    "valType": "code",
    "inputType": "bool",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Draggable?",
    "hint": "Should this stimulus be moveble by clicking and dragging?",
    "plugin": null
   },
   "shape": {
    "val": "triangle",
    "categ": "Basic",
    "allowedVals": [
     "line",
     "triangle",
     "rectangle",
     "circle",
     "cross",
     "star7",
     "arrow",
     "regular polygon...",
     "custom polygon..."
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Shape",
    "hint": "What shape is this? With 'regular polygon...' you can set number of vertices and with 'custom polygon...' you can set vertices",
    "plugin": null
   },
   "endRoutineOn": {
    "val": "none",
    "categ": "Basic",
    "allowedVals": [
     "look at",
     "look away",
     "none"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "End Routine on...",
    "hint": "Under what condition should this ROI end the Routine?",
    "plugin": null
   },
   "lookDur": {
    "val": 0.1,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "num",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Min. look time",
    "hint": "Minimum dwell time within roi (look at) or outside roi (look away).",
    "plugin": null
   },
   "debug": {
    "val": false,
    "categ": "Testing",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Debug mode",
    "hint": "In debug mode, the ROI is drawn in red. Use this to see what area of the screen is in the ROI.",
    "plugin": null
   },
   "save": {
    "val": "every look",
    "categ": "Data",
    "allowedVals": [
     "first look",
     "last look",
     "every look",
     "none"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Save...",
    "hint": "What looks on this ROI should be saved to the data output?",
    "plugin": null
   },
   "timeRelativeTo": {
    "val": "roi onset",
    "categ": "Data",
    "allowedVals": [
     "roi onset",
     "experiment",
     "routine"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Time relative to...",
    "hint": "What should the values of roi.time should be relative to?",
    "plugin": null
   }
  }
 },
 "RoutineSettingsComponent": {
  "__class__": "psychopy.experiment.components.routineSettings:RoutineSettingsComponent",
  "__name__": "RoutineSettingsComponent",
  "categories": [
   "Other"
  ],
  "targets": [
   "PsychoPy",
   "PsychoJS"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\routineSettings\\light\\routineSettings.png",
  "tooltip": "Settings for this Routine.",
  "version": "2023.2.0",
  "beta": false,
  "validatorClasses": [],
  "hidden": true,
  "params": {
   "name": {
    "val": null,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "name",
    "updates": null,
    "allowedUpdates": null,
    "label": "Name",
    "hint": "Name of this Component (alphanumeric or _, no spaces)",
    "plugin": null
   },
   "stopType": {
    "val": "duration (s)",
    "categ": "Flow",
    "allowedVals": [
     "duration (s)",
     "frame N",
     "condition"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Stop type",
    "hint": "When should this Routine end, if not already ended by a Component?",
    "plugin": null
   },
   "stopVal": {
    "val": "",
    "categ": "Flow",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [],
    "label": "Timeout",
    "hint": "When should this Routine end, if not already ended by a Component? Leave blank for endless.",
    "plugin": null
   },
   "durationEstim": {
    "val": "",
    "categ": "Flow",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Expected duration (s)",
    "hint": "(Optional) expected duration (s), purely for representing in the timeline",
    "plugin": null
   },
   "saveStartStop": {
    "val": true,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Save onset/offset times",
    "hint": "Save the start and stop times of this Routine (according to the global clock) to the data file.",
    "plugin": null
   },
   "disabled": {
    "val": false,
    "categ": "Testing",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Disable Routine",
    "hint": "Disable this Component",
    "plugin": null
   },
   "forceNonSlip": {
    "val": false,
    "categ": "Flow",
    "allowedVals": [],
    "valType": "code",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Non-slip timing",
    "hint": "If this Routine ended by hitting its max duration, reset the timer by subtracting the max duration rather than resetting to 0. Only tick this if you're sure you know how long the Routine is going to take, otherwise you'll get incorrect timestamps in the next Routine!",
    "plugin": null
   },
   "skipIf": {
    "val": "",
    "categ": "Flow",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Skip if...",
    "hint": "Skip this Routine if the value in this contorl evaluates to True. Leave blank to not skip.",
    "plugin": null
   },
   "desc": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "str",
    "inputType": "multi",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Description",
    "hint": "Some descriptive text to give information about this Routine. This won't affect how it runs, it's purely for your own reference!",
    "plugin": null
   },
   "useWindowParams": {
    "val": false,
    "categ": "Window",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Different window settings?",
    "hint": "Should the appearance of the window change while this Routine is running?",
    "plugin": null
   },
   "color": {
    "val": "$[0,0,0]",
    "categ": "Window",
    "allowedVals": [],
    "valType": "color",
    "inputType": "color",
    "updates": null,
    "allowedUpdates": null,
    "label": "Background color",
    "hint": "Color of the screen this Routine (e.g. black, $[1.0,1.0,1.0], $variable. Right-click to bring up a color-picker.)",
    "plugin": null
   },
   "colorSpace": {
    "val": "rgb",
    "categ": "Window",
    "allowedVals": [
     "rgb",
     "dkl",
     "lms",
     "hsv",
     "hex"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Color space",
    "hint": "Needed if color is defined numerically (see PsychoPy documentation on color spaces)",
    "plugin": null
   },
   "backgroundImg": {
    "val": "",
    "categ": "Window",
    "allowedVals": [],
    "valType": "str",
    "inputType": "file",
    "updates": null,
    "allowedUpdates": null,
    "label": "Background image",
    "hint": "Image file to use as a background (leave blank for no image)",
    "plugin": null
   },
   "backgroundFit": {
    "val": "none",
    "categ": "Window",
    "allowedVals": [
     "none",
     "cover",
     "contain",
     "fill",
     "scale-down"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Background fit",
    "hint": "How should the background image scale to fit the window size?",
    "plugin": null
   }
  }
 },
 "SerialOutComponent": {
  "__class__": "psychopy.experiment.components.serialOut:SerialOutComponent",
  "__name__": "SerialOutComponent",
  "categories": [
   "I/O",
   "EEG"
  ],
  "targets": [
   "PsychoPy"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\serialOut\\light\\serial.png",
  "tooltip": "Serial out: send signals from a serial port",
  "version": "2022.2.0",
  "beta": false,
  "validatorClasses": [],
  "hidden": false,
  "params": {
   "name": {
    "val": "serialPort",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "name",
    "updates": null,
    "allowedUpdates": null,
    "label": "Name",
    "hint": "Name of this Component (alphanumeric or _, no spaces)",
    "plugin": null
   },
   "startType": {
    "val": "time (s)",
    "categ": "Basic",
    "allowedVals": [
     "time (s)",
     "frame N",
     "condition"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Start type",
    "hint": "How do you want to define your start point?",
    "plugin": null
   },
   "stopType": {
    "val": "duration (s)",
    "categ": "Basic",
    "allowedVals": [
     "duration (s)",
     "duration (frames)",
     "time (s)",
     "frame N",
     "condition"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Stop type",
    "hint": "How do you want to define your end point?",
    "plugin": null
   },
   "startVal": {
    "val": 0.0,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Start",
    "hint": "When does the Component start?",
    "plugin": null
   },
   "stopVal": {
    "val": 1.0,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [],
    "label": "Stop",
    "hint": "When does the Component end? (blank is endless)",
    "plugin": null
   },
   "startEstim": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Expected start (s)",
    "hint": "(Optional) expected start (s), purely for representing in the timeline",
    "plugin": null
   },
   "durationEstim": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Expected duration (s)",
    "hint": "(Optional) expected duration (s), purely for representing in the timeline",
    "plugin": null
   },
   "saveStartStop": {
    "val": true,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Save onset/offset times",
    "hint": "Store the onset/offset times in the data file (as well as in the log file).",
    "plugin": null
   },
   "syncScreenRefresh": {
    "val": false,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Sync timing with screen refresh",
    "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
    "plugin": null
   },
   "disabled": {
    "val": false,
    "categ": "Testing",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Disable Component",
    "hint": "Disable this Component",
    "plugin": null
   },
   "port": {
    "val": "COM3",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "str",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Port",
    "hint": "Serial port to connect to",
    "plugin": null
   },
   "baudrate": {
    "val": 9600,
    "categ": "Device",
    "allowedVals": [],
    "valType": "int",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Baud rate",
    "hint": "The baud rate, or speed, of the connection.",
    "plugin": null
   },
   "bytesize": {
    "val": 8,
    "categ": "Device",
    "allowedVals": [],
    "valType": "int",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Data bits",
    "hint": "Size of bits to be sent.",
    "plugin": null
   },
   "stopbits": {
    "val": 1,
    "categ": "Device",
    "allowedVals": [],
    "valType": "int",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Stop bits",
    "hint": "Size of bits to be sent on stop.",
    "plugin": null
   },
   "parity": {
    "val": "N",
    "categ": "Device",
    "allowedVals": [
     "N",
     "E",
     "O",
     "M",
     "S"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Parity",
    "hint": "Parity mode.",
    "plugin": null
   },
   "timeout": {
    "val": "",
    "categ": "Device",
    "allowedVals": [],
    "valType": "int",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Timeout",
    "hint": "Time at which to give up listening for a response (leave blank for no limit)",
    "plugin": null
   },
   "startdata": {
    "val": 1,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "str",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Start data",
    "hint": "Data to be sent at start of pulse. Data will be converted to bytes, so to specify anumeric value directly use $chr(...).",
    "plugin": null
   },
   "stopdata": {
    "val": 0,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "str",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Stop data",
    "hint": "String data to be sent at end of pulse. Data will be converted to bytes, so to specify anumeric value directly use $chr(...).",
    "plugin": null
   },
   "getResponse": {
    "val": false,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Get response?",
    "hint": "After sending a signal, should PsychoPy read and record a response from the port?",
    "plugin": null
   }
  }
 },
 "SettingsComponent": {
  "__class__": "psychopy.experiment.components.settings:SettingsComponent",
  "__name__": "SettingsComponent",
  "categories": [
   "Custom"
  ],
  "targets": [
   "PsychoPy",
   "PsychoJS"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\settings\\light\\settings.png",
  "tooltip": "Edit settings for this experiment",
  "version": "0.0.0",
  "beta": false,
  "hidden": true,
  "params": {
   "expName": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "str",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Experiment name",
    "hint": "Name of the entire experiment (taken by default from the filename on save)",
    "plugin": null
   },
   "expVersion": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "str",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Experiment version",
    "hint": "Version number of the experiment (a string). Just for your records if it's useful to store",
    "plugin": null
   },
   "runMode": {
    "val": 0,
    "categ": "Basic",
    "allowedVals": [
     0,
     1
    ],
    "valType": "code",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Run mode",
    "hint": "In piloting mode, all of the settings from prefs->piloting are applied. This is recommended while the experiment is a work in progress.",
    "plugin": null
   },
   "Use version": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [
     "latest",
     "2025",
     "2025.1",
     "",
     "2025.1.0"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Use PsychoPy version",
    "hint": "The version of PsychoPy to use when running the experiment.",
    "plugin": null
   },
   "Enable Escape": {
    "val": true,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Enable escape key",
    "hint": "Enable the <esc> key, to allow subjects to quit / break out of the experiment",
    "plugin": null
   },
   "rush": {
    "val": false,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Enable 'rush' mode",
    "hint": "Enable 'rush' mode, which will raise CPU priority while the experiment is running",
    "plugin": null
   },
   "Show info dlg": {
    "val": true,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Show info dialog",
    "hint": "Start the experiment with a dialog to set info (e.g.participant or condition)",
    "plugin": null
   },
   "Experiment info": {
    "val": "{'participant':'f\"{randint(0, 999999):06.0f}\"', 'session':'001'}",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "dict",
    "updates": null,
    "allowedUpdates": null,
    "label": "Experiment info",
    "hint": "The info to present in a dialog box. Right-click to check syntax and preview the dialog box.",
    "plugin": null
   },
   "Full-screen window": {
    "val": true,
    "categ": "Screen",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Full-screen window",
    "hint": "Run the experiment full-screen (recommended)",
    "plugin": null
   },
   "winBackend": {
    "val": "pyglet",
    "categ": "Screen",
    "allowedVals": {
     "pyglet": ".pygletbackend.PygletBackend",
     "glfw": ".glfwbackend.GLFWBackend",
     "pygame": ".pygamebackend.PygameBackend"
    },
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Window backend",
    "hint": "What Python package should be used behind the scenes for drawing to the window?",
    "plugin": null
   },
   "Window size (pixels)": {
    "val": [
     1024,
     768
    ],
    "categ": "Screen",
    "allowedVals": [],
    "valType": "list",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Window size (pixels)",
    "hint": "Size of window (if not fullscreen)",
    "plugin": null
   },
   "Screen": {
    "val": 1,
    "categ": "Screen",
    "allowedVals": [],
    "valType": "num",
    "inputType": "spin",
    "updates": null,
    "allowedUpdates": null,
    "label": "Screen",
    "hint": "Which physical screen to run on (1 or 2)",
    "plugin": null
   },
   "Monitor": {
    "val": "testMonitor",
    "categ": "Screen",
    "allowedVals": [],
    "valType": "str",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Monitor",
    "hint": "Name of the monitor (from Monitor Center). Right-click to go there, then copy & paste a monitor name here.",
    "plugin": null
   },
   "color": {
    "val": "$[0,0,0]",
    "categ": "Screen",
    "allowedVals": [],
    "valType": "color",
    "inputType": "color",
    "updates": null,
    "allowedUpdates": null,
    "label": "Background color",
    "hint": "Color of the screen (e.g. black, $[1.0,1.0,1.0], $variable. Right-click to bring up a color-picker.)",
    "plugin": null
   },
   "colorSpace": {
    "val": "rgb",
    "categ": "Screen",
    "allowedVals": [
     "rgb",
     "dkl",
     "lms",
     "hsv",
     "hex"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Color space",
    "hint": "Needed if color is defined numerically (see PsychoPy documentation on color spaces)",
    "plugin": null
   },
   "backgroundImg": {
    "val": "",
    "categ": "Screen",
    "allowedVals": [],
    "valType": "str",
    "inputType": "file",
    "updates": null,
    "allowedUpdates": null,
    "label": "Background image",
    "hint": "Image file to use as a background (leave blank for no image)",
    "plugin": null
   },
   "backgroundFit": {
    "val": "none",
    "categ": "Screen",
    "allowedVals": [
     "none",
     "cover",
     "contain",
     "fill",
     "scale-down"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Background fit",
    "hint": "How should the background image scale to fit the window size?",
    "plugin": null
   },
   "Units": {
    "val": "height",
    "categ": "Screen",
    "allowedVals": [
     "use prefs",
     "deg",
     "pix",
     "cm",
     "norm",
     "height",
     "degFlatPos",
     "degFlat"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Units",
    "hint": "Units to use for window/stimulus coordinates (e.g. cm, pix, deg)",
    "plugin": null
   },
   "blendMode": {
    "val": "avg",
    "categ": "Screen",
    "allowedVals": [
     "add",
     "avg",
     "nofbo"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Blend mode",
    "hint": "Should new stimuli be added or averaged with the stimuli that have been drawn already",
    "plugin": null
   },
   "Show mouse": {
    "val": false,
    "categ": "Screen",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Show mouse",
    "hint": "Should the mouse be visible on screen? Only applicable for fullscreen experiments.",
    "plugin": null
   },
   "measureFrameRate": {
    "val": true,
    "categ": "Screen",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Measure frame rate?",
    "hint": "Should we measure your frame rate at the start of the experiment? This is highly recommended for precise timing.",
    "plugin": null
   },
   "frameRate": {
    "val": "",
    "categ": "Screen",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Frame rate",
    "hint": "Frame rate to store instead of measuring at the start of the experiment. Leave blank to store no frame rate, but be wary: This will lead to errors if frame rate isn't supplied by other means.",
    "plugin": null
   },
   "frameRateMsg": {
    "val": "Attempting to measure frame rate of screen, please wait...",
    "categ": "Screen",
    "allowedVals": [],
    "valType": "str",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Frame rate message",
    "hint": "Message to display while frame rate is measured. Leave blank for no message.",
    "plugin": null
   },
   "Force stereo": {
    "val": true,
    "categ": "Audio",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Force stereo",
    "hint": "Force audio to stereo (2-channel) output",
    "plugin": null
   },
   "Audio lib": {
    "val": "ptb",
    "categ": "Audio",
    "allowedVals": [
     "ptb",
     "pyo",
     "sounddevice",
     "pygame"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Audio library",
    "hint": "Which Python sound engine do you want to play your sounds?",
    "plugin": null
   },
   "Data filename": {
    "val": "u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])",
    "categ": "Data",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Data filename",
    "hint": "Code to create your custom file name base. Don't give a file extension - this will be added.",
    "plugin": null
   },
   "Data file delimiter": {
    "val": "auto",
    "categ": "Data",
    "allowedVals": [
     "auto",
     "comma",
     "semicolon",
     "tab"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Data file delimiter",
    "hint": "What symbol should the data file use to separate columns? Auto will select a delimiter automatically from the filename.",
    "plugin": null
   },
   "sortColumns": {
    "val": "time",
    "categ": "Data",
    "allowedVals": [
     "alphabetical",
     "priority",
     "time"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Sort columns by...",
    "hint": "How should data file columns be sorted? Alphabetically, by priority, or simply in the order they were added?",
    "plugin": null
   },
   "colPriority": {
    "val": {
     "thisRow.t": "priority.CRITICAL",
     "expName": "priority.LOW"
    },
    "categ": "Data",
    "allowedVals": [],
    "valType": "dict",
    "inputType": "dict",
    "updates": null,
    "allowedUpdates": null,
    "label": "Column priority",
    "hint": "Assign priority values to certain columns. To use predefined values, you can do $priority.HIGH, $priority.MEDIUM, etc.",
    "plugin": null
   },
   "Save log file": {
    "val": true,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Save log file",
    "hint": "Save a detailed log (more detailed than the Excel/csv files) of the entire experiment",
    "plugin": null
   },
   "Save wide csv file": {
    "val": true,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Save csv file (trial-by-trial)",
    "hint": "Save data from loops in comma-separated-value (.csv) format for maximum portability",
    "plugin": null
   },
   "Save csv file": {
    "val": false,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Save csv file (summaries)",
    "hint": "Save data from loops in comma-separated-value (.csv) format for maximum portability",
    "plugin": null
   },
   "Save excel file": {
    "val": false,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Save Excel file",
    "hint": "Save data from loops in Excel (.xlsx) format",
    "plugin": null
   },
   "Save psydat file": {
    "val": true,
    "categ": "Data",
    "allowedVals": [
     true
    ],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Save psydat file",
    "hint": "Save data from loops in psydat format. This is useful for Python programmers to generate analysis scripts.",
    "plugin": null
   },
   "Save hdf5 file": {
    "val": false,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Save hdf5 file",
    "hint": "Save data from eyetrackers in hdf5 format. This is useful for viewing and analyzing complex data in structures.",
    "plugin": null
   },
   "logging level": {
    "val": "info",
    "categ": "Data",
    "allowedVals": [
     "error",
     "warning",
     "data",
     "exp",
     "info",
     "debug"
    ],
    "valType": "code",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "File logging level",
    "hint": "How much output do you want in the log files? ('error' is fewest messages, 'debug' is most)",
    "plugin": null
   },
   "consoleLoggingLevel": {
    "val": "warning",
    "categ": "Data",
    "allowedVals": [
     "error",
     "warning",
     "data",
     "exp",
     "info",
     "debug"
    ],
    "valType": "code",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Console / app logging level",
    "hint": "How much output do you want displayed in the console / app? ('error' is fewest messages, 'debug' is most)",
    "plugin": null
   },
   "clockFormat": {
    "val": "float",
    "categ": "Data",
    "allowedVals": [
     "iso",
     "float"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Clock format",
    "hint": "Format to use for Routine start timestamps; either wall clock time (in ISO 8601 format) or seconds since experiment start (as a float).",
    "plugin": null
   },
   "HTML path": {
    "val": "",
    "categ": "Online",
    "allowedVals": [],
    "valType": "str",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Output path",
    "hint": "Place the HTML files will be saved locally ",
    "plugin": null
   },
   "Resources": {
    "val": [],
    "categ": "Online",
    "allowedVals": [],
    "valType": "list",
    "inputType": "fileList",
    "updates": null,
    "allowedUpdates": null,
    "label": "Additional resources",
    "hint": "Any additional resources needed",
    "plugin": null
   },
   "End Message": {
    "val": "Thank you for your patience.",
    "categ": "Online",
    "allowedVals": [],
    "valType": "str",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "End message",
    "hint": "Message to display to participants upon completing the experiment",
    "plugin": null
   },
   "Completed URL": {
    "val": "",
    "categ": "Online",
    "allowedVals": [],
    "valType": "str",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Completed URL",
    "hint": "Where should participants be redirected after the experiment on completion, e.g.\nhttps://pavlovia.org/surveys/XXXXXX-XXXX-XXXXXXX?tab=0",
    "plugin": null
   },
   "Incomplete URL": {
    "val": "",
    "categ": "Online",
    "allowedVals": [],
    "valType": "str",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Incomplete URL",
    "hint": "Where participants are redirected if they do not complete the task, e.g.\nhttps://pavlovia.org/surveys/XXXXXX-XXXX-XXXXXXX?tab=0",
    "plugin": null
   },
   "exportHTML": {
    "val": "on Sync",
    "categ": "Online",
    "allowedVals": [
     "on Save",
     "on Sync",
     "manually"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Export HTML",
    "hint": "When to export experiment to the HTML folder.",
    "plugin": null
   },
   "eyetracker": {
    "val": "None",
    "categ": "Eyetracking",
    "allowedVals": [
     "None",
     "eyetracker.hw.mouse.EyeTracker"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Eyetracker device",
    "hint": "What kind of eye tracker should PsychoPy use? Select 'MouseGaze' to use the mouse to simulate eye movement (for debugging without a tracker connected)",
    "plugin": null
   },
   "mgMove": {
    "val": "CONTINUOUS",
    "categ": "Eyetracking",
    "allowedVals": [
     "CONTINUOUS",
     "LEFT_BUTTON",
     "MIDDLE_BUTTON",
     "RIGHT_BUTTON"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Move button",
    "hint": "Mouse button to press for eye movement.",
    "plugin": null
   },
   "mgBlink": {
    "val": "MIDDLE_BUTTON",
    "categ": "Eyetracking",
    "allowedVals": [
     "LEFT_BUTTON",
     "MIDDLE_BUTTON",
     "RIGHT_BUTTON"
    ],
    "valType": "list",
    "inputType": "multiChoice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Blink button",
    "hint": "Mouse button to press for a blink.",
    "plugin": null
   },
   "mgSaccade": {
    "val": 0.5,
    "categ": "Eyetracking",
    "allowedVals": [],
    "valType": "num",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Saccade threshold",
    "hint": "Visual degree threshold for Saccade event creation.",
    "plugin": null
   },
   "gpAddress": {
    "val": "127.0.0.1",
    "categ": "Eyetracking",
    "allowedVals": [],
    "valType": "str",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "GazePoint IP address",
    "hint": "IP Address of the computer running GazePoint Control.",
    "plugin": null
   },
   "gpPort": {
    "val": 4242,
    "categ": "Eyetracking",
    "allowedVals": [],
    "valType": "num",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "GazePoint port",
    "hint": "Port of the GazePoint Control server. Usually 4242.",
    "plugin": null
   },
   "elModel": {
    "val": "EYELINK 1000 DESKTOP",
    "categ": "Eyetracking",
    "allowedVals": [
     "EYELINK 1000 DESKTOP",
     "EYELINK 1000 TOWER",
     "EYELINK 1000 REMOTE",
     "EYELINK 1000 LONG RANGE"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Model name",
    "hint": "Eye tracker model.",
    "plugin": null
   },
   "elSimMode": {
    "val": false,
    "categ": "Eyetracking",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Mouse simulation mode",
    "hint": "Set the EyeLink to run in mouse simulation mode.",
    "plugin": null
   },
   "elSampleRate": {
    "val": 1000,
    "categ": "Eyetracking",
    "allowedVals": [
     "250",
     "500",
     "1000",
     "2000"
    ],
    "valType": "num",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Sampling rate",
    "hint": "Eye tracker sampling rate.",
    "plugin": null
   },
   "elTrackEyes": {
    "val": "RIGHT_EYE",
    "categ": "Eyetracking",
    "allowedVals": [
     "LEFT_EYE",
     "RIGHT_EYE",
     "BOTH"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Track eyes",
    "hint": "Select with eye(s) to track.",
    "plugin": null
   },
   "elLiveFiltering": {
    "val": "FILTER_LEVEL_OFF",
    "categ": "Eyetracking",
    "allowedVals": [
     "FILTER_LEVEL_OFF",
     "FILTER_LEVEL_1",
     "FILTER_LEVEL_2"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Live sample filtering",
    "hint": "Filter eye sample data live, as it is streamed to the driving device. This may reduce the sampling speed.",
    "plugin": null
   },
   "elDataFiltering": {
    "val": "FILTER_LEVEL_2",
    "categ": "Eyetracking",
    "allowedVals": [
     "FILTER_LEVEL_OFF",
     "FILTER_LEVEL_1",
     "FILTER_LEVEL_2"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Saved sample filtering",
    "hint": "Filter eye sample data when it is saved to the output file. This will not affect the sampling speed.",
    "plugin": null
   },
   "elTrackingMode": {
    "val": "PUPIL_CR_TRACKING",
    "categ": "Eyetracking",
    "allowedVals": [
     "PUPIL_CR_TRACKING",
     "PUPIL_ONLY_TRACKING"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Pupil tracking mode",
    "hint": "Track Pupil-CR or Pupil only.",
    "plugin": null
   },
   "elPupilAlgorithm": {
    "val": "ELLIPSE_FIT",
    "categ": "Eyetracking",
    "allowedVals": [
     "ELLIPSE_FIT",
     "CENTROID_FIT"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Pupil center algorithm",
    "hint": "Algorithm used to detect the pupil center.",
    "plugin": null
   },
   "elPupilMeasure": {
    "val": "PUPIL_AREA",
    "categ": "Eyetracking",
    "allowedVals": [
     "PUPIL_AREA",
     "PUPIL_DIAMETER",
     "NEITHER"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Pupil data type",
    "hint": "Type of pupil data to record.",
    "plugin": null
   },
   "elAddress": {
    "val": "100.1.1.1",
    "categ": "Eyetracking",
    "allowedVals": [],
    "valType": "str",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "EyeLink IP address",
    "hint": "IP Address of the EyeLink *Host* computer.",
    "plugin": null
   },
   "tbModel": {
    "val": "",
    "categ": "Eyetracking",
    "allowedVals": [],
    "valType": "str",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Model name",
    "hint": "Eye tracker model.",
    "plugin": null
   },
   "tbLicenseFile": {
    "val": "",
    "categ": "Eyetracking",
    "allowedVals": [],
    "valType": "str",
    "inputType": "file",
    "updates": null,
    "allowedUpdates": null,
    "label": "License file",
    "hint": "Eye tracker license file (optional).",
    "plugin": null
   },
   "tbSerialNo": {
    "val": "",
    "categ": "Eyetracking",
    "allowedVals": [],
    "valType": "str",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Serial number",
    "hint": "Eye tracker serial number (optional).",
    "plugin": null
   },
   "tbSampleRate": {
    "val": 60,
    "categ": "Eyetracking",
    "allowedVals": [],
    "valType": "num",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Sampling rate",
    "hint": "Eye tracker sampling rate.",
    "plugin": null
   },
   "plPupillometryOnly": {
    "val": false,
    "categ": "Eyetracking",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Pupillometry only",
    "hint": "Subscribe to pupil data only, does not require calibration or surface setup",
    "plugin": null
   },
   "plSurfaceName": {
    "val": "psychopy_iohub_surface",
    "categ": "Eyetracking",
    "allowedVals": [],
    "valType": "str",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Surface name",
    "hint": "Name of the Pupil Capture surface",
    "plugin": null
   },
   "plConfidenceThreshold": {
    "val": 0.6,
    "categ": "Eyetracking",
    "allowedVals": [],
    "valType": "num",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Gaze confidence threshold",
    "hint": "Gaze confidence threshold",
    "plugin": null
   },
   "plPupilRemoteAddress": {
    "val": "127.0.0.1",
    "categ": "Eyetracking",
    "allowedVals": [],
    "valType": "str",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Pupil remote address",
    "hint": "Pupil remote address",
    "plugin": null
   },
   "plPupilRemotePort": {
    "val": 50020,
    "categ": "Eyetracking",
    "allowedVals": [],
    "valType": "num",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Pupil remote port",
    "hint": "Pupil remote port",
    "plugin": null
   },
   "plPupilRemoteTimeoutMs": {
    "val": 1000,
    "categ": "Eyetracking",
    "allowedVals": [],
    "valType": "num",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Pupil remote timeout (ms)",
    "hint": "Pupil remote timeout (ms)",
    "plugin": null
   },
   "plPupilCaptureRecordingLocation": {
    "val": "",
    "categ": "Eyetracking",
    "allowedVals": [],
    "valType": "str",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Pupil capture recording location",
    "hint": "Pupil capture recording location",
    "plugin": null
   },
   "plCompanionAddress": {
    "val": "neon.local",
    "categ": "Eyetracking",
    "allowedVals": [],
    "valType": "str",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Companion address",
    "hint": "Companion address",
    "plugin": null
   },
   "plCompanionPort": {
    "val": 8080,
    "categ": "Eyetracking",
    "allowedVals": [],
    "valType": "num",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Companion port",
    "hint": "Companion port",
    "plugin": null
   },
   "ecSampleRate": {
    "val": "default",
    "categ": "Eyetracking",
    "allowedVals": [],
    "valType": "str",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Sampling rate",
    "hint": "Eyetracker sampling rate: 'default' or <integer>[Hz]. Defaults to tracking mode '0'.",
    "plugin": null
   },
   "keyboardBackend": {
    "val": "PsychToolbox",
    "categ": "Input",
    "allowedVals": [
     "ioHub",
     "PsychToolbox",
     "Pyglet"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Keyboard backend",
    "hint": "What Python package should PsychoPy use to get keyboard input?",
    "plugin": null
   }
  }
 },
 "SliderComponent": {
  "__class__": "psychopy.experiment.components.slider:SliderComponent",
  "__name__": "SliderComponent",
  "categories": [
   "Responses"
  ],
  "targets": [
   "PsychoPy",
   "PsychoJS"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\slider\\light\\slider.png",
  "tooltip": "Slider: A simple, flexible object for getting ratings",
  "version": "0.0.0",
  "beta": false,
  "validatorClasses": [
   "VisualValidatorRoutine"
  ],
  "hidden": false,
  "params": {
   "name": {
    "val": "slider",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "name",
    "updates": null,
    "allowedUpdates": null,
    "label": "Name",
    "hint": "Name of this Component (alphanumeric or _, no spaces)",
    "plugin": null
   },
   "startType": {
    "val": "time (s)",
    "categ": "Basic",
    "allowedVals": [
     "time (s)",
     "frame N",
     "condition"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Start type",
    "hint": "How do you want to define your start point?",
    "plugin": null
   },
   "stopType": {
    "val": "condition",
    "categ": "Basic",
    "allowedVals": [
     "duration (s)",
     "duration (frames)",
     "time (s)",
     "frame N",
     "condition"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Stop type",
    "hint": "How do you want to define your end point?",
    "plugin": null
   },
   "startVal": {
    "val": "0.0",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Start",
    "hint": "When does the Component start?",
    "plugin": null
   },
   "stopVal": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [],
    "label": "Stop",
    "hint": "When does the Component end? (blank is endless)",
    "plugin": null
   },
   "startEstim": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Expected start (s)",
    "hint": "(Optional) expected start (s), purely for representing in the timeline",
    "plugin": null
   },
   "durationEstim": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Expected duration (s)",
    "hint": "(Optional) expected duration (s), purely for representing in the timeline",
    "plugin": null
   },
   "saveStartStop": {
    "val": true,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Save onset/offset times",
    "hint": "Store the onset/offset times in the data file (as well as in the log file).",
    "plugin": null
   },
   "syncScreenRefresh": {
    "val": true,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Sync timing with screen refresh",
    "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
    "plugin": null
   },
   "disabled": {
    "val": false,
    "categ": "Testing",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Disable Component",
    "hint": "Disable this Component",
    "plugin": null
   },
   "units": {
    "val": "from exp settings",
    "categ": "Layout",
    "allowedVals": [
     "from exp settings",
     "deg",
     "cm",
     "pix",
     "norm",
     "height",
     "degFlatPos",
     "degFlat"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Spatial units",
    "hint": "Units of dimensions for this stimulus",
    "plugin": null
   },
   "color": {
    "val": "LightGray",
    "categ": "Appearance",
    "allowedVals": [],
    "valType": "color",
    "inputType": "color",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Label color",
    "hint": "Color of all labels on this slider (might be overridden by the style setting)",
    "plugin": null
   },
   "colorSpace": {
    "val": "rgb",
    "categ": "Appearance",
    "allowedVals": [
     "rgb",
     "dkl",
     "lms",
     "hsv"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Color space",
    "hint": "In what format (color space) have you specified the colors? (rgb, dkl, lms, hsv)",
    "plugin": null
   },
   "fillColor": {
    "val": "Red",
    "categ": "Appearance",
    "allowedVals": [],
    "valType": "color",
    "inputType": "color",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Marker color",
    "hint": "Color of the marker on this slider (might be overridden by the style setting)",
    "plugin": null
   },
   "borderColor": {
    "val": "White",
    "categ": "Appearance",
    "allowedVals": [],
    "valType": "color",
    "inputType": "color",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Line color",
    "hint": "Color of all lines on this slider (might be overridden by the style setting)",
    "plugin": null
   },
   "opacity": {
    "val": "",
    "categ": "Appearance",
    "allowedVals": [],
    "valType": "num",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Opacity",
    "hint": "Opacity of the stimulus (1=opaque, 0=fully transparent, 0.5=translucent). Leave blank for each color to have its own opacity (recommended if any color is None).",
    "plugin": null
   },
   "contrast": {
    "val": 1,
    "categ": "Appearance",
    "allowedVals": [],
    "valType": "num",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Contrast",
    "hint": "Contrast of the stimulus (1.0=unchanged contrast, 0.5=decrease contrast, 0.0=uniform/no contrast, -0.5=slightly inverted, -1.0=totally inverted)",
    "plugin": null
   },
   "pos": {
    "val": "(0, -0.4)",
    "categ": "Layout",
    "allowedVals": [],
    "valType": "list",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Position [x,y]",
    "hint": "Position of this stimulus (e.g. [1,2] )",
    "plugin": null
   },
   "size": {
    "val": "(1.0, 0.1)",
    "categ": "Layout",
    "allowedVals": [],
    "valType": "list",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Size [w,h]",
    "hint": "Size of this stimulus (either a single value or x,y pair, e.g. 2.5, [1,2] ",
    "plugin": null
   },
   "ori": {
    "val": 0,
    "categ": "Layout",
    "allowedVals": [
     -360,
     360
    ],
    "valType": "num",
    "inputType": "spin",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Orientation",
    "hint": "Orientation of this stimulus (in deg)",
    "plugin": null
   },
   "validator": {
    "val": "",
    "categ": "Testing",
    "allowedVals": [
     ""
    ],
    "valType": "code",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Validate with...",
    "hint": "Name of validator Component/Routine to use to check the timing of this stimulus.",
    "plugin": null
   },
   "ticks": {
    "val": "(1, 2, 3, 4, 5)",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "list",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant"
    ],
    "label": "Ticks",
    "hint": "Tick positions (numerical) on the scale, separated by commas",
    "plugin": null
   },
   "labels": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "list",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant"
    ],
    "label": "Labels",
    "hint": "Labels for the tick marks on the scale, separated by commas",
    "plugin": null
   },
   "initVal": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Starting value",
    "hint": "Value of the slider befre any response, leave blank to hide the marker until clicked on",
    "plugin": null
   },
   "granularity": {
    "val": 0,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "num",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant"
    ],
    "label": "Granularity",
    "hint": "Specifies the minimum step size (0 for a continuous scale, 1 for integer rating scale)",
    "plugin": null
   },
   "forceEndRoutine": {
    "val": true,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": "constant",
    "allowedUpdates": [],
    "label": "Force end of Routine",
    "hint": "Should setting a rating (releasing the mouse) cause the end of the Routine (e.g. trial)?",
    "plugin": null
   },
   "readOnly": {
    "val": false,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": "constant",
    "allowedUpdates": [],
    "label": "Read only",
    "hint": "Should participant be able to change the rating on the Slider?",
    "plugin": null
   },
   "flip": {
    "val": false,
    "categ": "Layout",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": "constant",
    "allowedUpdates": [],
    "label": "Flip",
    "hint": "By default the labels will be on the bottom or left of the scale, but this can be flipped to the other side.",
    "plugin": null
   },
   "font": {
    "val": "Noto Sans",
    "categ": "Formatting",
    "allowedVals": [],
    "valType": "str",
    "inputType": "font",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Font",
    "hint": "Font for the labels",
    "plugin": null
   },
   "letterHeight": {
    "val": 0.05,
    "categ": "Formatting",
    "allowedVals": [],
    "valType": "num",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Letter height",
    "hint": "Letter height for text in labels",
    "plugin": null
   },
   "styles": {
    "val": "rating",
    "categ": "Basic",
    "allowedVals": [
     "slider",
     "rating",
     "radio",
     "scrollbar",
     "choice"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Styles",
    "hint": "Discrete styles to control the overall appearance of the slider.",
    "plugin": null
   },
   "styleTweaks": {
    "val": [],
    "categ": "Appearance",
    "allowedVals": [
     "labels45",
     "triangleMarker"
    ],
    "valType": "list",
    "inputType": "multiChoice",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Style tweaks",
    "hint": "Tweaks to change the appearance of the slider beyond its style.",
    "plugin": null
   },
   "storeRating": {
    "val": true,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": "constant",
    "allowedUpdates": [],
    "label": "Store rating",
    "hint": "store the rating",
    "plugin": null
   },
   "storeRatingTime": {
    "val": true,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": "constant",
    "allowedUpdates": [],
    "label": "Store rating time",
    "hint": "Store the time taken to make the choice (in seconds)",
    "plugin": null
   },
   "storeHistory": {
    "val": false,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": "constant",
    "allowedUpdates": [],
    "label": "Store history",
    "hint": "store the history of (selection, time)",
    "plugin": null
   }
  }
 },
 "SoundComponent": {
  "__class__": "psychopy.experiment.components.sound:SoundComponent",
  "__name__": "SoundComponent",
  "categories": [
   "Stimuli"
  ],
  "targets": [
   "PsychoPy",
   "PsychoJS"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\sound\\light\\sound.png",
  "tooltip": "Sound: play recorded files or generated sounds",
  "version": "0.0.0",
  "beta": false,
  "validatorClasses": [
   "AudioValidatorRoutine"
  ],
  "hidden": false,
  "params": {
   "name": {
    "val": "sound_1",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "name",
    "updates": null,
    "allowedUpdates": null,
    "label": "Name",
    "hint": "Name of this Component (alphanumeric or _, no spaces)",
    "plugin": null
   },
   "startType": {
    "val": "time (s)",
    "categ": "Basic",
    "allowedVals": [
     "time (s)",
     "frame N",
     "condition"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Start type",
    "hint": "How do you want to define your start point?",
    "plugin": null
   },
   "stopType": {
    "val": "duration (s)",
    "categ": "Basic",
    "allowedVals": [
     "duration (s)",
     "duration (frames)",
     "time (s)",
     "frame N",
     "condition"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Stop type",
    "hint": "How do you want to define your end point?",
    "plugin": null
   },
   "startVal": {
    "val": "0.0",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Start",
    "hint": "When does the Component start?",
    "plugin": null
   },
   "stopVal": {
    "val": "1.0",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [],
    "label": "Stop",
    "hint": "When does the Component end? (blank to use the duration of the media)",
    "plugin": null
   },
   "startEstim": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Expected start (s)",
    "hint": "(Optional) expected start (s), purely for representing in the timeline",
    "plugin": null
   },
   "durationEstim": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Expected duration (s)",
    "hint": "(Optional) expected duration (s), purely for representing in the timeline",
    "plugin": null
   },
   "saveStartStop": {
    "val": true,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Save onset/offset times",
    "hint": "Store the onset/offset times in the data file (as well as in the log file).",
    "plugin": null
   },
   "syncScreenRefresh": {
    "val": true,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Sync start with screen",
    "hint": "A reaction time to a sound stimulus should be based on when the screen flipped",
    "plugin": null
   },
   "disabled": {
    "val": false,
    "categ": "Testing",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Disable Component",
    "hint": "Disable this Component",
    "plugin": null
   },
   "deviceLabel": {
    "val": "",
    "categ": "Device",
    "allowedVals": [],
    "valType": "str",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Device label",
    "hint": "A label to refer to this Component's associated hardware device by. If using the same device for multiple components, be sure to use the same label here.",
    "plugin": null
   },
   "sound": {
    "val": "A",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "str",
    "inputType": "file",
    "updates": "constant",
    "allowedUpdates": [
     "set every repeat"
    ],
    "label": "Sound",
    "hint": "A sound can be a note name (e.g. A or Bf), a number to specify Hz (e.g. 440) or a filename",
    "plugin": null
   },
   "volume": {
    "val": 1,
    "categ": "Playback",
    "allowedVals": [],
    "valType": "num",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Volume",
    "hint": "The volume (in range 0 to 1)",
    "plugin": null
   },
   "hamming": {
    "val": true,
    "categ": "Playback",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Hamming window",
    "hint": "For tones we can apply a hamming window to prevent 'clicks' that are caused by a sudden onset. This delays onset by roughly 1ms.",
    "plugin": null
   },
   "stopWithRoutine": {
    "val": true,
    "categ": "Playback",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Stop with Routine?",
    "hint": "Should playback cease when the Routine ends? Untick to continue playing after the Routine has finished.",
    "plugin": null
   },
   "forceEndRoutine": {
    "val": false,
    "categ": "Playback",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Force end of Routine",
    "hint": "Should the end of the sound cause the end of the Routine (e.g. trial)?",
    "plugin": null
   },
   "speakerIndex": {
    "val": -1,
    "categ": "Device",
    "allowedVals": [
     "",
     10.0,
     11.0,
     12.0,
     13.0,
     14.0
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Speaker",
    "hint": "What speaker to play this sound on",
    "plugin": null
   },
   "resample": {
    "val": true,
    "categ": "Device",
    "allowedVals": [],
    "valType": "str",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Resample",
    "hint": "If the sample rate of a clip doesn't match the sample rate of the speaker, should we resample it to match?",
    "plugin": null
   },
   "latencyClass": {
    "val": 1,
    "categ": "Device",
    "allowedVals": [
     0,
     1,
     2,
     3,
     4
    ],
    "valType": "code",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Latency/exclusivity mode",
    "hint": "How should PsychoPy handle latency? Some options will result in other apps being denied access to the speaker while your experiment is running.",
    "plugin": null
   },
   "validator": {
    "val": "",
    "categ": "Testing",
    "allowedVals": [
     ""
    ],
    "valType": "code",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Validate with...",
    "hint": "Name of validator Component/Routine to use to check the timing of this stimulus.",
    "plugin": null
   }
  }
 },
 "SoundSensorComponent": {
  "__class__": "psychopy.experiment.components.soundsensor:SoundSensorComponent",
  "__name__": "SoundSensorComponent",
  "categories": [
   "Responses"
  ],
  "targets": [
   "PsychoPy"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\soundsensor\\light\\soundsensor.png",
  "tooltip": "Voice Key: Get input from a microphone as simple true/false values",
  "version": "0.0.0",
  "beta": true,
  "validatorClasses": [],
  "hidden": false,
  "params": {
   "name": {
    "val": "soundSensor",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "name",
    "updates": null,
    "allowedUpdates": null,
    "label": "Name",
    "hint": "Name of this Component (alphanumeric or _, no spaces)",
    "plugin": null
   },
   "startType": {
    "val": "time (s)",
    "categ": "Basic",
    "allowedVals": [
     "time (s)",
     "frame N",
     "condition"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Start type",
    "hint": "How do you want to define your start point?",
    "plugin": null
   },
   "stopType": {
    "val": "duration (s)",
    "categ": "Basic",
    "allowedVals": [
     "duration (s)",
     "duration (frames)",
     "time (s)",
     "frame N",
     "condition"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Stop type",
    "hint": "How do you want to define your end point?",
    "plugin": null
   },
   "startVal": {
    "val": 0.0,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Start",
    "hint": "When does the Component start?",
    "plugin": null
   },
   "stopVal": {
    "val": 1.0,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [],
    "label": "Stop",
    "hint": "When does the Component end? (blank is endless)",
    "plugin": null
   },
   "startEstim": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Expected start (s)",
    "hint": "(Optional) expected start (s), purely for representing in the timeline",
    "plugin": null
   },
   "durationEstim": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Expected duration (s)",
    "hint": "(Optional) expected duration (s), purely for representing in the timeline",
    "plugin": null
   },
   "saveStartStop": {
    "val": true,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Save onset/offset times",
    "hint": "Store the onset/offset times in the data file (as well as in the log file).",
    "plugin": null
   },
   "syncScreenRefresh": {
    "val": false,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Sync timing with screen refresh",
    "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
    "plugin": null
   },
   "disabled": {
    "val": false,
    "categ": "Testing",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Disable Component",
    "hint": "Disable this Component",
    "plugin": null
   },
   "deviceLabel": {
    "val": "",
    "categ": "Device",
    "allowedVals": [],
    "valType": "str",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Device label",
    "hint": "A label to refer to this Component's associated hardware device by. If using the same device for multiple components, be sure to use the same label here.",
    "plugin": null
   },
   "forceEndRoutine": {
    "val": true,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Force end of Routine",
    "hint": "Should a response force the end of the Routine (e.g end the trial)?",
    "plugin": null
   },
   "registerOn": {
    "val": true,
    "categ": "Data",
    "allowedVals": [
     true,
     false
    ],
    "valType": "code",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Register button press on...",
    "hint": "When should the response be registered? When the sound starts, or when it stops?",
    "plugin": null
   },
   "store": {
    "val": "first",
    "categ": "Data",
    "allowedVals": [
     "last",
     "first",
     "all",
     "nothing"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Store",
    "hint": "Choose which (if any) responses to store at the end of a trial",
    "plugin": null
   },
   "storeCorrect": {
    "val": false,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Store correct",
    "hint": "Do you want to save the response as correct/incorrect?",
    "plugin": null
   },
   "correctAns": {
    "val": "",
    "categ": "Data",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Correct answer",
    "hint": "What is the 'correct' response (True/False)? Might be helpful to add a correctAns column and use $correctAns to compare to the response. ",
    "plugin": null
   },
   "deviceBackend": {
    "val": "microphone",
    "categ": "Device",
    "allowedVals": [
     "microphone"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Device backend",
    "hint": "What kind of sound sensor is it? What package/plugin should be used to talk to it?",
    "plugin": null
   },
   "meMicrophone": {
    "val": null,
    "categ": "Device",
    "allowedVals": [
     null,
     "Microphone (Steam Streaming Microphone)",
     "Microphone (Logitech BRIO)",
     "Microphone (PowerConf S3)",
     "Speakers (Steam Streaming Speakers) [Loopback]",
     "Digital Audio (S/PDIF) (High Definition Audio Device) [Loopback]",
     "Speakers (Steam Streaming Microphone) [Loopback]",
     "Speakers (PowerConf S3) [Loopback]",
     "Headphones (Office Speaker Stereo) [Loopback]"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Microphone",
    "hint": "What microphone device to take volume readings from?",
    "plugin": null
   },
   "meThreshold": {
    "val": 0.5,
    "categ": "Device",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Threshold (0-1)",
    "hint": "Threshold volume (0 for min value in dB range, 1 for max value) above which to register a sound sensor response",
    "plugin": null
   },
   "meRange": {
    "val": [
     0,
     1
    ],
    "categ": "Device",
    "allowedVals": [],
    "valType": "list",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Decibel range",
    "hint": "What kind of values (dB) would you expect to receive from this device? In other words, how many dB does a threshold of 0 and of 255 correspond to?",
    "plugin": null
   },
   "meSamplingWindow": {
    "val": 0.03,
    "categ": "Device",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Sampling window (s)",
    "hint": "How many seconds to average volume readings across? Bigger windows are less precise, but also less subject to random noise.",
    "plugin": null
   }
  }
 },
 "StaticComponent": {
  "__class__": "psychopy.experiment.components.static:StaticComponent",
  "__name__": "StaticComponent",
  "categories": [
   "Custom"
  ],
  "targets": [
   "PsychoPy",
   "PsychoJS"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\static\\light\\static.png",
  "tooltip": "Static: Static screen period (e.g. an ISI). Useful for pre-loading stimuli.",
  "version": "0.0.0",
  "beta": false,
  "validatorClasses": [],
  "hidden": false,
  "params": {
   "name": {
    "val": "ISI",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "name",
    "updates": null,
    "allowedUpdates": null,
    "label": "Name",
    "hint": "Name of this Component (alphanumeric or _, no spaces)",
    "plugin": null
   },
   "startType": {
    "val": "time (s)",
    "categ": "Basic",
    "allowedVals": [
     "time (s)",
     "frame N",
     "condition"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Start type",
    "hint": "How do you want to define your start point?",
    "plugin": null
   },
   "stopType": {
    "val": "duration (s)",
    "categ": "Basic",
    "allowedVals": [
     "duration (s)",
     "duration (frames)",
     "time (s)",
     "frame N",
     "condition"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Stop type",
    "hint": "How do you want to define your end point?",
    "plugin": null
   },
   "startVal": {
    "val": 0.0,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Start",
    "hint": "When does the Component start?",
    "plugin": null
   },
   "stopVal": {
    "val": 0.5,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [],
    "label": "Stop",
    "hint": "When does the Component end? (blank is endless)",
    "plugin": null
   },
   "startEstim": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Expected start (s)",
    "hint": "(Optional) expected start (s), purely for representing in the timeline",
    "plugin": null
   },
   "durationEstim": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Expected duration (s)",
    "hint": "(Optional) expected duration (s), purely for representing in the timeline",
    "plugin": null
   },
   "saveStartStop": {
    "val": true,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Save onset/offset times",
    "hint": "Store the onset/offset times in the data file (as well as in the log file).",
    "plugin": null
   },
   "syncScreenRefresh": {
    "val": false,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Sync timing with screen refresh",
    "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
    "plugin": null
   },
   "disabled": {
    "val": false,
    "categ": "Testing",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Disable Component",
    "hint": "Disable this Component",
    "plugin": null
   },
   "code": {
    "val": "",
    "categ": "Custom",
    "allowedVals": [],
    "valType": "code",
    "inputType": "multi",
    "updates": null,
    "allowedUpdates": null,
    "label": "Custom code",
    "hint": "Custom code to be run during the static period (after updates)",
    "plugin": null
   },
   "saveData": {
    "val": false,
    "categ": "Custom",
    "allowedVals": [],
    "valType": "code",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Save data during",
    "hint": "While the frame loop is paused, should we take the opportunity to save data now? This is only relevant locally, online data saving is either periodic or on close.",
    "plugin": null
   }
  }
 },
 "TextComponent": {
  "__class__": "psychopy.experiment.components.text:TextComponent",
  "__name__": "TextComponent",
  "categories": [
   "Stimuli"
  ],
  "targets": [
   "PsychoPy",
   "PsychoJS"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\text\\light\\text.png",
  "tooltip": "Text: present text stimuli",
  "version": "0.0.0",
  "beta": false,
  "validatorClasses": [
   "VisualValidatorRoutine"
  ],
  "hidden": false,
  "params": {
   "name": {
    "val": "text",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "name",
    "updates": null,
    "allowedUpdates": null,
    "label": "Name",
    "hint": "Name of this Component (alphanumeric or _, no spaces)",
    "plugin": null
   },
   "startType": {
    "val": "time (s)",
    "categ": "Basic",
    "allowedVals": [
     "time (s)",
     "frame N",
     "condition"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Start type",
    "hint": "How do you want to define your start point?",
    "plugin": null
   },
   "stopType": {
    "val": "duration (s)",
    "categ": "Basic",
    "allowedVals": [
     "duration (s)",
     "duration (frames)",
     "time (s)",
     "frame N",
     "condition"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Stop type",
    "hint": "How do you want to define your end point?",
    "plugin": null
   },
   "startVal": {
    "val": 0.0,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Start",
    "hint": "When does the Component start?",
    "plugin": null
   },
   "stopVal": {
    "val": 1.0,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [],
    "label": "Stop",
    "hint": "When does the Component end? (blank is endless)",
    "plugin": null
   },
   "startEstim": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Expected start (s)",
    "hint": "(Optional) expected start (s), purely for representing in the timeline",
    "plugin": null
   },
   "durationEstim": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Expected duration (s)",
    "hint": "(Optional) expected duration (s), purely for representing in the timeline",
    "plugin": null
   },
   "saveStartStop": {
    "val": true,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Save onset/offset times",
    "hint": "Store the onset/offset times in the data file (as well as in the log file).",
    "plugin": null
   },
   "syncScreenRefresh": {
    "val": true,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Sync timing with screen refresh",
    "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
    "plugin": null
   },
   "disabled": {
    "val": false,
    "categ": "Testing",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Disable Component",
    "hint": "Disable this Component",
    "plugin": null
   },
   "units": {
    "val": "from exp settings",
    "categ": "Layout",
    "allowedVals": [
     "from exp settings",
     "deg",
     "cm",
     "pix",
     "norm",
     "height",
     "degFlatPos",
     "degFlat"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Spatial units",
    "hint": "Units of dimensions for this stimulus",
    "plugin": null
   },
   "color": {
    "val": "white",
    "categ": "Appearance",
    "allowedVals": [],
    "valType": "color",
    "inputType": "color",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Foreground color",
    "hint": "Foreground color of this stimulus (e.g. $[1,1,0], red )",
    "plugin": null
   },
   "colorSpace": {
    "val": "rgb",
    "categ": "Appearance",
    "allowedVals": [
     "rgb",
     "dkl",
     "lms",
     "hsv"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Color space",
    "hint": "In what format (color space) have you specified the colors? (rgb, dkl, lms, hsv)",
    "plugin": null
   },
   "opacity": {
    "val": "",
    "categ": "Appearance",
    "allowedVals": [],
    "valType": "num",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Opacity",
    "hint": "Opacity of the stimulus (1=opaque, 0=fully transparent, 0.5=translucent). Leave blank for each color to have its own opacity (recommended if any color is None).",
    "plugin": null
   },
   "contrast": {
    "val": 1,
    "categ": "Appearance",
    "allowedVals": [],
    "valType": "num",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Contrast",
    "hint": "Contrast of the stimulus (1.0=unchanged contrast, 0.5=decrease contrast, 0.0=uniform/no contrast, -0.5=slightly inverted, -1.0=totally inverted)",
    "plugin": null
   },
   "pos": {
    "val": [
     0,
     0
    ],
    "categ": "Layout",
    "allowedVals": [],
    "valType": "list",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Position [x,y]",
    "hint": "Position of this stimulus (e.g. [1,2] )",
    "plugin": null
   },
   "ori": {
    "val": 0,
    "categ": "Layout",
    "allowedVals": [
     -360,
     360
    ],
    "valType": "num",
    "inputType": "spin",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Orientation",
    "hint": "Orientation of this stimulus (in deg)",
    "plugin": null
   },
   "validator": {
    "val": "",
    "categ": "Testing",
    "allowedVals": [
     ""
    ],
    "valType": "code",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Validate with...",
    "hint": "Name of validator Component/Routine to use to check the timing of this stimulus.",
    "plugin": null
   },
   "text": {
    "val": "Any text\n\nincluding line breaks",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "str",
    "inputType": "multi",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Text",
    "hint": "The text to be displayed",
    "plugin": null
   },
   "font": {
    "val": "Arial",
    "categ": "Formatting",
    "allowedVals": [],
    "valType": "str",
    "inputType": "font",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Font",
    "hint": "The font name (e.g. Comic Sans)",
    "plugin": null
   },
   "draggable": {
    "val": false,
    "categ": "Layout",
    "allowedVals": [],
    "valType": "code",
    "inputType": "bool",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Draggable?",
    "hint": "Should this stimulus be moveble by clicking and dragging?",
    "plugin": null
   },
   "letterHeight": {
    "val": 0.05,
    "categ": "Formatting",
    "allowedVals": [],
    "valType": "num",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Letter height",
    "hint": "Specifies the height of the letter (the width is then determined by the font)",
    "plugin": null
   },
   "wrapWidth": {
    "val": "",
    "categ": "Layout",
    "allowedVals": [],
    "valType": "num",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant"
    ],
    "label": "Wrap width",
    "hint": "How wide should the text get when it wraps? (in the specified units)",
    "plugin": null
   },
   "flip": {
    "val": "None",
    "categ": "Layout",
    "allowedVals": [
     "horiz",
     "vert",
     "None"
    ],
    "valType": "str",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Flip (mirror)",
    "hint": "horiz = left-right reversed; vert = up-down reversed; $var = variable",
    "plugin": null
   },
   "languageStyle": {
    "val": "LTR",
    "categ": "Formatting",
    "allowedVals": [
     "LTR",
     "RTL",
     "Arabic"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Language style",
    "hint": "Handle right-to-left (RTL) languages and Arabic reshaping",
    "plugin": null
   }
  }
 },
 "TextboxComponent": {
  "__class__": "psychopy.experiment.components.textbox:TextboxComponent",
  "__name__": "TextboxComponent",
  "categories": [
   "Stimuli",
   "Responses"
  ],
  "targets": [
   "PsychoPy",
   "PsychoJS"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\textbox\\light\\textbox.png",
  "tooltip": "Textbox: present text stimuli but cooler",
  "version": "2020.2.0",
  "beta": false,
  "validatorClasses": [
   "VisualValidatorRoutine"
  ],
  "hidden": false,
  "params": {
   "name": {
    "val": "textbox",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "name",
    "updates": null,
    "allowedUpdates": null,
    "label": "Name",
    "hint": "Name of this Component (alphanumeric or _, no spaces)",
    "plugin": null
   },
   "startType": {
    "val": "time (s)",
    "categ": "Basic",
    "allowedVals": [
     "time (s)",
     "frame N",
     "condition"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Start type",
    "hint": "How do you want to define your start point?",
    "plugin": null
   },
   "stopType": {
    "val": "duration (s)",
    "categ": "Basic",
    "allowedVals": [
     "duration (s)",
     "duration (frames)",
     "time (s)",
     "frame N",
     "condition"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Stop type",
    "hint": "How do you want to define your end point?",
    "plugin": null
   },
   "startVal": {
    "val": 0.0,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Start",
    "hint": "When does the Component start?",
    "plugin": null
   },
   "stopVal": {
    "val": 1.0,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [],
    "label": "Stop",
    "hint": "When does the Component end? (blank is endless)",
    "plugin": null
   },
   "startEstim": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Expected start (s)",
    "hint": "(Optional) expected start (s), purely for representing in the timeline",
    "plugin": null
   },
   "durationEstim": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Expected duration (s)",
    "hint": "(Optional) expected duration (s), purely for representing in the timeline",
    "plugin": null
   },
   "saveStartStop": {
    "val": true,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Save onset/offset times",
    "hint": "Store the onset/offset times in the data file (as well as in the log file).",
    "plugin": null
   },
   "syncScreenRefresh": {
    "val": true,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Sync timing with screen refresh",
    "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
    "plugin": null
   },
   "disabled": {
    "val": false,
    "categ": "Testing",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Disable Component",
    "hint": "Disable this Component",
    "plugin": null
   },
   "units": {
    "val": "from exp settings",
    "categ": "Layout",
    "allowedVals": [
     "from exp settings",
     "deg",
     "cm",
     "pix",
     "norm",
     "height",
     "degFlatPos",
     "degFlat"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Spatial units",
    "hint": "Units of dimensions for this stimulus",
    "plugin": null
   },
   "color": {
    "val": "white",
    "categ": "Appearance",
    "allowedVals": [],
    "valType": "color",
    "inputType": "color",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Text color",
    "hint": "Foreground color of this stimulus (e.g. $[1,1,0], red )",
    "plugin": null
   },
   "colorSpace": {
    "val": "rgb",
    "categ": "Appearance",
    "allowedVals": [
     "rgb",
     "dkl",
     "lms",
     "hsv"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Color space",
    "hint": "In what format (color space) have you specified the colors? (rgb, dkl, lms, hsv)",
    "plugin": null
   },
   "fillColor": {
    "val": "None",
    "categ": "Appearance",
    "allowedVals": [],
    "valType": "color",
    "inputType": "color",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Fill color",
    "hint": "Fill color of this stimulus (e.g. $[1,1,0], red )",
    "plugin": null
   },
   "borderColor": {
    "val": "None",
    "categ": "Appearance",
    "allowedVals": [],
    "valType": "color",
    "inputType": "color",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Border color",
    "hint": "Border color of this stimulus (e.g. $[1,1,0], red )",
    "plugin": null
   },
   "opacity": {
    "val": "",
    "categ": "Appearance",
    "allowedVals": [],
    "valType": "num",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Opacity",
    "hint": "Opacity of the stimulus (1=opaque, 0=fully transparent, 0.5=translucent). Leave blank for each color to have its own opacity (recommended if any color is None).",
    "plugin": null
   },
   "contrast": {
    "val": 1,
    "categ": "Appearance",
    "allowedVals": [],
    "valType": "num",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Contrast",
    "hint": "Contrast of the stimulus (1.0=unchanged contrast, 0.5=decrease contrast, 0.0=uniform/no contrast, -0.5=slightly inverted, -1.0=totally inverted)",
    "plugin": null
   },
   "pos": {
    "val": [
     0,
     0
    ],
    "categ": "Layout",
    "allowedVals": [],
    "valType": "list",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Position [x,y]",
    "hint": "Position of this stimulus (e.g. [1,2] )",
    "plugin": null
   },
   "size": {
    "val": [
     0.5,
     0.5
    ],
    "categ": "Layout",
    "allowedVals": [],
    "valType": "list",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Size [w,h]",
    "hint": "Size of this stimulus (either a single value or x,y pair, e.g. 2.5, [1,2] ",
    "plugin": null
   },
   "ori": {
    "val": 0,
    "categ": "Layout",
    "allowedVals": [
     -360,
     360
    ],
    "valType": "num",
    "inputType": "spin",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Orientation",
    "hint": "Orientation of this stimulus (in deg)",
    "plugin": null
   },
   "validator": {
    "val": "",
    "categ": "Testing",
    "allowedVals": [
     ""
    ],
    "valType": "code",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Validate with...",
    "hint": "Name of validator Component/Routine to use to check the timing of this stimulus.",
    "plugin": null
   },
   "text": {
    "val": "Any text\n\nincluding line breaks",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "str",
    "inputType": "multi",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Text",
    "hint": "The text to be displayed",
    "plugin": null
   },
   "placeholder": {
    "val": "Type here...",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "str",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Placeholder text",
    "hint": "Placeholder text to show when there is no text contents.",
    "plugin": null
   },
   "font": {
    "val": "Arial",
    "categ": "Formatting",
    "allowedVals": [],
    "valType": "str",
    "inputType": "font",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Font",
    "hint": "The font name (e.g. Comic Sans)",
    "plugin": null
   },
   "letterHeight": {
    "val": 0.05,
    "categ": "Formatting",
    "allowedVals": [],
    "valType": "num",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Letter height",
    "hint": "Specifies the height of the letter (the width is then determined by the font)",
    "plugin": null
   },
   "flipHoriz": {
    "val": false,
    "categ": "Layout",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Flip horizontal",
    "hint": "horiz = left-right reversed; vert = up-down reversed; $var = variable",
    "plugin": null
   },
   "flipVert": {
    "val": false,
    "categ": "Layout",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Flip vertical",
    "hint": "horiz = left-right reversed; vert = up-down reversed; $var = variable",
    "plugin": null
   },
   "draggable": {
    "val": false,
    "categ": "Layout",
    "allowedVals": [],
    "valType": "code",
    "inputType": "bool",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Draggable?",
    "hint": "Should this stimulus be moveble by clicking and dragging?",
    "plugin": null
   },
   "languageStyle": {
    "val": "LTR",
    "categ": "Formatting",
    "allowedVals": [
     "LTR",
     "RTL",
     "Arabic"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Language style",
    "hint": "Handle right-to-left (RTL) languages and Arabic reshaping",
    "plugin": null
   },
   "italic": {
    "val": false,
    "categ": "Formatting",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Italic",
    "hint": "Should text be italic?",
    "plugin": null
   },
   "bold": {
    "val": false,
    "categ": "Formatting",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Bold",
    "hint": "Should text be bold?",
    "plugin": null
   },
   "lineSpacing": {
    "val": 1.0,
    "categ": "Formatting",
    "allowedVals": [],
    "valType": "num",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Line spacing",
    "hint": "Defines the space between lines",
    "plugin": null
   },
   "padding": {
    "val": 0,
    "categ": "Layout",
    "allowedVals": [],
    "valType": "num",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Padding",
    "hint": "Defines the space between text and the textbox border",
    "plugin": null
   },
   "anchor": {
    "val": "center",
    "categ": "Layout",
    "allowedVals": [
     "center",
     "top-center",
     "bottom-center",
     "center-left",
     "center-right",
     "top-left",
     "top-right",
     "bottom-left",
     "bottom-right"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Anchor",
    "hint": "Which point on the stimulus should be anchored to its exact position?",
    "plugin": null
   },
   "alignment": {
    "val": "center",
    "categ": "Formatting",
    "allowedVals": [
     "center",
     "top-center",
     "bottom-center",
     "center-left",
     "center-right",
     "top-left",
     "top-right",
     "bottom-left",
     "bottom-right"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Alignment",
    "hint": "How should text be laid out within the box?",
    "plugin": null
   },
   "overflow": {
    "val": "visible",
    "categ": "Layout",
    "allowedVals": [
     "visible",
     "scroll",
     "hidden"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Overflow",
    "hint": "If the text is bigger than the textbox, how should it behave?",
    "plugin": null
   },
   "speechPoint": {
    "val": "",
    "categ": "Appearance",
    "allowedVals": [],
    "valType": "list",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Speech point [x,y]",
    "hint": "If specified, adds a speech bubble tail going to that point on screen.",
    "plugin": null
   },
   "borderWidth": {
    "val": 2,
    "categ": "Appearance",
    "allowedVals": [],
    "valType": "num",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Border width",
    "hint": "Textbox border width",
    "plugin": null
   },
   "editable": {
    "val": false,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Editable?",
    "hint": "Should textbox be editable?",
    "plugin": null
   },
   "autoLog": {
    "val": true,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Auto log",
    "hint": "Automatically record all changes to this in the log file",
    "plugin": null
   }
  }
 },
 "UnknownComponent": {
  "__class__": "psychopy.experiment.components.unknown:UnknownComponent",
  "__name__": "UnknownComponent",
  "categories": [
   "Other"
  ],
  "targets": [
   "PsychoPy"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\unknown\\light\\unknown.png",
  "tooltip": "Unknown: A component that is not known by the current installed version of PsychoPy\n(most likely from the future)",
  "version": "0.0.0",
  "beta": false,
  "validatorClasses": [],
  "hidden": true,
  "params": {
   "name": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "name",
    "updates": null,
    "allowedUpdates": null,
    "label": "Name",
    "hint": "Name of this Component (alphanumeric or _, no spaces)",
    "plugin": null
   },
   "startType": {
    "val": "time (s)",
    "categ": "Basic",
    "allowedVals": [
     "time (s)",
     "frame N",
     "condition"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Start type",
    "hint": "How do you want to define your start point?",
    "plugin": null
   },
   "stopType": {
    "val": "duration (s)",
    "categ": "Basic",
    "allowedVals": [
     "duration (s)",
     "duration (frames)",
     "time (s)",
     "frame N",
     "condition"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Stop type",
    "hint": "How do you want to define your end point?",
    "plugin": null
   },
   "startVal": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Start",
    "hint": "When does the Component start?",
    "plugin": null
   },
   "stopVal": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [],
    "label": "Stop",
    "hint": "When does the Component end? (blank is endless)",
    "plugin": null
   },
   "startEstim": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Expected start (s)",
    "hint": "(Optional) expected start (s), purely for representing in the timeline",
    "plugin": null
   },
   "durationEstim": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Expected duration (s)",
    "hint": "(Optional) expected duration (s), purely for representing in the timeline",
    "plugin": null
   },
   "saveStartStop": {
    "val": true,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Save onset/offset times",
    "hint": "Store the onset/offset times in the data file (as well as in the log file).",
    "plugin": null
   },
   "syncScreenRefresh": {
    "val": false,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Sync timing with screen refresh",
    "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
    "plugin": null
   },
   "disabled": {
    "val": false,
    "categ": "Testing",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Disable Component",
    "hint": "Disable this Component",
    "plugin": null
   }
  }
 },
 "UnknownPluginComponent": {
  "__class__": "psychopy.experiment.components.unknownPlugin:UnknownPluginComponent",
  "__name__": "UnknownPluginComponent",
  "categories": [
   "Other"
  ],
  "targets": [
   "PsychoPy"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\unknownPlugin\\light\\unknownPlugin.png",
  "tooltip": "Unknown: A component which comes from a plugin which you do not have installed & activated.",
  "version": "0.0.0",
  "beta": false,
  "validatorClasses": [],
  "hidden": true,
  "params": {
   "name": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "name",
    "updates": null,
    "allowedUpdates": null,
    "label": "Name",
    "hint": "Name of this Component (alphanumeric or _, no spaces)",
    "plugin": null
   },
   "startType": {
    "val": "time (s)",
    "categ": "Basic",
    "allowedVals": [
     "time (s)",
     "frame N",
     "condition"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Start type",
    "hint": "How do you want to define your start point?",
    "plugin": null
   },
   "stopType": {
    "val": "duration (s)",
    "categ": "Basic",
    "allowedVals": [
     "duration (s)",
     "duration (frames)",
     "time (s)",
     "frame N",
     "condition"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Stop type",
    "hint": "How do you want to define your end point?",
    "plugin": null
   },
   "startVal": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Start",
    "hint": "When does the Component start?",
    "plugin": null
   },
   "stopVal": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [],
    "label": "Stop",
    "hint": "When does the Component end? (blank is endless)",
    "plugin": null
   },
   "startEstim": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Expected start (s)",
    "hint": "(Optional) expected start (s), purely for representing in the timeline",
    "plugin": null
   },
   "durationEstim": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Expected duration (s)",
    "hint": "(Optional) expected duration (s), purely for representing in the timeline",
    "plugin": null
   },
   "saveStartStop": {
    "val": true,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Save onset/offset times",
    "hint": "Store the onset/offset times in the data file (as well as in the log file).",
    "plugin": null
   },
   "syncScreenRefresh": {
    "val": false,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Sync timing with screen refresh",
    "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
    "plugin": null
   },
   "disabled": {
    "val": false,
    "categ": "Testing",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Disable Component",
    "hint": "Disable this Component",
    "plugin": null
   }
  }
 },
 "VariableComponent": {
  "__class__": "psychopy.experiment.components.variable:VariableComponent",
  "__name__": "VariableComponent",
  "categories": [
   "Custom"
  ],
  "targets": [
   "PsychoPy"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\components\\variable\\light\\variable.png",
  "tooltip": "Variable: create a new variable",
  "version": "0.0.0",
  "beta": false,
  "validatorClasses": [],
  "hidden": false,
  "params": {
   "name": {
    "val": "var1",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "name",
    "updates": null,
    "allowedUpdates": null,
    "label": "Name",
    "hint": "Name of this Component (alphanumeric or _, no spaces)",
    "plugin": null
   },
   "startType": {
    "val": "time (s)",
    "categ": "Basic",
    "allowedVals": [
     "time (s)",
     "frame N",
     "condition"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Start type",
    "hint": "How do you want to define your start point?",
    "plugin": null
   },
   "stopType": {
    "val": "duration (s)",
    "categ": "Basic",
    "allowedVals": [
     "duration (s)",
     "duration (frames)",
     "time (s)",
     "frame N",
     "condition"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Stop type",
    "hint": "How do you want to define your end point?",
    "plugin": null
   },
   "startVal": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Start",
    "hint": "When does the Component start?",
    "plugin": null
   },
   "stopVal": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [],
    "label": "Stop",
    "hint": "When does the Component end? (blank is endless)",
    "plugin": null
   },
   "startEstim": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Expected start (s)",
    "hint": "(Optional) expected start (s), purely for representing in the timeline",
    "plugin": null
   },
   "durationEstim": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Expected duration (s)",
    "hint": "(Optional) expected duration (s), purely for representing in the timeline",
    "plugin": null
   },
   "saveStartStop": {
    "val": true,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Save onset/offset times",
    "hint": "Store the onset/offset times in the data file (as well as in the log file).",
    "plugin": null
   },
   "syncScreenRefresh": {
    "val": false,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Sync timing with screen refresh",
    "hint": "Synchronize times with screen refresh (good for visual stimuli and responses based on them)",
    "plugin": null
   },
   "disabled": {
    "val": false,
    "categ": "Testing",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Disable Component",
    "hint": "Disable this Component",
    "plugin": null
   },
   "startExpValue": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Experiment start value",
    "hint": "The start value. A variable can be set to any value.",
    "plugin": null
   },
   "startRoutineValue": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Routine start value",
    "hint": "Set the value for the beginning of each Routine.",
    "plugin": null
   },
   "startFrameValue": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Frame start value",
    "hint": "Set the value for the beginning of every screen refresh.",
    "plugin": null
   },
   "saveStartExp": {
    "val": false,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Save exp start value",
    "hint": "Save the experiment start value in data file.",
    "plugin": null
   },
   "saveEndExp": {
    "val": false,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Save exp end value",
    "hint": "Save the experiment end value in data file.",
    "plugin": null
   },
   "saveStartRoutine": {
    "val": false,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Save Routine start value",
    "hint": "Save the Routine start value in data file.",
    "plugin": null
   },
   "saveEndRoutine": {
    "val": true,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Save Routine end value",
    "hint": "Save the Routine end value in data file.",
    "plugin": null
   },
   "saveFrameValue": {
    "val": "never",
    "categ": "Data",
    "allowedVals": [
     "first",
     "last",
     "all",
     "never"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": "constant",
    "allowedUpdates": null,
    "label": "Save frame value",
    "hint": "Save choice of frame value in data file.",
    "plugin": null
   }
  }
 },
 "BaseStandaloneRoutine": {
  "__class__": "psychopy.experiment.routines._base:BaseStandaloneRoutine",
  "__name__": "BaseStandaloneRoutine",
  "categories": [
   "Custom"
  ],
  "targets": [],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\routines\\unknown\\light\\unknown.png",
  "tooltip": "",
  "version": "0.0.0",
  "beta": false,
  "hidden": false,
  "params": {
   "name": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "name",
    "updates": null,
    "allowedUpdates": null,
    "label": "Name",
    "hint": "Name of this Routine (alphanumeric or _, no spaces)",
    "plugin": null
   },
   "stopVal": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "num",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [],
    "label": "Stop",
    "hint": "When does the Routine end? (blank is endless)",
    "plugin": null
   },
   "stopType": {
    "val": "duration (s)",
    "categ": "Basic",
    "allowedVals": [
     "duration (s)",
     "duration (frames)",
     "condition"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Stop type...",
    "hint": "How do you want to define your end point?",
    "plugin": null
   },
   "disabled": {
    "val": false,
    "categ": "Testing",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Disable Routine",
    "hint": "Disable this Routine",
    "plugin": null
   }
  }
 },
 "AudioValidatorRoutine": {
  "__class__": "psychopy.experiment.routines.audioValidator:AudioValidatorRoutine",
  "__name__": "AudioValidatorRoutine",
  "categories": [
   "Validation"
  ],
  "targets": [
   "PsychoPy"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\routines\\audioValidator\\light\\audio_validator.png",
  "tooltip": "Use a sound sensor to confirm that audio stimuli are presented when they should be.",
  "version": "2025.1.0",
  "beta": false,
  "hidden": false,
  "params": {
   "name": {
    "val": "audioVal",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "name",
    "updates": null,
    "allowedUpdates": null,
    "label": "Name",
    "hint": "Name of this Routine (alphanumeric or _, no spaces)",
    "plugin": null
   },
   "disabled": {
    "val": false,
    "categ": "Testing",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Disable Routine",
    "hint": "Disable this Routine",
    "plugin": null
   },
   "threshold": {
    "val": 0.5,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Threshold",
    "hint": "Arbitrary volume threshold at which the sound sensor should register a positive, units go from 0 (least volume) to 1 (most volume).",
    "plugin": null
   },
   "deviceLabel": {
    "val": "",
    "categ": "Device",
    "allowedVals": [],
    "valType": "str",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Device name",
    "hint": "A name to refer to this Component's associated hardware device by. If using the same device for multiple components, be sure to use the same name here.",
    "plugin": null
   },
   "deviceBackend": {
    "val": "microphone",
    "categ": "Device",
    "allowedVals": [
     "microphone"
    ],
    "valType": "code",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Sound sensor type",
    "hint": "Type of sound sensor to use.",
    "plugin": null
   },
   "channel": {
    "val": "0",
    "categ": "Device",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Sound sensor channel",
    "hint": "If relevant, a channel number attached to the sound sensor, to distinguish it from other sound sensors on the same port. Leave blank to use the first sound sensor which can detect the speaker.",
    "plugin": null
   },
   "microphone": {
    "val": null,
    "categ": "Device",
    "allowedVals": [
     null,
     "Microphone (Steam Streaming Microphone)",
     "Microphone (Logitech BRIO)",
     "Microphone (PowerConf S3)",
     "Speakers (Steam Streaming Speakers) [Loopback]",
     "Digital Audio (S/PDIF) (High Definition Audio Device) [Loopback]",
     "Speakers (Steam Streaming Microphone) [Loopback]",
     "Speakers (PowerConf S3) [Loopback]",
     "Headphones (Office Speaker Stereo) [Loopback]"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Microphone",
    "hint": "What microphone device to use?",
    "plugin": null
   },
   "dbRange": {
    "val": [
     0,
     1
    ],
    "categ": "Device",
    "allowedVals": [],
    "valType": "list",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Decibel range",
    "hint": "Range of possible decibels to expect mic responses to be in, by default (0, 1)",
    "plugin": null
   },
   "samplingWindow": {
    "val": 0.03,
    "categ": "Device",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Sampling window",
    "hint": "How long (s) to average samples from the microphone across? Larger sampling windows reduce the chance of random spikes, but also reduce sensitivity.",
    "plugin": null
   }
  }
 },
 "VisualValidatorRoutine": {
  "__class__": "psychopy.experiment.routines.visualValidator:VisualValidatorRoutine",
  "__name__": "VisualValidatorRoutine",
  "categories": [
   "Validation"
  ],
  "targets": [
   "PsychoPy"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\routines\\visualValidator\\light\\visual_validator.png",
  "tooltip": "Use a light sensor to confirm that visual stimuli are presented when they should be.",
  "version": "2025.1.0",
  "beta": false,
  "hidden": false,
  "params": {
   "name": {
    "val": "visualVal",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "name",
    "updates": null,
    "allowedUpdates": null,
    "label": "Name",
    "hint": "Name of this Routine (alphanumeric or _, no spaces)",
    "plugin": null
   },
   "disabled": {
    "val": false,
    "categ": "Testing",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Disable Routine",
    "hint": "Disable this Routine",
    "plugin": null
   },
   "findThreshold": {
    "val": true,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Find best threshold?",
    "hint": "Run a brief Routine to find the best threshold for the light sensor at experiment start?",
    "plugin": null
   },
   "threshold": {
    "val": 0.5,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Threshold",
    "hint": "Light threshold at which the light sensor should register a positive, units go from 0 (least sensitive) to 1 (most sensitive).",
    "plugin": null
   },
   "findSensor": {
    "val": true,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Find sensor?",
    "hint": "Run a brief Routine to find the size and position of the light sensor at experiment start?",
    "plugin": null
   },
   "sensorPos": {
    "val": "(1, 1)",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "list",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Position [x,y]",
    "hint": "Position of the light sensor on the window.",
    "plugin": null
   },
   "sensorSize": {
    "val": "(0.1, 0.1)",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "list",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [
     "constant",
     "set every repeat",
     "set every frame"
    ],
    "label": "Size [x,y]",
    "hint": "Size of the area covered by the light sensor on the window.",
    "plugin": null
   },
   "sensorUnits": {
    "val": "norm",
    "categ": "Basic",
    "allowedVals": [
     "from exp settings",
     "deg",
     "cm",
     "pix",
     "norm",
     "height",
     "degFlatPos",
     "degFlat"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Spatial units",
    "hint": "Spatial units in which the light sensor size and position are specified.",
    "plugin": null
   },
   "deviceLabel": {
    "val": "",
    "categ": "Device",
    "allowedVals": [],
    "valType": "str",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Device name",
    "hint": "A name to refer to this Component's associated hardware device by. If using the same device for multiple components, be sure to use the same name here.",
    "plugin": null
   },
   "deviceBackend": {
    "val": "screenbuffer",
    "categ": "Device",
    "allowedVals": [
     "screenbuffer"
    ],
    "valType": "code",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Light sensor type",
    "hint": "Type of light sensor to use.",
    "plugin": null
   },
   "channel": {
    "val": "0",
    "categ": "Device",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Light sensor channel",
    "hint": "If relevant, a channel number attached to the light sensor, to distinguish it from other light sensors on the same port. Leave blank to use the first light sensor which can detect the Window.",
    "plugin": null
   }
  }
 },
 "UnknownRoutine": {
  "__class__": "psychopy.experiment.routines.unknown:UnknownRoutine",
  "__name__": "UnknownRoutine",
  "categories": [
   "Other"
  ],
  "targets": [],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\routines\\unknown\\light\\unknown.png",
  "tooltip": "Unknown routine",
  "version": "0.0.0",
  "beta": false,
  "hidden": true,
  "params": {
   "name": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "name",
    "updates": null,
    "allowedUpdates": null,
    "label": "Name",
    "hint": "Name of this Routine (alphanumeric or _, no spaces)",
    "plugin": null
   },
   "stopVal": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "num",
    "inputType": "single",
    "updates": "constant",
    "allowedUpdates": [],
    "label": "Stop",
    "hint": "When does the Routine end? (blank is endless)",
    "plugin": null
   },
   "stopType": {
    "val": "duration (s)",
    "categ": "Basic",
    "allowedVals": [
     "duration (s)",
     "duration (frames)",
     "condition"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Stop type...",
    "hint": "How do you want to define your end point?",
    "plugin": null
   },
   "disabled": {
    "val": false,
    "categ": "Testing",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Disable Routine",
    "hint": "Disable this Routine",
    "plugin": null
   }
  }
 },
 "EyetrackerCalibrationRoutine": {
  "__class__": "psychopy.experiment.routines.eyetracker_calibrate:EyetrackerCalibrationRoutine",
  "__name__": "EyetrackerCalibrationRoutine",
  "categories": [
   "Eyetracking"
  ],
  "targets": [
   "PsychoPy"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\routines\\eyetracker_calibrate\\light\\eyetracker_calib.png",
  "tooltip": "Calibration routine for eyetrackers",
  "version": "2021.2.0",
  "beta": true,
  "hidden": false,
  "params": {
   "name": {
    "val": "calibration",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "name",
    "updates": null,
    "allowedUpdates": null,
    "label": "Name",
    "hint": "Name of this Routine (alphanumeric or _, no spaces)",
    "plugin": null
   },
   "disabled": {
    "val": false,
    "categ": "Testing",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Disable Routine",
    "hint": "Disable this Routine",
    "plugin": null
   },
   "targetLayout": {
    "val": "NINE_POINTS",
    "categ": "Basic",
    "allowedVals": [
     "THREE_POINTS",
     "FIVE_POINTS",
     "NINE_POINTS",
     "THIRTEEN_POINTS"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Target layout",
    "hint": "How many targets do you want to be presented for calibration? Points will be displayed in a grid.",
    "plugin": null
   },
   "randomisePos": {
    "val": true,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Randomise target positions",
    "hint": "Should the order of target positions be randomised?",
    "plugin": null
   },
   "textColor": {
    "val": "white",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "color",
    "inputType": "color",
    "updates": null,
    "allowedUpdates": null,
    "label": "Text color",
    "hint": "Text foreground color",
    "plugin": null
   },
   "useCustom": {
    "val": false,
    "categ": "Target",
    "allowedVals": [],
    "valType": "code",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Use custom?",
    "hint": "Check this box to use a custom stimulus as a calibration target, rather than creating one from params.",
    "plugin": null
   },
   "customTarget": {
    "val": "",
    "categ": "Target",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Custom target",
    "hint": "Give the name of any visual Component to use it as a calibration target.",
    "plugin": null
   },
   "innerFillColor": {
    "val": "green",
    "categ": "Target",
    "allowedVals": [],
    "valType": "color",
    "inputType": "color",
    "updates": null,
    "allowedUpdates": null,
    "label": "Inner fill color",
    "hint": "Fill color of the inner part of the target",
    "plugin": null
   },
   "innerBorderColor": {
    "val": "black",
    "categ": "Target",
    "allowedVals": [],
    "valType": "color",
    "inputType": "color",
    "updates": null,
    "allowedUpdates": null,
    "label": "Inner border color",
    "hint": "Border color of the inner part of the target",
    "plugin": null
   },
   "fillColor": {
    "val": "",
    "categ": "Target",
    "allowedVals": [],
    "valType": "color",
    "inputType": "color",
    "updates": null,
    "allowedUpdates": null,
    "label": "Outer fill color",
    "hint": "Fill color of the outer part of the target",
    "plugin": null
   },
   "borderColor": {
    "val": "black",
    "categ": "Target",
    "allowedVals": [],
    "valType": "color",
    "inputType": "color",
    "updates": null,
    "allowedUpdates": null,
    "label": "Outer border color",
    "hint": "Border color of the outer part of the target",
    "plugin": null
   },
   "colorSpace": {
    "val": "rgb",
    "categ": "Target",
    "allowedVals": [
     "rgb",
     "dkl",
     "lms",
     "hsv"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Color space",
    "hint": "In what format (color space) have you specified the colors? (rgb, dkl, lms, hsv)",
    "plugin": null
   },
   "borderWidth": {
    "val": 2,
    "categ": "Target",
    "allowedVals": [],
    "valType": "num",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Outer border width",
    "hint": "Width of the line around the outer part of the target",
    "plugin": null
   },
   "innerBorderWidth": {
    "val": 2,
    "categ": "Target",
    "allowedVals": [],
    "valType": "num",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Inner border width",
    "hint": "Width of the line around the inner part of the target",
    "plugin": null
   },
   "outerRadius": {
    "val": 0.01,
    "categ": "Target",
    "allowedVals": [],
    "valType": "num",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Outer radius",
    "hint": "Size (radius) of the outer part of the target",
    "plugin": null
   },
   "innerRadius": {
    "val": 0.0035,
    "categ": "Target",
    "allowedVals": [],
    "valType": "num",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Inner radius",
    "hint": "Size (radius) of the inner part of the target",
    "plugin": null
   },
   "units": {
    "val": "from exp settings",
    "categ": "Target",
    "allowedVals": [
     "from exp settings"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Spatial units",
    "hint": "Units of dimensions for this stimulus",
    "plugin": null
   },
   "progressMode": {
    "val": "time",
    "categ": "Animation",
    "allowedVals": [
     "space key",
     "time"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Progress mode",
    "hint": "Should the target move to the next position after a keypress or after an amount of time?",
    "plugin": null
   },
   "targetDur": {
    "val": 1.5,
    "categ": "Animation",
    "allowedVals": [],
    "valType": "num",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Target duration",
    "hint": "Time limit (s) after which progress to next position",
    "plugin": null
   },
   "expandDur": {
    "val": 1,
    "categ": "Animation",
    "allowedVals": [],
    "valType": "num",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Expand / contract duration",
    "hint": "Duration of the target expand/contract animation",
    "plugin": null
   },
   "expandScale": {
    "val": 1.5,
    "categ": "Animation",
    "allowedVals": [],
    "valType": "num",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Expand scale",
    "hint": "How many times bigger than its size the target grows",
    "plugin": null
   },
   "movementAnimation": {
    "val": true,
    "categ": "Animation",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Animate position changes",
    "hint": "Enable / disable animations as target stim changes position",
    "plugin": null
   },
   "movementDur": {
    "val": 1.0,
    "categ": "Animation",
    "allowedVals": [],
    "valType": "num",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Movement duration",
    "hint": "Duration of the animation during position changes.",
    "plugin": null
   },
   "targetDelay": {
    "val": 1.0,
    "categ": "Animation",
    "allowedVals": [],
    "valType": "num",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Target delay",
    "hint": "Duration of the delay between positions.",
    "plugin": null
   }
  }
 },
 "CounterbalanceRoutine": {
  "__class__": "psychopy.experiment.routines.counterbalance:CounterbalanceRoutine",
  "__name__": "CounterbalanceRoutine",
  "categories": [
   "Custom"
  ],
  "targets": [
   "PsychoPy",
   "PsychoJS"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\routines\\counterbalance\\light\\counterbalance.png",
  "tooltip": "Counterbalance Routine: use the Shelf to choose a value taking into account previous runs of this experiment.",
  "version": "0.0.0",
  "beta": true,
  "hidden": false,
  "params": {
   "name": {
    "val": "counterbalance",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "name",
    "updates": null,
    "allowedUpdates": null,
    "label": "Name",
    "hint": "Name of this Routine (alphanumeric or _, no spaces)",
    "plugin": null
   },
   "disabled": {
    "val": false,
    "categ": "Testing",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Disable Routine",
    "hint": "Disable this Routine",
    "plugin": null
   },
   "specMode": {
    "val": "uniform",
    "categ": "Basic",
    "allowedVals": [
     "uniform",
     "file"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Groups from...",
    "hint": "Specify groups using an Excel file (for fine tuned control), specify as a variable name, or specify a number of groups to create equally likely groups with a uniform cap.",
    "plugin": null
   },
   "nReps": {
    "val": 1,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Num. repeats",
    "hint": "How many times to run slots down to depletion?",
    "plugin": null
   },
   "conditionsFile": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "file",
    "inputType": "table",
    "updates": null,
    "allowedUpdates": null,
    "label": "Conditions",
    "hint": "Name of a file specifying the parameters for each group (.csv, .xlsx, or .pkl). Browse to select a file. Right-click to preview file contents, or create a new file.",
    "plugin": null
   },
   "conditionsVariable": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Conditions",
    "hint": "Name of a variable specifying the parameters for each group. Should be a list of dicts, like the output of data.conditionsFromFile",
    "plugin": null
   },
   "nGroups": {
    "val": 2,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Num. groups",
    "hint": "Number of groups to use.",
    "plugin": null
   },
   "nSlots": {
    "val": 10,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Slots per group",
    "hint": "Max number of participants in each group for each repeat.",
    "plugin": null
   },
   "endExperimentOnDepletion": {
    "val": "ignore",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "End experiment on depletion",
    "hint": "When all slots and repetitions are depleted, should the experiment end or continue with .finished on this Routine as True?",
    "plugin": null
   },
   "saveData": {
    "val": true,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Save data",
    "hint": "Save chosen group and associated params this repeat to the data file?",
    "plugin": null
   },
   "saveRemaining": {
    "val": true,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Save remaining cap",
    "hint": "Save the remaining cap for the chosen group this repeat to the data file?",
    "plugin": null
   }
  }
 },
 "EyetrackerValidationRoutine": {
  "__class__": "psychopy.experiment.routines.eyetracker_validate:EyetrackerValidationRoutine",
  "__name__": "EyetrackerValidationRoutine",
  "categories": [
   "Eyetracking"
  ],
  "targets": [
   "PsychoPy"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\routines\\eyetracker_validate\\light\\eyetracker_valid.png",
  "tooltip": "Validation routine for eyetrackers",
  "version": "2021.2.0",
  "beta": true,
  "hidden": false,
  "params": {
   "name": {
    "val": "validation",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "name",
    "updates": null,
    "allowedUpdates": null,
    "label": "Name",
    "hint": "Name of this Routine (alphanumeric or _, no spaces)",
    "plugin": null
   },
   "disabled": {
    "val": false,
    "categ": "Testing",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Disable Routine",
    "hint": "Disable this Routine",
    "plugin": null
   },
   "targetLayout": {
    "val": "NINE_POINTS",
    "categ": "Basic",
    "allowedVals": [
     "THREE_POINTS",
     "FIVE_POINTS",
     "NINE_POINTS",
     "THIRTEEN_POINTS",
     "SEVENTEEN_POINTS",
     "CUSTOM..."
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Target layout",
    "hint": "How many targets do you want to be presented for calibration? Points will be displayed in a grid.",
    "plugin": null
   },
   "targetPositions": {
    "val": "NINE_POINTS",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "list",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Target positions",
    "hint": "List of positions (x, y) at which the target can appear",
    "plugin": null
   },
   "randomisePos": {
    "val": true,
    "categ": "Basic",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Randomise target positions",
    "hint": "Should the order of target positions be randomised?",
    "plugin": null
   },
   "cursorFillColor": {
    "val": "green",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "color",
    "inputType": "color",
    "updates": null,
    "allowedUpdates": null,
    "label": "Gaze cursor color",
    "hint": "Fill color of the gaze cursor",
    "plugin": null
   },
   "textColor": {
    "val": "auto",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "color",
    "inputType": "color",
    "updates": null,
    "allowedUpdates": null,
    "label": "Text color",
    "hint": "Color of text used in validation procedure.",
    "plugin": null
   },
   "innerFillColor": {
    "val": "green",
    "categ": "Target",
    "allowedVals": [],
    "valType": "color",
    "inputType": "color",
    "updates": null,
    "allowedUpdates": null,
    "label": "Inner fill color",
    "hint": "Fill color of the inner part of the target",
    "plugin": null
   },
   "innerBorderColor": {
    "val": "black",
    "categ": "Target",
    "allowedVals": [],
    "valType": "color",
    "inputType": "color",
    "updates": null,
    "allowedUpdates": null,
    "label": "Inner border color",
    "hint": "Border color of the inner part of the target",
    "plugin": null
   },
   "fillColor": {
    "val": "",
    "categ": "Target",
    "allowedVals": [],
    "valType": "color",
    "inputType": "color",
    "updates": null,
    "allowedUpdates": null,
    "label": "Outer fill color",
    "hint": "Fill color of the outer part of the target",
    "plugin": null
   },
   "borderColor": {
    "val": "black",
    "categ": "Target",
    "allowedVals": [],
    "valType": "color",
    "inputType": "color",
    "updates": null,
    "allowedUpdates": null,
    "label": "Outer border color",
    "hint": "Border color of the outer part of the target",
    "plugin": null
   },
   "colorSpace": {
    "val": "rgb",
    "categ": "Target",
    "allowedVals": [
     "rgb",
     "dkl",
     "lms",
     "hsv"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Color space",
    "hint": "In what format (color space) have you specified the colors? (rgb, dkl, lms, hsv)",
    "plugin": null
   },
   "borderWidth": {
    "val": 2,
    "categ": "Target",
    "allowedVals": [],
    "valType": "num",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Outer border width",
    "hint": "Width of the line around the outer part of the target",
    "plugin": null
   },
   "innerBorderWidth": {
    "val": 2,
    "categ": "Target",
    "allowedVals": [],
    "valType": "num",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Inner border width",
    "hint": "Width of the line around the inner part of the target",
    "plugin": null
   },
   "outerRadius": {
    "val": 0.01,
    "categ": "Target",
    "allowedVals": [],
    "valType": "num",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Outer radius",
    "hint": "Size (radius) of the outer part of the target",
    "plugin": null
   },
   "innerRadius": {
    "val": 0.0035,
    "categ": "Target",
    "allowedVals": [],
    "valType": "num",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Inner radius",
    "hint": "Size (radius) of the inner part of the target",
    "plugin": null
   },
   "units": {
    "val": "from exp settings",
    "categ": "Target",
    "allowedVals": [
     "from exp settings"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Spatial units",
    "hint": "Units of dimensions for this stimulus",
    "plugin": null
   },
   "progressMode": {
    "val": "time",
    "categ": "Animation",
    "allowedVals": [
     "space key",
     "time"
    ],
    "valType": "str",
    "inputType": "choice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Progress mode",
    "hint": "Should the target move to the next position after a keypress or after an amount of time?",
    "plugin": null
   },
   "targetDur": {
    "val": 1.5,
    "categ": "Animation",
    "allowedVals": [],
    "valType": "num",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Target duration",
    "hint": "Time limit (s) after which progress to next position",
    "plugin": null
   },
   "expandDur": {
    "val": 1,
    "categ": "Animation",
    "allowedVals": [],
    "valType": "num",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Expand / contract duration",
    "hint": "Duration of the target expand/contract animation",
    "plugin": null
   },
   "expandScale": {
    "val": 1.5,
    "categ": "Animation",
    "allowedVals": [],
    "valType": "num",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Expand scale",
    "hint": "How many times bigger than its size the target grows",
    "plugin": null
   },
   "movementAnimation": {
    "val": true,
    "categ": "Animation",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Animate position changes",
    "hint": "Enable / disable animations as target stim changes position",
    "plugin": null
   },
   "movementDur": {
    "val": 1.0,
    "categ": "Animation",
    "allowedVals": [],
    "valType": "num",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Movement duration",
    "hint": "Duration of the animation during position changes.",
    "plugin": null
   },
   "targetDelay": {
    "val": 1.0,
    "categ": "Animation",
    "allowedVals": [],
    "valType": "num",
    "inputType": "single",
    "updates": null,
    "allowedUpdates": null,
    "label": "Target delay",
    "hint": "Duration of the delay between positions.",
    "plugin": null
   },
   "saveAsImg": {
    "val": false,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Save as image",
    "hint": "Save results as an image",
    "plugin": null
   },
   "showResults": {
    "val": true,
    "categ": "Data",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Show results screen",
    "hint": "Show a screen with results after completion?",
    "plugin": null
   }
  }
 },
 "PavloviaSurveyRoutine": {
  "__class__": "psychopy.experiment.routines.pavlovia_survey:PavloviaSurveyRoutine",
  "__name__": "PavloviaSurveyRoutine",
  "categories": [
   "Responses"
  ],
  "targets": [
   "PsychoJS"
  ],
  "plugin": null,
  "iconFile": "F:\\GitHub\\psychopy\\psychopy\\experiment\\routines\\pavlovia_survey\\light\\survey.png",
  "tooltip": "Run a SurveyJS survey in Pavlovia",
  "version": "2023.1.0",
  "beta": false,
  "hidden": false,
  "params": {
   "name": {
    "val": "survey",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "code",
    "inputType": "name",
    "updates": null,
    "allowedUpdates": null,
    "label": "Name",
    "hint": "Name of this Routine (alphanumeric or _, no spaces)",
    "plugin": null
   },
   "disabled": {
    "val": false,
    "categ": "Testing",
    "allowedVals": [],
    "valType": "bool",
    "inputType": "bool",
    "updates": null,
    "allowedUpdates": null,
    "label": "Disable Routine",
    "hint": "Disable this Routine",
    "plugin": null
   },
   "surveyType": {
    "val": "id",
    "categ": "Basic",
    "allowedVals": [
     "id",
     "json"
    ],
    "valType": "code",
    "inputType": "richChoice",
    "updates": null,
    "allowedUpdates": null,
    "label": "Survey type",
    "hint": "",
    "plugin": null
   },
   "surveyId": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "str",
    "inputType": "survey",
    "updates": null,
    "allowedUpdates": null,
    "label": "Survey id",
    "hint": "The ID for your survey on Pavlovia. Tip: Right click to open the survey in your browser!",
    "plugin": null
   },
   "surveyJson": {
    "val": "",
    "categ": "Basic",
    "allowedVals": [],
    "valType": "str",
    "inputType": "file",
    "updates": null,
    "allowedUpdates": null,
    "label": "Survey JSON",
    "hint": "File path of the JSON file used to construct the survey",
    "plugin": null
   }
  }
 },
 "TrialHandler": {
    "__class__": "psychopy.experiment.loops:TrialHandler",
    "__name__": "TrialHandler",
    "params": {
        "name": {
        "val": "trials",
        "categ": "Basic",
        "allowedVals": [],
        "valType": "code",
        "inputType": "name",
        "updates": null,
        "allowedUpdates": null,
        "label": "Name",
        "hint": "Name of this loop",
        "plugin": null
        },
        "nReps": {
        "val": 5,
        "categ": "Basic",
        "allowedVals": [],
        "valType": "num",
        "inputType": "spin",
        "updates": null,
        "allowedUpdates": null,
        "label": "Num. repeats",
        "hint": "Number of repeats (for each condition)",
        "plugin": null
        },
        "conditions": {
        "val": [],
        "categ": "Basic",
        "allowedVals": [],
        "valType": "str",
        "inputType": "single",
        "updates": null,
        "allowedUpdates": null,
        "label": "Conditions",
        "hint": "A list of dictionaries describing the parameters in each condition",
        "plugin": null
        },
        "conditionsFile": {
        "val": "",
        "categ": "Basic",
        "allowedVals": [],
        "valType": "file",
        "inputType": "table",
        "updates": null,
        "allowedUpdates": null,
        "label": "Conditions",
        "hint": "Name of a file specifying the parameters for each condition (.csv, .xlsx, or .pkl). Browse to select a file. Right-click to preview file contents, or create a new file.",
        "plugin": null
        },
        "endPoints": {
        "val": [
        0,
        1
        ],
        "categ": "Basic",
        "allowedVals": [],
        "valType": "num",
        "inputType": "single",
        "updates": null,
        "allowedUpdates": null,
        "label": "End points",
        "hint": "The start and end of the loop (see flow timeline)",
        "plugin": null
        },
        "Selected rows": {
        "val": "",
        "categ": "Basic",
        "allowedVals": [],
        "valType": "str",
        "inputType": "single",
        "updates": null,
        "allowedUpdates": null,
        "label": "Selected rows",
        "hint": "Select just a subset of rows from your condition file (the first is 0 not 1!). Examples: 0, 0:5, 5:-1",
        "plugin": null
        },
        "loopType": {
        "val": "random",
        "categ": "Basic",
        "allowedVals": [
        "random",
        "sequential",
        "fullRandom",
        "staircase",
        "interleaved staircases"
        ],
        "valType": "str",
        "inputType": "choice",
        "updates": null,
        "allowedUpdates": null,
        "label": "Loop type",
        "hint": "How should the next condition value(s) be chosen?",
        "plugin": null
        },
        "random seed": {
        "val": "",
        "categ": "Basic",
        "allowedVals": [],
        "valType": "code",
        "inputType": "single",
        "updates": null,
        "allowedUpdates": null,
        "label": "Random seed",
        "hint": "To have a fixed random sequence provide an integer of your choosing here. Leave blank to have a new random sequence on each run of the experiment.",
        "plugin": null
        },
        "isTrials": {
        "val": true,
        "categ": "Basic",
        "allowedVals": [],
        "valType": "bool",
        "inputType": "bool",
        "updates": null,
        "allowedUpdates": null,
        "label": "Is trials",
        "hint": "Indicates that this loop generates TRIALS, rather than BLOCKS of trials or stimuli within a trial. It alters how data files are output",
        "plugin": null
        }
    }
  }
}